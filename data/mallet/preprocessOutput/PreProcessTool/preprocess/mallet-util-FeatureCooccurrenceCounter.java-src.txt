types gnu trove arrays logging text number format io feature cooccurrence counter logger logger = logger get logger feature cooccurrence counter get name command option input = command option feature cooccurrence counter input f i l e n a m e filename from which to read list training instances use stdin + instances must be feature sequence or feature sequence bigrams not feature vector command option weights = command option feature cooccurrence counter weights filename f i l e n a m e filename to write word word weights command option idf cutoff = command option feature cooccurrence counter idf cutoff n u m b e r 3 0 words f below threshold will not be linked to any other word command option unlinked = command option feature cooccurrence counter unlinked filename f i l e n a m e a to write words that were not linked t hash map feature feature counts instance list instances num features document frequencies feature cooccurrence counter instance list instances instances = instances num features = instances get data alphabet size feature feature counts = t hash map num features feature = 0 feature < num features feature++ feature feature counts feature = t hash map document frequencies = num features count t hash map feature counts = t hash map index = 0 instance instance instances feature sequence features = feature sequence instance get data i=0 i<features get length i++ feature counts adjust or put value features get index at position i 1 1 keys = feature counts keys i = 0 i < keys length 1 i++ left feature = keys i j = i+1 j < keys length j++ right feature = keys j feature feature counts left feature adjust or put value right feature 1 1 feature feature counts right feature adjust or put value left feature 1 1 key keys document frequencies key ++ feature counts = t hash map index++ index % 1000 == 0 err index g2 left right both total form a smoothed contingency table just left = left both + 0 01 just right = right both + 0 01 both += 0 01 neither = total left right + both + 0 01 total += 0 04 left marginal prob = just left + both total right marginal prob = just right + both total log left = math log left marginal prob log right = math log right marginal prob log not left = math log 1 0 left marginal prob log not right = math log 1 0 right marginal prob g2 = both math log both total log left log right + just left math log just left total log left log not right + just right math log just right total log not left log right + neither math log neither total log not left log not right g2 print counts i o number format formatter = number format get instance formatter set maximum fraction digits 3 alphabet alphabet = instances get data alphabet log total docs = math log instances size log cache = instances size + 1 n = 1 n < log cache length n++ log cache n = math log n unlinked value != print writer out = print writer unlinked value feature = 0 feature < num features feature++ feature f = log total docs log cache document frequencies feature feature f < idf cutoff value out alphabet lookup feature out close print writer out = print writer weights value feature = 0 feature < num features feature++ t hash map feature counts = feature feature counts feature keys = feature counts keys feature f = log total docs log cache document frequencies feature builder output = builder output append alphabet lookup feature output append output append 1 0 document frequencies feature <= 5 out output feature f idf cutoff value > 0 sorter sorted weights = sorter keys length i = 0 key keys key f = log total docs log cache document frequencies key key f idf cutoff value > 0 sorted weights i = sorter key key f idf cutoff value feature f idf cutoff value feature counts get key document frequencies feature sorted weights i = sorter key 0 i++ arrays sort sorted weights i = 0 i < 10 i++ i >= sorted weights length key = sorted weights i get word = alphabet lookup sorted weights i get weight = sorted weights i get weight weight < 0 05 output append + word + + weight out output out close command option set summary feature cooccurrence counter build a containing weights between word types command option process feature cooccurrence counter instance list training = instance list load input value feature cooccurrence counter counter = feature cooccurrence counter training counter count counter print counts 
2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e gnu trove t hash map gnu trove t procedure gnu trove t iterator io serializable io output stream io i o io input stream hash map that maps pairs to uses much less space than an 2d mapping sparse created dec 14 2005 author < a h r e f= mailto casutton edu>casutton edu< a> $ m int2 map v 1 1 2007 10 22 21 37 58 exp $ m int2 map serializable t hash map backing = t hash map m int2 map m int2 map initial capacity backing = t hash map initial capacity put key1 key2 value t hash map inner backing contains key key1 inner = t hash map backing get key1 inner = t hash map backing put key1 inner inner put key2 value get key1 key2 t hash map inner = t hash map backing get key1 inner == inner get key2 an iterator over set key2 value pairs that match key1 t iterator curry key1 t hash map inner = t hash map backing get key1 inner == t iterator t hash map t iterator inner an first level keys keys1 backing keys size n = 0 backing each value t procedure execute t hash map inner = t hash map n 0 += inner size n 0 keys2 key1 t hash map inner = t hash map backing get key1 inner keys serial u = 1 u r r e n t s e r i a l v e r s i o n = 1 write output stream out i o out write u r r e n t s e r i a l v e r s i o n keys1 = keys1 out write keys1 length i = 0 i < keys1 length i++ k1 = keys1 i out write k1 keys2 = keys2 k1 out write keys2 length j = 0 j < keys2 length j++ k2 = keys2 j out write k2 out write get k1 k2 read input stream in i o not found in read = n1 = in read backing = t hash map n1 i = 0 i < n1 i++ k1 = in read n2 = in read j = 0 j < n2 j++ k2 = in read value = in read put k1 k2 value 
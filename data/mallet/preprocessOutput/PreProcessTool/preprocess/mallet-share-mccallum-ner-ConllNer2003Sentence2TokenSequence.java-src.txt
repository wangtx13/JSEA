2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> an error? co n l l pred o o o i m i s b m i s b m i s b m i s b m i s i m i s i m i s b m i s i m i s o o o o o o o o o share ner regex pipe types conll ner2003 sentence2 token sequence pipe endings = ing ed ogy s ly ion tion ity ies pattern ending patterns = pattern endings length indexed forward backward 0 1 2 offset ending ngram index ending names = 2 3 endings length i = 0 i < endings length i++ ending patterns i = pattern compile +endings i + $ j = 0 j < 3 j++ k = 0 k < 2 k++ ending names k j i = w + k==1? +j+ =< e n d +endings i + > save source = conjunctions = tags = phrases = spelling = digit collapses = downcasing = conll ner2003 sentence2 token sequence label alphabet conll ner2003 sentence2 token sequence extra features label alphabet !extra features digit collapses = conjunctions = spelling = phrases = tags = downcasing = lines look like d o s t a r t x x o e u n n p i n p i o r g rejects v b z i v p o german j j i n p i m i s call n n i n p o to t o i v p o boycott v b i v p o british j j i n p i m i s lamb n n i n p o o o peter n n p i n p i p e r blackburn n n p i n p i p e r b r u s s e l s n n p i n p i l o 1996 08 22 d i n p o d t i n p o european n n p i n p i o r g commission n n p i n p i o r g said v b d i v p o on i n i p p o instance pipe instance carrier sentence lines = carrier get data tokens = sentence lines split token sequence data = token sequence tokens length label sequence target = label sequence label alphabet get target alphabet tokens length ending = 3 endings length endingp1 = 3 endings length endingp2 = 3 endings length buffer source = save source ? buffer prev label = n o l a b e l pattern ipattern = pattern compile i word tag phrase label i = 0 i < tokens length i++ tokens i length != 0 features = tokens i split features length != 4 illegal state line \ +tokens i + \ doesn t have four elements word = features 0 to lower tag = features 1 phrase = features 2 label = features 3 word = < s> tag = < s> phrase = < s> label = o transformations digit collapses word matches 19\\d\\d word = < y e a r> word matches 19\\d\\ds word = < y e a r d e a d e> word matches 19\\d\\d \\d+ word = < y e a r s p a n> word matches \\d+\\\\ \\d word = < f r a t i o n> word matches \\d \\d \\ word = < d i g i t s> word matches 19\\d\\d \\d\\d \\d d word = < d a t e l i n e d a t e> word matches 19\\d\\d \\d\\d \\d\\d word = < d a t e l i n e d a t e> word matches led word = < l e d> word matches sponsored word = < l e d> downcasing word = word to lower token token = token word word and tag unigram at current time spelling j = 0 j < endings length j++ ending 2 j = ending 1 j ending 1 j = ending 0 j ending 0 j = ending patterns j matcher word matches ending 0 j token set feature value ending names 0 0 j 1 tags token set feature value t= +tag 1 phrases token set feature value p= +phrase 1 change so each segment always begins a b even previous token did not have label old label = label ipattern matcher label matches prev label length < 3 prev label o || !prev label substring 2 equals label substring 2 label = b + old label substring 1 prev label = old label append data add token target add bigram label target add label out print label + save source source append word source append source append bigram label source append source append label source append out carrier set data data carrier set target target save source carrier set source source carrier 
pipe io output stream io i o io input stream types feature sequence bigrams types instance types token types token sequence sequence lexer 2005 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e remove tokens that contain non alphabetic characters used in conjunction wtih sequence lexer l e x n o n w h i t e s p a e l a s s e s and feature sequence bigrams which in turn used topical n grams author <a href= mailto > andrew mc callum< a> token sequence remove non alpha pipe mark deletions = token sequence remove non alpha mark deletions mark deletions = mark deletions token sequence remove non alpha instance pipe instance carrier token sequence ts = token sequence carrier get data xxx doesn t seem so efficient perhaps have token sequence use a linked list and remove tokens from it? ? but a linked list token sequence would be quite inefficient a k m token sequence ret = token sequence token prev token = i = 0 i < ts size i++ token t = ts get i s = t get text sequence lexer l e x a l p h a matcher s matches ret add t prev token = t mark deletions prev token != prev token set property feature sequence bigrams deletion mark t get text carrier set data ret carrier serialization serial u = 1 u r r e n t s e r i a l v e r s i o n = 0 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write mark deletions read input stream in i o not found = in read mark deletions = in read 
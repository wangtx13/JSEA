2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> types tests junit framework io i o arrays types dense vector types indexed sparse vector types sparse vector test indexed sparse vector test test indexed sparse vector name name dbl1 = 1 2 3 4 5 dbl2 = 1 1 5 2 1 1 dbl3 = 2 0 2 5 3 0 4 7 3 5 3 6 0 0 0 0 0 0 0 0 0 0 idxs = 3 5 7 13 15 indexed sparse vector s1 = indexed sparse vector idxs dbl1 dbl1 length dbl1 length indexed sparse vector s2 = indexed sparse vector idxs dbl2 dbl2 length dbl2 length sparse vector d1 = sparse vector dbl3 test location curidx = 0 max = idxs idxs length 1 idx = 0 idx < max idx++ idx == idxs curidx equals dbl1 curidx s1 value idx 1e 10 curidx++ equals 0 s1 value idx 1e 10 equals 0 s1 value max+1 1e 10 check answer indexed sparse vector actual ans equals wrong number locations ans length actual num locations i = 0 i < actual num locations i++ equals value incorrect at location +i+ ans i actual value at location i 0 0 test plus equals indexed sparse vector s = indexed sparse vector s1 clone matrix s plus equals sparse s2 2 0 check answer s 3 5 7 6 7 indexed sparse vector s2p = indexed sparse vector 13 0 8 s plus equals sparse s2p 1 0 check answer s 3 5 7 6 8 7 indexed sparse vector s3p = indexed sparse vector 14 0 8 s plus equals sparse s3p 1 0 check answer s 3 5 7 6 8 7 verify s unchanged indexed sparse vector s4 = indexed sparse vector 7 14 15 0 2 0 8 1 2 s plus equals sparse s4 1 0 check answer s 3 5 7 2 6 8 8 2 indexed sparse vector s5 = indexed sparse vector 7 0 2 s5 plus equals sparse s1 i = 0 i < s5 num locations i++ equals 7 s5 index at location i equals 3 2 s5 value at location i 0 0 indexed sparse vector s6 = indexed sparse vector 7 0 2 s6 plus equals sparse s1 3 5 i = 0 i < s6 num locations i++ equals 7 s6 index at location i equals 10 7 s6 value at location i 0 0 test dot product indexed sparse vector t1 = indexed sparse vector 7 0 2 equals 0 6 t1 dot product s1 0 00001 equals 0 6 s1 dot product t1 0 00001 equals 19 0 s1 dot product s2 0 00001 equals 19 0 s2 dot product s1 0 00001 equals 11 9 s1 dot product d1 0 00001 equals 10 1 s2 dot product d1 0 00001 test increment value indexed sparse vector s = indexed sparse vector s1 clone matrix s increment value 5 0 75 ans = 1 2 75 3 4 5 i = 0 i < s num locations i++ s value at location i == ans i test set value indexed sparse vector s = indexed sparse vector s1 clone matrix s set value 5 0 3 ans = 1 0 3 3 4 5 i = 0 i < s num locations i++ s value at location i == ans i idx2 = 3 7 12 15 18 test binary vector indexed sparse vector binary1 = indexed sparse vector idxs idxs length idxs length indexed sparse vector binary2 = indexed sparse vector idx2 idx2 length idx2 length equals 3 binary1 dot product binary2 0 0001 equals 3 binary2 dot product binary1 0 0001 equals 15 0 binary1 dot product s1 0 0001 equals 15 0 s1 dot product binary1 0 0001 equals 9 0 binary2 dot product s1 0 0001 equals 9 0 s1 dot product binary2 0 0001 indexed sparse vector dbl vec = indexed sparse vector s1 clone matrix dbl vec plus equals sparse binary1 check answer dbl vec 2 3 4 5 6 indexed sparse vector dbl vec2 = indexed sparse vector s1 clone matrix dbl vec2 plus equals sparse binary2 check answer dbl vec2 2 2 4 4 6 test clone matrix zeroed indexed sparse vector s = indexed sparse vector s1 clone matrix zeroed i = 0 i < s num locations i++ s value at location i == 0 0 s index at location i == idxs i test empty locations indexed sparse vector s = indexed sparse vector 0 0 equals 0 0 s value 38 1e 10 equals 0 0 s dot product s1 1e 10 test serializable i o not found indexed sparse vector s = indexed sparse vector s1 clone matrix indexed sparse vector s prime = indexed sparse vector test serializable clone via serialization s equals s num locations s prime num locations arrays equals s get indices s prime get indices arrays equals s get values s prime get values test serializable2 i o not found sparse vector vecs = sparse vector 2 vecs 0 = sparse vector sparse vector s1 clone matrix sparse vector s1 clone matrix vecs 1 = sparse vector sparse vector s1 clone matrix sparse vector vecs prime = sparse vector test serializable clone via serialization vecs equals vecs length vecs prime length test suite test suite test indexed sparse vector set up junit textui test runner run suite 
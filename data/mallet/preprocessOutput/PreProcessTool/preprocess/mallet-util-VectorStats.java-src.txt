2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e calculating statistics a sparse vector sample packaged in an instance list author jerod weinman < a h r e f= mailto weinman >weinman edu< a> arrays iterator types gnu trove t hash set vector stats a < o d e> sparse vector< o d e> whose entries taken from union those in instances are expected values those in < o d e> instance list< o d e> implies vector will not have binary values sparse vector mean instance list instances instances == || instances size == 0 iterator< instance> instance itr = instances iterator sparse vector v instance instance indices max sparse index = 1 max dense index = 1 first we find union all indices used in instances t hash set h indices = t hash set instances get data alphabet size instance itr has next instance = instance instance itr next v = sparse vector instance get data indices = v get indices indices != h indices add all indices indices indices length 1 > max sparse index max sparse index = indices indices length 1 dense v num locations > max dense index max dense index = v num locations 1 max dense index > 1 dense vectors were present max sparse index > max dense index sparse vectors were present and they had greater indices than dense vectors therefore we create sparse vectors and add all dense indices i = 0 i <= max dense index i++ h indices add i sparse indices may have been present but we t care since they never had indices that exceeded those dense vectors mean instances max dense index + 1 reaching statement implies we can create a sparse vector mean instances h indices to a < o d e> sparse vector< o d e> whose entries dense given number indices are expected values those in < o d e> instance list< o d e> implies vector will not have binary values sparse vector mean instance list instances num indices sparse vector mv = sparse vector num indices mean instances mv a < o d e> sparse vector< o d e> whose entries given indices are expected values those in < o d e> instance list< o d e> implies vector will not have binary values sparse vector mean instance list instances indices create mean vector indices having all zeros nothing copied sorted and no checks duplicates gdruck it faster to sort indices first arrays sort indices sparse vector mv = sparse vector indices indices length gdruck it faster to sort indices first above mean instances mv sparse vector mean instance list instances sparse vector mean vector instances == || instances size == 0 instance instance sparse vector v iterator< instance> instance itr = instances iterator factor = 1 0 instances size instance itr has next instance = instance instance itr next v = sparse vector instance get data mean vector plus equals sparse v factor mean vector a < o d e> sparse vector< o d e> whose entries taken from union those in instances are variance those in < o d e> instance list< o d e> implies vector will not have binary values unbiased normalizes n 1 when and n otherwise sparse vector variance instance list instances unbiased variance instances mean instances unbiased a < o d e> sparse vector< o d e> whose entries taken from mean argument are variance those in < o d e> instance list< o d e> implies vector will not have binary values unbiased normalizes n 1 when and n otherwise sparse vector variance instance list instances sparse vector mean unbiased instances == || instances size == 0 factor = 1 0 instances size unbiased ? 1 0 0 0 out factor = + factor sparse vector v var = x^2 n mu^2 n 1 sparse vector vv = sparse vector mean clone matrix vv times equals sparse vv instances size factor iterator< instance> instance itr = instances iterator instance instance instance itr has next instance = instance instance itr next v = sparse vector sparse vector instance get data clone matrix v times equals sparse v vv plus equals sparse v factor out var + vv vv unbiased variance sparse vector variance instance list instances variance instances unbiased variance instances having given mean sparse vector variance instance list instances sparse vector mean variance instances mean square root variance mean mean given instances unbiased normalizes variance n 1 when and n otherwise variance sparse vector stddev instance list instances sparse vector mean unbiased instances size == 0 sparse vector sv = variance instances mean unbiased dim = sv num locations val i = 0 i < dim i++ val = sv value at location i sv set value at location i math sqrt val sv square root unbiased variance sparse vector stddev instance list instances stddev instances square root variance unbiased normalizes variance n 1 when and n otherwise variance sparse vector stddev instance list instances unbiased stddev instances mean instances unbiased square root unbiased variance instances having given mean sparse vector stddev instance list instances sparse vector mean stddev instances mean 
examples types pipe pipe iterator topics regex io topic model begin importing documents from text to feature sequences list< pipe> pipe list = list< pipe> pipes lowercase tokenize remove stopwords map to features pipe list add sequence lowercase pipe list add sequence2 token sequence pattern compile \\p l \\p l \\p p +\\p l pipe list add token sequence remove stopwords stoplists en txt u t f 8 pipe list add token sequence2 feature sequence instance list instances = instance list serial pipes pipe list reader reader = input stream reader input stream 0 u t f 8 instances add thru pipe csv iterator reader pattern compile ^ \\ s \\s \\ s \\s $ 3 2 1 data label name fields create a model 100 topics alpha t = 0 01 beta w = 0 01 note that first parameter passed sum over topics second num topics = 100 parallel topic model model = parallel topic model num topics 1 0 0 01 model add instances instances use two parallel samplers which each look at one half corpus and combine statistics after every iteration model set num threads 2 run model 50 iterations and stop testing only real applications use 1000 to 2000 iterations model set num iterations 50 model estimate show words and topics in first instance data alphabet maps word ids to strings alphabet data alphabet = instances get data alphabet feature sequence tokens = feature sequence model get data get 0 instance get data label sequence topics = model get data get 0 topic sequence formatter out = formatter builder locale u s position = 0 position < tokens get length position++ out format %s %d data alphabet lookup tokens get index at position position topics get index at position position out out estimate topic first instance given current gibbs state topic = model get topic probabilities 0 get an sorted sets word count pairs list< tree set< sorter>> topic sorted words = model get sorted words show top 5 words in topics proportions first document topic = 0 topic < num topics topic++ iterator< sorter> iterator = topic sorted words get topic iterator out = formatter builder locale u s out format %d % 3f topic topic topic rank = 0 iterator has next rank < 5 sorter count pair = iterator next out format %s % 0f data alphabet lookup count pair get count pair get weight rank++ out out create a instance high probability topic 0 builder topic zero text = builder iterator< sorter> iterator = topic sorted words get 0 iterator rank = 0 iterator has next rank < 5 sorter count pair = iterator next topic zero text append data alphabet lookup count pair get + rank++ create a instance named test instance empty target and source fields instance list testing = instance list instances get pipe testing add thru pipe instance topic zero text to test instance topic inferencer inferencer = model get inferencer test probabilities = inferencer get sampled testing get 0 10 1 5 out 0 + test probabilities 0 
io i o io input stream io output stream io serializable logging level logging logger transducer state transducer transition iterator types label alphabet types label vector types sequence logger sum lattice scaling sum lattice logger logger = logger get logger sum lattice scaling get name save xis = ip == input position op == output position i == state index suppress warnings unchecked sequence input output transducer t total weight lattice node nodes indexed ip i alpha log scaling beta log scaling z log scaling lattice length gammas indexed ip i xis indexed ip i j saved only save xis ensure that instances cannot easily be created a zero constructor sum lattice scaling lattice node get lattice node ip state index nodes ip state index == nodes ip state index = lattice node ip t get state state index nodes ip state index suppress warnings unchecked sum lattice scaling transducer trans sequence input trans input transducer incrementor save xis suppress warnings unchecked sum lattice scaling transducer trans sequence input save xis trans input transducer incrementor save xis suppress warnings unchecked sum lattice scaling transducer trans sequence input transducer incrementor incrementor trans input incrementor save xis suppress warnings unchecked sum lattice scaling transducer trans sequence input sequence output trans input output transducer incrementor save xis you may pass output meaning that lattice not constrained to match output suppress warnings unchecked sum lattice scaling transducer trans sequence input sequence output transducer incrementor incrementor trans input output incrementor save xis suppress warnings unchecked sum lattice scaling transducer trans sequence input sequence output transducer incrementor incrementor label alphabet output alphabet trans input output incrementor save xis output alphabet you may pass output meaning that lattice not constrained to match output suppress warnings unchecked sum lattice scaling transducer trans sequence input sequence output transducer incrementor incrementor save xis trans input output incrementor save xis suppress warnings unchecked sum lattice scaling transducer trans sequence input sequence output transducer incrementor incrementor save xis label alphabet output alphabet output == || input size == output size initialize some structures t = trans input = input output = output lattice length = input size + 1 num states = t num states nodes = lattice node lattice length num states alpha log scaling = lattice length beta log scaling = lattice length gammas = lattice length num states save xis xis = lattice length num states num states output counts = output alphabet != output counts = lattice length output alphabet size ip = 0 ip < lattice length ip++ alpha log scaling ip = 0 0 beta log scaling ip = 0 0 i = 0 i < num states i++ gammas ip i = transducer i m p o s s i b l e w e i g h t save xis j = 0 j < num states j++ xis ip i j = transducer i m p o s s i b l e w e i g h t forward pass logger fine starting foward pass at least one initial state = i = 0 i < num states i++ initial weight = t get state i get initial weight initial weight > transducer i m p o s s i b l e w e i g h t get lattice node 0 i alpha = math exp initial weight at least one initial state = rescale alphas 0 at least one initial state == logger warning there are no starting states! ip = 0 ip < lattice length 1 ip++ i = 0 i < num states i++ invalid node ip i state s = t get state i transition iterator iter = s transition iterator input ip output ip iter has next state destination = iter next lattice node destination node = get lattice node ip + 1 destination get index na n destination node alpha destination node alpha = 0 destination node output = iter get output transition weight = iter get weight destination node alpha += nodes ip i alpha math exp transition weight re scale alphas to so that \sum i \alpha ip i = 1 rescale alphas ip + 1 calculate total weight lattice normalizer z = na n i = 0 i < num states i++ nodes lattice length 1 i != na n z z = 0 z += nodes lattice length 1 i alpha math exp t get state i get weight z log scaling = alpha log scaling lattice length 1 na n z total weight = transducer i m p o s s i b l e w e i g h t total weight = math log z + z log scaling backward pass i = 0 i < num states i++ nodes lattice length 1 i != state s = t get state i nodes lattice length 1 i beta = math exp s get weight gamma = nodes lattice length 1 i alpha nodes lattice length 1 i beta z gammas lattice length 1 i = math log gamma incrementor != p = gamma p >= 0 0 p <= 1 0 + 1e 6 p= + p + gamma= + gammas lattice length 1 i incrementor increment state s p rescale betas lattice length 1 ip = lattice length 2 ip >= 0 ip i = 0 i < num states i++ invalid node ip i state s = t get state i transition iterator iter = s transition iterator input ip output ip log scaling = alpha log scaling ip + beta log scaling ip + 1 z log scaling pscaling = math exp log scaling iter has next state destination = iter next j = destination get index lattice node destination node = nodes ip + 1 j destination node != transition weight = iter get weight na n nodes ip i beta nodes ip i beta = 0 transition prob = math exp transition weight nodes ip i beta += destination node beta transition prob xi = nodes ip i alpha transition prob nodes ip + 1 j beta z save xis xis ip i j = math log xi + log scaling incrementor != || output alphabet != p = xi pscaling p >= 0 0 p <= 1 0 + 1e 6 p= + p + xis + ip + + i + + j + = + xi incrementor != incrementor increment transition iter p output alphabet != output index = output alphabet lookup index iter get output output index >= 0 output counts ip output index += p gammas ip i = math log nodes ip i alpha nodes ip i beta z + log scaling re scale betas so that they are normalized rescale betas ip incrementor != i = 0 i < num states i++ p = math exp gammas 0 i p >= 0 0 p <= 1 0 + 1e 6 p= + p incrementor increment initial state t get state i p invalid node ip i nodes ip i == || na n nodes ip i alpha rescale alphas ip sum alpha = 0 i = 0 i < t num states i++ !is invalid node ip i sum alpha += nodes ip i alpha sum alpha > 0 invalid sum over alphas ip= + ip alpha log scaling ip = math log sum alpha + ip == 0 ? 0 alpha log scaling ip 1 i = 0 i < t num states i++ !is invalid node ip i nodes ip i alpha = sum alpha rescale betas ip sum beta = 0 i = 0 i < t num states i++ !is invalid node ip i sum beta += nodes ip i beta sum beta > 0 invalid sum over betas ip= + ip beta log scaling ip = math log sum beta + ip == lattice length 1 ? 0 beta log scaling ip + 1 i = 0 i < t num states i++ !is invalid node ip i nodes ip i beta = sum beta get xis xis get gammas gammas get total weight total weight get gamma weight input position state s gammas input position s get index get gamma weight input position state index gammas input position state index get gamma probability input position state s math exp gammas input position s get index get gamma probability input position state index get gamma probability input position t get state state index get xi probability ip state s1 state s2 math exp get xi weight ip s1 s2 get xi weight ip state s1 state s2 xis == illegal state xis were not saved i = s1 get index j = s2 get index xis ip i j length lattice length get alpha ip state s lattice node node = get lattice node ip s get index node alpha math exp alpha log scaling ip get beta ip state s lattice node node = get lattice node ip s get index node beta math exp beta log scaling ip label vector get labeling at position output position runtime not sum lattice scaling! sequence get input input transducer get transducer t lattice node input position state state output alpha = na n beta = na n lattice node input position state state input position = input position state = state factory sum lattice factory serializable suppress warnings unchecked sum lattice sum lattice transducer trans sequence input sequence output transducer incrementor incrementor save xis label alphabet output alphabet sum lattice scaling trans input output incrementor save xis output alphabet serial u = 1 u r r e n t s e r i a l v e r s i o n = 1 write output stream out i o out write u r r e n t s e r i a l v e r s i o n read input stream in i o not found suppress warnings unused = in read 
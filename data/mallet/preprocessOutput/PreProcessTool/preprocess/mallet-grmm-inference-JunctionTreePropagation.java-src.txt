2006 m a l l e t m achine languag e 1 0 further ` l i e n s e inference collection iterator logging logger logging level io serializable io output stream io i o io input stream types factor types hash var set types var set types variable logger an hugin style propagation junction trees destructively modifies junction tree so that its clique potentials are marginals underlying graph <p > end users will not usually need to use directly use <tt> junction tree inferencer< tt> instead <p > not an instance inferencer because it destructively modifies junction tree which inferencer not to factor graphs <p > created feb 1 2006 author < a h r e f= mailto casutton edu>casutton edu< a> $ junction tree propagation v 1 1 2007 10 22 21 37 49 exp $ junction tree propagation serializable logger logger = logger get logger junction tree propagation get name total messages sent = 0 message strategy strategy junction tree propagation message strategy strategy strategy = strategy junction tree propagation create sum product inferencer junction tree propagation sum product message strategy junction tree propagation create max product inferencer junction tree propagation max product message strategy get total messages sent total messages sent compute marginals junction tree jt propagate jt jt normalize all necessary jt originally unnormalized hugin style propagation junction trees bottom up pass collect evidence junction tree jt var set parent var set child logger finer collect evidence + parent + > + child iterator it = jt get children child iterator it has next var set gchild = var set it next collect evidence jt child gchild parent != total messages sent++ strategy send message jt child parent top down pass distribute evidence junction tree jt var set parent iterator it = jt get children parent iterator it has next var set child = var set it next total messages sent++ strategy send message jt parent child distribute evidence jt child propagate junction tree jt var set root = var set jt get root collect evidence jt root distribute evidence jt root factor lookup marginal junction tree jt var set var set jt == illegal state call compute marginals first var set parent = jt find parent cluster var set parent == unsupported operation no parent cluster in + jt + clique + var set factor cpf = jt get p f parent logger loggable level f i n e r logger finer lookup jt marginal clique + var set + cluster + parent logger finest cpf + cpf factor marginal = strategy extract belief cpf var set marginal normalize marginal factor lookup marginal junction tree jt variable var jt == illegal state call compute marginals first var set parent = jt find parent cluster var factor cpf = jt get p f parent logger loggable level f i n e r logger finer lookup jt marginal var + var + cluster + parent logger finest cpf + cpf factor marginal = strategy extract belief cpf hash var set variable var marginal normalize marginal m e e s a g e s t r a t e g i e s a strategy pattern message sending allows sum product and max product messages e g to be different implementations strategy message strategy sends a message from clique f r o m to t o in a junction tree send message junction tree jt var set from var set to factor extract belief factor cpf var set var set sum product message strategy message strategy serializable sends a sum product message normalized to avoid underflow send message junction tree jt var set from var set to collection sepset = jt get sepset from to factor from cpf = jt get p f from factor to cpf = jt get p f to factor old sepset pot = jt get sepset pot from to factor lambda = from cpf marginalize sepset lambda normalize jt set sepset pot lambda from to to cpf = to cpf multiply lambda to cpf divide old sepset pot to cpf normalize jt set p f to to cpf factor extract belief factor cpf var set var set cpf marginalize var set serialization serial u = 1 u u r e n t s e r i a l v e r s i o n = 1 write output stream out i o out write out write u u r e n t s e r i a l v e r s i o n read input stream in i o not found in read in read max product message strategy message strategy serializable sends a max product message send message junction tree jt var set from var set to err send message +from+ > +to collection sepset = jt get sepset from to factor from cpf = jt get p f from factor to cpf = jt get p f to factor old sepset pot = jt get sepset pot from to factor lambda = from cpf extract max sepset lambda normalize jt set sepset pot lambda from to to cpf = to cpf multiply lambda to cpf divide old sepset pot to cpf normalize jt set p f to to cpf factor extract belief factor cpf var set var set cpf extract max var set serialization serial u = 1 u u r e n t s e r i a l v e r s i o n = 1 write output stream out i o out write out write u u r e n t s e r i a l v e r s i o n read input stream in i o not found in read in read serialization serial u = 1 u u r e n t s e r i a l v e r s i o n = 1 write output stream out i o out write out write u u r e n t s e r i a l v e r s i o n read input stream in i o not found in read in read 
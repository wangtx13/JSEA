2006 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e types gnu trove t hash set gnu trove t list set bit set collection set io output stream io i o io input stream io serializable inference utils a clique that uses very little time and memory based on flyweight pattern in same way bit var set uses an list indices and likely to be more memory efficient when universe very very large author charles sutton $ list var set v 1 1 2007 10 22 21 37 44 exp $ list var set set var set serializable universe universe t list list var set universe universe collection universe = universe = t list size iterator it = iterator it has next add universe get index variable it next sort list var set var set vs old vs old get 0 get universe vs old add o idx = universe get index variable o idx == 1 unsupported operation add idx sort variable get idx gidx = get idx universe get gidx variable to variable variable to variable 0 f i x m e cache not updated on changes to clique cached weight = 1 weight cached weight == 1 weight = 1 list var set iterator it = list var set iterator it has next variable var = variable it next weight = var get num outcomes cached weight = weight cached weight assignment iterator assignment iterator dense assignment iterator size size empty empty contains o contains universe get index variable o iterator iterator next idx iterator next idx = 0 has next next idx < size next idx = next idx next idx++ universe get get idx remove unsupported operation removal from bit set clique not permitted iterator iterator list var set iterator equals o == o ! o var set var set vs = var set o vs size == size contains all vs hash result = 39 vi = 0 vi < size vi++ result = 59 result + get vi hash result var set intersection var set utils intersection clear clear to foo = list var set iterator it = list var set iterator it has next variable var = variable it next foo = foo + + var foo = foo + foo serialization garbage serial u = 1 u r r e n t s e r i a l v e r s i o n = 1 write output stream out i o out write out write u r r e n t s e r i a l v e r s i o n out write universe out write to read input stream in i o not found in read = in read universe = universe in read vals = in read = t list vals 
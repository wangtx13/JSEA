2005 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e topics tui command option randoms types instance list types feature sequence topics pipe iterator d b instance iterator io perform topic analysis in style l d a and its variants author <a href= mailto > andrew mc callum< a> vectors2 topics command option input = command option vectors2 topics input f i l e n a m e filename from which to read list training instances use stdin + instances must be feature sequence or feature sequence bigrams not feature vector command option spaced strings input files = command option spaced strings vectors2 topics inputs f i l e n a m e f i l e n a m e filenames polylingual topic model each should have its own + same number instances in each a document missing in + one there should be an empty instance command option testing = command option vectors2 topics testing f i l e n a m e filename from which to read list instances empirical likelihood calculation use stdin + instances must be feature sequence or feature sequence bigrams not feature vector command option output model filename = command option vectors2 topics output model f i l e n a m e filename in which to write binary topic model at end iterations + indicating that no will be written command option input model filename = command option vectors2 topics input model f i l e n a m e filename from which to read binary topic model to which input will be appended + allowing incremental training + indicating that no will be read command option inferencer filename = command option vectors2 topics inferencer filename f i l e n a m e a topic inferencer applies a previously trained topic model to documents + indicating that no will be written command option evaluator filename = command option vectors2 topics evaluator filename f i l e n a m e a held out likelihood evaluator documents + indicating that no will be written command option state = command option vectors2 topics output state f i l e n a m e filename in which to write gibbs sampling state after at end iterations + indicating that no will be written command option topic keys = command option vectors2 topics output topic keys f i l e n a m e filename in which to write top words each topic and any dirichlet + indicating that no will be written command option topic word weights = command option vectors2 topics topic word weights f i l e n a m e filename in which to write unnormalized weights every topic and word type + indicating that no will be written command option word topic counts = command option vectors2 topics word topic counts f i l e n a m e filename in which to write a sparse representation topic word assignments + indicating that no will be written command option topic report xml = command option vectors2 topics xml topic report f i l e n a m e filename in which to write top words each topic and any dirichlet in xml format + indicating that no will be written command option topic phrase report xml = command option vectors2 topics xml topic phrase report f i l e n a m e filename in which to write top words and phrases each topic and any dirichlet in xml format + indicating that no will be written command option doc topics = command option vectors2 topics output doc topics f i l e n a m e filename in which to write topic proportions per document at end iterations + indicating that no will be written command option doc topics threshold = command option vectors2 topics doc topics threshold d e i m a l 0 0 when writing topic proportions per document output doc topics + not print topics proportions less than threshold value command option doc topics max = command option vectors2 topics doc topics max i n t e g e r 1 when writing topic proportions per document output doc topics + not print more than i n t e g e r number topics + a negative value indicates that all topics should be printed command option num topics = command option vectors2 topics num topics i n t e g e r 10 number topics to fit command option num threads = command option vectors2 topics num threads i n t e g e r 1 number threads parallel training command option num iterations = command option vectors2 topics num iterations i n t e g e r 1000 number iterations gibbs sampling command option random seed = command option vectors2 topics random seed i n t e g e r 0 random seed gibbs sampler 0 which will use clock command option top words = command option vectors2 topics num top words i n t e g e r 20 number most probable words to print each topic after model estimation command option show topics interval = command option vectors2 topics show topics interval i n t e g e r 50 number iterations between printing a brief summary topics so far command option output model interval = command option vectors2 topics output model interval i n t e g e r 0 number iterations between writing model and its gibbs sampling state to a binary + you must also set output model to use option whose argument will be prefix filenames command option output state interval = command option vectors2 topics output state interval i n t e g e r 0 number iterations between writing sampling state to a text + you must also set output state to use option whose argument will be prefix filenames command option optimize interval = command option vectors2 topics optimize interval i n t e g e r 0 number iterations between reestimating dirichlet hyperparameters command option optimize burn in = command option vectors2 topics optimize burn in i n t e g e r 200 number iterations to run before first estimating dirichlet hyperparameters command option use symmetric alpha = command option vectors2 topics use symmetric alpha true|false only optimize concentration parameter prior over document topic distributions may reduce number very small poorly estimated topics but may disperse words over several topics command option use ngrams = command option vectors2 topics use ngrams true|false rather than using l d a use topical n grams which models phrases command option use p a m = command option vectors2 topics use pam true|false rather than using l d a use pachinko allocation model which models topical correlations + you cannot and also use ngrams command option alpha = command option vectors2 topics alpha d e i m a l 50 0 alpha parameter smoothing over topic command option beta = command option vectors2 topics beta d e i m a l 0 01 beta parameter smoothing over unigram command option gamma = command option vectors2 topics gamma d e i m a l 0 01 gamma parameter smoothing over bigram command option delta = command option vectors2 topics delta d e i m a l 0 03 delta parameter smoothing over choice unigram bigram command option delta1 = command option vectors2 topics delta1 d e i m a l 0 2 topic n gram smoothing parameter command option delta2 = command option vectors2 topics delta2 d e i m a l 1000 0 topic n gram smoothing parameter command option pam num supertopics = command option vectors2 topics pam num supertopics i n t e g e r 10 when using pachinko allocation model p a m set number supertopics + typically about half number subtopics although more may help command option pam num subtopics = command option vectors2 topics pam num subtopics i n t e g e r 20 when using pachinko allocation model p a m set number subtopics io i o process command line options command option set summary vectors2 topics a tool estimating saving and printing diagnostics topic models such l d a command option process vectors2 topics use p a m value instance list ilist = instance list load input value out data loaded input model filename value != illegal argument input model not supported use pam p a m4 l pam = p a m4 l pam num supertopics value pam num subtopics value pam estimate ilist num iterations value optimize model interval 50 show topics interval value output model interval value output model filename value random seed value == 0 ? randoms randoms random seed value pam print top words top words value state value != pam print state state value doc topics value != print writer out = print writer writer doc topics value pam print document topics out doc topics threshold value doc topics max value out close output model filename value != pam != output stream oos = output stream output stream output model filename value oos write pam oos close e e print stack trace illegal argument couldn t write topic model to filename +output model filename value use ngrams value instance list ilist = instance list load input value out data loaded input model filename value != illegal argument input model not supported use ngrams topical n grams tng = topical n grams num topics value alpha value beta value gamma value delta value delta1 value delta2 value tng estimate ilist num iterations value show topics interval value output model interval value output model filename value random seed value == 0 ? randoms randoms random seed value tng print top words top words value state value != tng print state state value doc topics value != print writer out = print writer writer doc topics value tng print document topics out doc topics threshold value doc topics max value out close output model filename value != tng != output stream oos = output stream output stream output model filename value oos write tng oos close e e print stack trace illegal argument couldn t write topic model to filename +output model filename value input files value != start a polylingual topic model polylingual topic model topic model = num languages = input files value length instance list training = instance list input files value length i=0 i < training length i++ training i = instance list load input files value i training i != out i + not out i + out data loaded historical reasons we currently only support feature sequence data not feature vector which input functions provide a warning to avoid cast exceptions training 0 size > 0 training 0 get 0 != data = training 0 get 0 get data ! data feature sequence err topic modeling currently only supports feature sequences use keep sequence option when importing data exit 1 topic model = polylingual topic model num topics value alpha value random seed value != 0 topic model set random seed random seed value topic model add instances training topic model set topic display show topics interval value top words value topic model set num iterations num iterations value topic model set optimize interval optimize interval value topic model set burnin period optimize burn in value output state interval value != 0 topic model set save state output state interval value state value output model interval value != 0 topic model set model output output model interval value output model filename value topic model estimate topic keys value != topic model print top words topic keys value top words value state value != topic model print state state value doc topics value != print writer out = print writer writer doc topics value topic model print document topics out doc topics threshold value doc topics max value out close inferencer filename value != = 0 < num languages language++ output stream oos = output stream output stream inferencer filename value + + oos write topic model get inferencer oos close e err e get message output model filename value != topic model != output stream oos = output stream output stream output model filename value oos write topic model oos close e e print stack trace illegal argument couldn t write topic model to filename +output model filename value start a l d a topic model parallel topic model topic model = input model filename value != topic model = parallel topic model read input model filename value e err unable to restore saved topic model + input model filename value + + e exit 1 loading data optional we are restoring a saved state input value != instance list instances = instance list load input value out data loaded lda add instances instances instance list training = input value starts db training = d b instance iterator get instances input value substring 3 training = instance list load input value e err unable to restore instance list + input value + + e exit 1 out data loaded training size > 0 training get 0 != data = training get 0 get data ! data feature sequence err topic modeling currently only supports feature sequences use keep sequence option when importing data exit 1 topic model = parallel topic model num topics value alpha value beta value random seed value != 0 topic model set random seed random seed value topic model add instances training topic model set topic display show topics interval value top words value testing value != topic model set testing instances instance list load testing value topic model set num iterations num iterations value topic model set optimize interval optimize interval value topic model set burnin period optimize burn in value topic model set symmetric alpha use symmetric alpha value output state interval value != 0 topic model set save state output state interval value state value output model interval value != 0 topic model set save serialized model output model interval value output model filename value topic model set num threads num threads value topic model estimate topic keys value != topic model print top words topic keys value top words value topic report xml value != print writer out = print writer topic report xml value topic model topic xml report out top words value out close topic phrase report xml value != print writer out = print writer topic phrase report xml value topic model topic phrase xml report out top words value out close state value != topic model print state state value doc topics value != print writer out = print writer writer doc topics value topic model print document topics out doc topics threshold value doc topics max value out close topic word weights value != topic model print topic word weights topic word weights value word topic counts value != topic model print type topic counts word topic counts value output model filename value != topic model != output stream oos = output stream output stream output model filename value oos write topic model oos close e e print stack trace illegal argument couldn t write topic model to filename +output model filename value inferencer filename value != output stream oos = output stream output stream inferencer filename value oos write topic model get inferencer oos close e err e get message evaluator filename value != output stream oos = output stream output stream evaluator filename value oos write topic model get prob estimator oos close e err e get message 
2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e types io serializable io i o io input stream io output stream arrays utils generated name matrix that allows arbitrary number dimensions simply uses a flat created tue sep 16 14 52 37 2003 author <a href= mailto casutton > charles sutton< a> $ sparse matrixn v 1 1 2007 10 22 21 37 39 exp $ sparse matrixn matrix cloneable serializable sparse vector values num dimensions sizes single size create a 1 d dense matrix given values sparse matrixn vals num dimensions = 1 sizes = 1 sizes 0 = vals length values = sparse vector vals compute single s ize create a dense matrix given dimensions szs an containing maximum each dimension sparse matrixn szs num dimensions = szs length sizes = szs clone total = 1 j = 0 j < num dimensions j++ total = sizes j values = sparse vector total compute single s ize sparse matrixn szs vals num dimensions = szs length sizes = szs clone values = sparse vector vals compute single s ize create a sparse matrix given dimensions and given values szs an containing maximum each dimension idxs an containing single index each entry matrix a single index an computed from indices each dimension link matrixn#single index vals a flat entries matrix in row major order sparse matrixn szs idxs vals num dimensions = szs length sizes = szs clone values = sparse vector idxs vals compute single s ize compute single s ize product = 1 i = 0 i < sizes length i++ size = sizes i product = size single size = product get num dimensions num dimensions get dimensions szs i = 0 i < num dimensions i++ szs i = sizes i num dimensions value indices values value single index indices set value indices value values set value single index indices value an all present indices callers must not modify value get indices values get indices constant matrix clone matrix matrixn constructor will clone arrays sparse matrixn sizes values get indices values get values clone clone matrix single index indices matrixn single index sizes indices so it will be useful a general dereferencing utility multidimensional arrays single index szs indices idx = 0 dim = 0 dim < indices length dim++ idx = idx szs dim + indices dim idx single to indices single indices matrixn single to indices single indices sizes equals o o sparse matrixn could be extended to work all matrixes sparse matrixn m2 = sparse matrixn o num dimensions == m2 num dimensions sizes equals m2 sizes values equals m2 values a one dimensional representation matrix caller must not modify value an values where index 0 major index etc to values get values from matrix single value i values single value i single size single size access index into sparse efficient sparse and dense matrices num locations values num locations location index values location index value at location location values value at location location set value at location location value values set value at location location value a single index index at location location values index at location location dot product constant matrix m values dot product m abs norm values abs norm one norm values one norm two norm values two norm infinity norm values infinity norm print values print na n values na n set single value i value values set value i value increment single value i delta value = values value i values set value i value + delta set all v values set all v set constant matrix m unsupported operation not yet set addend constant matrix m addend unsupported operation not yet set factor constant matrix m factor unsupported operation not yet plus equals constant matrix m plus equals m 1 0 sucks but so does visitor pattern not often used plus equals constant matrix m factor m sparse vector values plus equals sparse sparse vector m factor m sparse matrixn sparse matrixn smn = sparse matrixn m arrays equals sizes smn sizes values plus equals sparse smn values factor unsupported operation sizes + m + not match + unsupported operation can t add + m + to + equals plus factor constant matrix m unsupported operation not yet times equals factor values times equals factor elementwise times equals constant matrix m unsupported operation not yet elementwise times equals constant matrix m factor unsupported operation not yet divide equals factor values times equals 1 factor elementwise divide equals constant matrix m unsupported operation not yet elementwise divide equals constant matrix m factor unsupported operation not yet one normalize norm = values one norm values times equals 1 norm norm two normalize norm = values two norm values times equals 1 norm norm abs normalize norm = values abs norm values times equals 1 norm norm infinity normalize norm = values infinity norm values times equals 1 norm norm serialization garbage serial u = 1 u r r e n t s e r i a l v e r s i o n = 1 write output stream out i o out write out write u r r e n t s e r i a l v e r s i o n read input stream in i o not found in read = in read 
2002 m a l l e t m achine languag e ~mccallum 1 0 furtherinformation ` l i e n s e classify io i o io input stream io output stream io print writer io serializable io print stream pipe pipe types alphabet types dense vector types feature selection types feature vector types instance types label alphabet types label vector types matrix ops types ranked feature vector maximum entropy a k a multivariate logistic regression classifier author andrew mc callum <a href= mailto >mccallum edu< a> max ent classifier serializable indexed <label index feature index> feature index feature selection feature selection feature selection per feature selection feature always feature highest index max ent pipe data pipe feature selection feature selection feature selection per feature selection data pipe feature selection == || per feature selection == != = = get num data pipe feature selection = feature selection per feature selection = per feature selection feature index = data pipe get data alphabet size get num cols == feature index+1 max ent pipe data pipe feature selection feature selection data pipe feature selection max ent pipe data pipe feature selection per feature selection data pipe per feature selection max ent pipe data pipe data pipe get get num instance pipe get data alphabet != instance pipe get target alphabet != max ent get num instance pipe get num pipe instance pipe instance pipe get data alphabet size + 1 instance pipe get target alphabet size set = set parameter index feature index value index get alphabet size +1 + feature index = value feature selection get feature selection feature selection max ent set feature selection feature selection fs feature selection = fs feature selection get per feature selection per feature selection max ent set per feature selection feature selection fss per feature selection = fss get feature index feature index set feature index feature index feature index = feature index get unnormalized classification scores instance instance scores out bounds pipe has grown since training num features = get alphabet size + 1 num features = feature index + 1 num labels = get label alphabet size scores length == num labels feature vector fv = feature vector instance get data make sure feature vector s feature dictionary matches what we are expecting from our data pipe and thus our notion feature probabilities fv get alphabet == instance pipe get data alphabet include feature weights according to each label = 0 < num labels li++ scores = num features + feature index + matrix ops row dot product num features fv feature index per feature selection == ? feature selection per feature selection get classification scores instance instance scores get unnormalized classification scores instance scores move scores to a range where exp accurate and normalize num labels = get label alphabet size max = matrix ops max scores sum = 0 = 0 < num labels li++ sum += scores = math exp scores max = 0 < num labels li++ scores = sum xxx na n ! na n scores modified limin yao to deal decreasing peak some labels get classification scores temperature instance instance temperature scores get unnormalized classification scores instance scores scores should be divided temperature scores are sum weighted features matrix ops times equals scores 1 temperature move scores to a range where exp accurate and normalize num labels = get label alphabet size max = matrix ops max scores sum = 0 = 0 < num labels li++ sum += scores = math exp scores max = 0 < num labels li++ scores = sum xxx na n ! na n scores modified limin yao using temperature classification score classification classify instance instance num classes = get label alphabet size scores = num classes get classification scores instance scores get classification scores instance scores create and a classification classification instance label vector get label alphabet scores print print out override print print writer out alphabet dict = get alphabet label alphabet label dict = get label alphabet num features = dict size + 1 num labels = label dict size include feature weights according to each label = 0 < num labels li++ out f e a t u r e s f o r l a s s +label dict lookup out <default> +parameters num features + feature index i = 0 i < feature index i++ name = dict lookup i weight = num features + i out +name+ +weight print print stream out print print writer out print rank added limin yao print rank print writer out alphabet dict = get alphabet label alphabet label dict = get label alphabet num features = dict size + 1 num labels = label dict size include feature weights according to each label ranked feature vector rfv weights = num features 1 not deal feature = 0 < num labels li++ out print f e a t u r e s f o r l a s s +label dict lookup + i = 0 i < feature index i++ weight = num features + i weights i = weight rfv = ranked feature vector dict weights rfv print rank out out <default> +parameters num features + feature index + print extreme features print writer out num alphabet dict = get alphabet label alphabet label dict = get label alphabet num features = dict size + 1 num labels = label dict size include feature weights according to each label ranked feature vector rfv weights = num features 1 not deal feature = 0 < num labels li++ out print f e a t u r e s f o r l a s s +label dict lookup + i = 0 i < feature index i++ name = dict lookup i weight = num features + i weights i = weight rfv = ranked feature vector dict weights rfv print top k out num out print <default> +parameters num features + feature index + rfv print lower k out num out serial u = 1 u r r e n t s e r i a l v e r s i o n = 1 n u l l i n t e g e r = 1 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write get instance pipe np = length out write np p = 0 p < np p++ out write p out write feature index feature selection == out write n u l l i n t e g e r out write 1 out write feature selection per feature selection == out write n u l l i n t e g e r out write per feature selection length i = 0 i < per feature selection length i++ per feature selection i == out write n u l l i n t e g e r out write 1 out write per feature selection i read input stream in i o not found = in read != u r r e n t s e r i a l v e r s i o n not found mismatched max ent versions wanted + u r r e n t s e r i a l v e r s i o n + got + instance pipe = pipe in read np = in read = np p = 0 p < np p++ p = in read feature index = in read opt = in read opt == 1 feature selection = feature selection in read nfs = in read nfs >= 0 per feature selection = feature selection nfs i = 0 i < nfs i++ opt = in read opt == 1 per feature selection i = feature selection in read 
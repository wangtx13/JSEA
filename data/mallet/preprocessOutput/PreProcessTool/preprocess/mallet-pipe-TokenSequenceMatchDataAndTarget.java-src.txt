2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e pipe regex pattern regex matcher logging io types instance types token types token sequence logger run a regular expression over text each token replace text substring matching one regex group create a target token sequence from text matching another regex group <p> example you have a data containing one line per token and label also appears on that line you can first get a token sequence in which text each line token get text each token then run pipe and separate target from data example to process following <pre> b a k g r o u n d then p e r s o n mr p e r s o n smith b a k g r o u n d said < pre> use <code>new token sequence match data and target pattern compile a z + 2 1 < code> author andrew mc callum <a href= mailto >mccallum edu< a> token sequence match data and target pipe serializable logger logger = logger get logger token sequence match data and target get name pattern regex data group target group token sequence match data and target pattern regex data group target group regex = regex data group = data group target group = target group token sequence match data and target regex data group target group pattern compile regex data group target group instance pipe instance carrier token sequence ts = token sequence carrier get data token sequence target token seq = token sequence ts size i = 0 i < ts size i++ token t = ts get i matcher matcher = regex matcher t get text matcher matches target token seq add matcher group target group t set text matcher group data group logger warning skipping token no match +regex pattern + at token # +i+ text +t get text carrier set target target token seq carrier set data ts carrier serialization serial u = 1 u r r e n t s e r i a l v e r s i o n = 1 write output stream out i o out write u r r e n t s e r i a l v e r s i o n u r r e n t s e r i a l v e r s i o n < 1 out write regex out write regex pattern out write regex flags out write data group out write target group read input stream in i o not found = in read < 1 regex = pattern in read p = in read flags = in read regex = pattern compile p flags data group = in read target group = in read 
2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e a feature vector which you can efficiently get feature highest value and other ranks author andrew mc callum <a href= mailto >mccallum edu< a> author david north <a href= mailto dtn corefiling co uk >dtn corefiling co uk< a> types io output stream io output stream writer io print writer collections linked list ranked feature vector feature vector rank order s o r t i n i t = 1 sorted to = s o r t i n i t extent latest sort ranked feature vector alphabet dict indices values dict indices values ranked feature vector alphabet dict values dict values sub a begin length ret = length arraycopy a begin ret 0 length ret ranked feature vector alphabet dict values begin length dict sub values begin length ranked feature vector alphabet dict dense vector v dict v values ranked feature vector alphabet dict augmentable feature vector v dict v indices v values v size v size ranked feature vector alphabet dict sparse vector v dict v indices v values set rank order rank order = values length list< entry original index> ranked entries = linked list< entry original index> i = 0 i < rank order length i++ ! na n values i ranked entries add entry original index values i i collections sort ranked entries i = 0 entry original index entry ranked entries rank order i++ = entry original index set rank order extent reset sort extent set number cells to sort making sure we t go past max since we are using insertion sort sorting n 1 sorts whole sort extent = extent >= values length ? values length 1 extent sorted to == s o r t i n i t || reset reinitialize and sort rank order = values length i = 0 i < rank order length i++ rank order i = i ! na n values i selection sort i = sorted to+1 i <= sort extent i++ max = values rank order i max index = i j = i+1 j < rank order length j++ values rank order j > max max = values rank order j max index = j swap r = rank order max index rank order max index = rank order i rank order i = r sorted to = i added limin yao rank elements ascendingly smaller in front set reverse rank order extent reset sort extent set number cells to sort making sure we t go past max since we are using insertion sort sorting n 1 sorts whole sort extent = extent >= values length ? values length 1 extent sorted to == s o r t i n i t || reset reinitialize and sort rank order = values length i = 0 i < rank order length i++ rank order i = i ! na n values i selection sort i = sorted to+1 i <= sort extent i++ min = values rank order i min index = i j = i+1 j < rank order length j++ values rank order j < min min = values rank order j min index = j swap r = rank order min index rank order min index = rank order i rank order i = r sorted to = i set rank order extent set rank order extent get max valued index rank order == set rank order 0 get index at rank 0 was rank order 0 get max valued dictionary lookup get max valued index get max valued index in feature selection fs fs == get max valued index fs get alphabet == dictionary xxx make more efficient! i m pretty sure that bit set s can more efficiently i = 0 !fs contains rank order i set rank order i i++ out ranked feature vector get max valued index in feature= +dictionary lookup rank order i get index at rank i was rank order i get max valued in feature selection fs dictionary lookup get max valued index in fs get max value rank order == set rank order 0 values rank order 0 get max value in feature selection fs fs == get max value i = 0 !fs contains i set rank order i i++ values rank order i get index at rank rank set rank order rank index at location rank order rank was rank order rank get at rank rank set rank order rank dictionary lookup get index at rank rank was dictionary lookup rank order rank get value at rank rank values == 1 0 set rank order rank rank >= rank order length rank = rank order length 1 err rank larger than rank order length rank = + rank + rank order length = + rank order length rank order rank >= values length err rank order rank out range 1 0 values rank order rank prints a human readable vector features listed in ranked order out stream to write to print rank output stream out print rank print writer output stream writer out prints a human readable vector features listed in ranked order out writer to write to print rank print writer out rank = 0 rank < num locations rank++ idx = get index at rank rank val = get value at rank rank obj = dictionary lookup idx out print obj+ +val + added limin yao print top k print writer out num length = num locations num>length num=length rank = 0 rank < num rank++ idx = get index at rank rank val = get value at rank rank obj = dictionary lookup idx out print obj+ +val + print lower k print writer out num length = num locations num < length rank = length num rank < length rank++ idx = get index at rank rank val = get value at rank rank obj = dictionary lookup idx out print obj+ +val + get rank o unsupported operation not yet get rank index unsupported operation not yet set i v unsupported operation ranked feature vector get name + immutable factory ranked feature vector ranked feature vector instance list ilist per label factory ranked feature vector ranked feature vectors instance list ilist entry original index comparable< entry original index> value original index entry original index value original index value = value original index = original index sort value greater comes to left smaller compare to entry original index other compare other value value 
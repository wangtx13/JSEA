search created intelli j e a user pereira date jun 18 2005 time 9 11 24 p m <p > binary heap <code> priority queue< code> based on algorithm in corman leiserson rivest and stein section 6 5 min heap priority queue queue element elts size = 0 m i n a p a i t y = 16 create a binary heap initial capacity <code>capacity< code> heap s capacity grows needed to accomodate insertions capacity initial capacity min heap capacity capacity < m i n a p a i t y capacity = m i n a p a i t y elts = queue element capacity size = 0 create a binary heap minimum initial capacity min heap m i n a p a i t y heapify i l = 2 i + 1 r = 2 i + 2 first l < size elts l get priority < elts i get priority first = l first = i r < size elts r get priority < elts first get priority first = r first != i queue element e = elts i elts i = elts first elts i set position i elts first = e e set position first heapify first size size queue element min size == 0 index out bounds queue empty elts 0 queue element extract min size == 0 index out bounds queue empty queue element min = elts 0 elts 0 = elts size elts 0 set position 0 necessary in elts size 1 happens to be best cas heapify 0 min set position 1 min change priority queue element e priority !contains e illegal argument element not in queue priority <= e get priority decrease key e priority increase key e priority increase key queue element e priority e set priority priority heapify e get position decrease key queue element e priority e set priority priority i = e get position j i > 0 elts j = i 1 2 get priority > elts i get priority queue element p = elts j elts j = elts i elts j set position j elts i = p p set position i i = j insert queue element e size == elts length queue element elts = queue element size + size 2 i = 0 i < size i++ elts i = elts i elts = elts e set position size elts size++ = e change priority e e get priority contains queue element e pos = e get position pos >= 0 pos < size e == elts pos queue element to queue element arr = queue element size arraycopy elts 0 arr 0 size arr debugging cas check heap i child = 2 i + 1 child < size elts i get priority <= elts child get priority check heap child child = 2 i + 2 child < size elts i get priority <= elts child get priority check heap child 
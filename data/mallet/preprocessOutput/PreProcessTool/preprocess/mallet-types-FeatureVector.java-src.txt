2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> types hash map iterator arrays logging io types alphabet types feature sequence types vector logger property list a subset an link types alphabet in which each element subset has an associated value subset represented a link types sparse vector <p> a sparse vector represents only non zero locations a vector in a feature vector a location represents index an entry in alphabet that contained in feature vector <p> to loop over elements a feature vector one loops over consecutive integers between 0 and number locations in feature vector from these locations one can cheaply obtain index entry in underlying alphabet entry itself and value in feature vector associated entry <p> a sparse vector or feature vector can be sparse or dense depending on whether or not an indices specified at construction time feature vector dense mapping from location to index identity mapping <p> associated value an element in a sparse vector or feature vector can be a or binary 0 0 or 1 0 depending on whether an doubles specified at contruction time sparse vector alphabet author andrew mc callum <a href= mailto >mccallum edu< a> feature vector sparse vector serializable alphabet carrying logger logger = logger get logger feature vector get name alphabet dictionary feature vector alphabet dict indices values capacity size copy check indices sorted remove duplicates indices values capacity size copy check indices sorted remove duplicates dictionary = dict create a dense vector feature vector alphabet dict values values dictionary = dict create non binary vector possibly dense feature indices or possibly sparse not feature vector alphabet dict feature indices values feature indices values dictionary = dict create binary vector feature vector alphabet dict feature indices feature indices dictionary = dict get indices entries alphabet dict add not present feats = entries length i = 0 i < entries length i++ feats i = dict lookup index entries i add not present feats i == 1 illegal argument not in dictionary feats feature vector alphabet dict keys values dict get indices keys dict values sorted feature index sequence feature sequence fs feats = fs to feature index sequence arrays sort feats feats feature vector feature sequence fs binary fs to sorted feature index sequence binary dictionary = alphabet fs get alphabet feature vector feature sequence fs fs feature vector alphabet dict property list pl binary grow alphabet dict pl binary grow alphabet dictionary = dict feature vector alphabet dict property list pl binary dict pl binary indices conjunctions feature vector fv alphabet vocab conjunctions fv values == only works on binary feature vectors ! fv augmentable feature vector alphabet v = fv get alphabet vocab should be an augmented copy v v size <= vocab size fv vocab size= +v size + vocab size= +new vocab size indices = fv indices length conjunctions length arrays sort conjunctions arraycopy fv indices 0 indices 0 fv indices length size = fv indices length ci = 0 i = 0 i < fv indices length i++ ci < conjunctions length conjunctions ci < fv indices i ci++ conjunctions ci == fv indices i j = 0 j < fv indices length j++ conjunctions ci != fv indices j index = vocab lookup index feature conjunction get name v conjunctions ci fv indices j index == vocab size 1 index % 3 == 0 logger info feature + vocab lookup index index != 1 can be 1 vocab growth stopped indices size++ = index sort and remove duplicates arrays sort indices 0 size i = 1 i < size i++ indices i 1 == indices i j = i+1 j < size j++ indices j 1 = indices j size ret = size arraycopy indices 0 ret 0 size ret indices conjunctions feature vector fv alphabet vocab feature selection fs narrow feature selection fs wide fv values == only works on binary feature vectors ! fv augmentable feature vector alphabet v = fv get alphabet vocab should be an augmented copy v v size <= vocab size fv vocab size= +v size + vocab size= +new vocab size length fv augmentable feature vector length = augmentable feature vector fv size augmentable feature vector fv sort indices length = fv indices length indices = length length arraycopy fv indices 0 indices 0 length size = length ci = 0 i = 0 i < length i++ fs narrow != !fs narrow contains fv indices i j = 0 j < length j++ fs wide == || fs wide contains fv indices j fv indices i != fv indices j ! feature conjunction features overlap v fv indices i fv indices j index = vocab lookup index feature conjunction get name v fv indices i fv indices j index != 1 can be 1 vocab growth stopped indices size++ = index sort and remove duplicates arrays sort indices 0 size i = 1 i < size i++ indices i 1 == indices i j = i+1 j < size j++ indices j 1 = indices j size ret = size arraycopy indices 0 ret 0 size ret feature vector containing all features fv plus features created making conjunctions between features in conjunctions and all other features feature vector feature vector fv alphabet vocab conjunctions vocab indices conjunctions fv vocab conjunctions feature vector feature vector fv alphabet vocab feature selection fs narrow feature selection fs wide vocab indices conjunctions fv vocab fs narrow fs wide construct a feature vector selecting only those features in fs and having presumably more compact dense alphabet feature vector feature vector feature vector fv alphabet vocab feature selection fs fs get alphabet == fv dictionary fv indices == unsupported operation not yet dense feature vectors num locations call ensures that augmentable feature vectors have been compressed fv num locations = fv num locations indices = fv num locations values = feature vectors are binary fv values != values = indices length size = 0 index = 0 index < fv num locations index++ fs contains fv indices index indices size = vocab lookup index fv dictionary lookup fv indices index e out e to feature vectors are binary fv values != values size = fv values index size++ feature vector vocab indices values size size xxx we need to implement in feature vector subclasses constant matrix clone matrix feature vector alphabet dictionary indices values constant matrix clone matrix zeroed values != indices == feature vector dictionary values length indices = indices length arraycopy indices 0 indices 0 indices length feature vector dictionary indices values length values length values length to to p a l added to output feature vectors to a text in a simple format to simp name curdoc no printcounts thread current thread dump stack buffer sb = buffer out feature vector to dictionary= +dictionary values == out feature vector to values==null indices length = num locations i = 0 i < indices length i++ out feature vector to i= +i dictionary == sb append +i+ out feature vector to i= +i+ index= +indices i sb append dictionary lookup indices i to sb append +indices i + sb append = 1 0 forced binary !on one line sb append sb append out feature vector to values!=null values length = num locations i = 0 i < values length i++ idx = indices == ? i indices i dictionary == sb append +i+ sb append dictionary lookup idx to sb append + idx + sb append curdoc no + + idx sb append = p a l optionally include counts printcounts sb append + values i !on one line sb append sb append sb to str = sb to myfile = name writer out = writer myfile > append to out write str out close i o e err feature vector when trying to print a to on one line thread current thread dump stack buffer sb = buffer out feature vector to dictionary= +dictionary values == out feature vector to values==null indices length = num locations i = 0 i < indices length i++ out feature vector to i= +i dictionary == sb append +i+ out feature vector to i= +i+ index= +indices i sb append dictionary lookup indices i to sb append +indices i + sb append = 1 0 forced binary !on one line sb append sb append out feature vector to values!=null values length = num locations i = 0 i < values length i++ idx = indices == ? i indices i dictionary == sb append +i+ sb append dictionary lookup idx to sb append + idx + sb append = sb append values i !on one line sb append sb append sb to alphabet get alphabet dictionary alphabet get alphabets alphabet dictionary alphabets match alphabet carrying dictionary equals get alphabet location entry dictionary == illegal state feature vector has no dictionary i = dictionary lookup index entry i < 0 1 location i contains entry loc = location entry loc >= 0 value at location loc != 0 value o loc = location o loc >= 0 value at location loc illegal argument +o+ not a key in dictionary serialization serial u = 1 u r r e n t s e r i a l v e r s i o n = 0 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write dictionary read input stream in i o not found = in read dictionary = alphabet in read 
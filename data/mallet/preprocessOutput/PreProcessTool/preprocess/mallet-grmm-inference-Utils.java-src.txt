2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e inference iterator types types matrix ops gnu trove t hash set a bunch utilities useful dealing inferencers created jun 1 2005 author < a h r e f= mailto casutton edu>casutton edu< a> $ utils v 1 1 2007 10 22 21 37 49 exp $ utils ths value log z in mdl according to given inferencer inf exact answer will be exact otherwise answer will be approximation mdl inf an inferencer <tt>inf compute marginals mdl < tt> must already have been called value log z lookup minus log z factor graph mdl inferencer inf heuristically to find a reasonable assignment not numerically 0 prob vals = mdl num variables vi = 0 vi < vals length vi++ variable var = mdl get variable vi factor mrg = inf lookup marginal var vals vi = mrg argmax assignment assn = assignment mdl vals prob = inf lookup log joint assn energy = mdl log value assn prob energy local magnetization inferencer inferencer variable var var get num outcomes != 2 illegal argument factor marg = inferencer lookup marginal var assignment iterator it = marg assignment iterator v1 = marg value it it advance v2 = marg value it v1 v2 all l1 marginal distance factor graph mdl inferencer inf1 inferencer inf2 dist = mdl num variables i = 0 iterator it = mdl variables iterator it has next variable var = variable it next factor bel1 = inf1 lookup marginal var factor bel2 = inf2 lookup marginal var dist i++ = factors one distance bel1 bel2 dist avg l1 marginal distance factor graph mdl inferencer inf1 inferencer inf2 dist = all l1 marginal distance mdl inf1 inf2 matrix ops mean dist max l1 marginal distance factor graph mdl inferencer inf1 inferencer inf2 dist = all l1 marginal distance mdl inf1 inf2 matrix ops max dist to sizes variable vars szs = vars length i = 0 i < vars length i++ szs i = vars i get num outcomes szs var set intersection var set v1 var set v2 grossly inefficient t hash set hset = t hash set v1 hset retain all v2 variable ret = variable hset size vai = 0 vi = 0 vi < v1 size vi++ variable var = v1 get vi hset contains var ret vai++ = var hash var set ret 
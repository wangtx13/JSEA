2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> extract list iterator list io print writer types label alphabet types sequence results doing extraction designed to handle field extraction from a single document or relation extraction and coreference from multiple documents extraction extractor extractor list docs = list list document extractions list records = list document extractions contain targets i e they re labeled testing instances then these are records obtained from those list records = list label alphabet dict creates an empty extraction option document extractions can be added later add document extraction extraction extractor extractor label alphabet dict extractor = extractor dict = dict creates an extration given a sequence output some kind per sequece labeler like an h m m or a r f extraction will contain a single document extraction extractor extractor label alphabet dict name tokenization input sequence output background extractor = extractor dict = dict document extraction docseq = document extraction name dict input output background add document extraction docseq add document extraction document extraction docseq docs add docseq records add record docseq get name docseq get extracted spans docseq get target spans != records add record t r u e +docseq get name docseq get target spans record get record idx record records get idx get num records records size document extraction get document extraction idx document extraction docs get idx get num documents docs size extractor get extractor extractor record get target record docnum record records get docnum label alphabet get label alphabet dict clean fields field cleaner cleaner iterator it = records iterator it has next clean record record it next cleaner it = records iterator it has next clean record record it next cleaner clean record record record field cleaner cleaner iterator it = record fields iterator it has next field field = field it next field clean field cleaner print print writer writer iterator it = records iterator writer e x t r a t i o n it has next record record = record it next writer r e o r d +record get name iterator fit = record fields iterator fit has next field field = field fit next writer field get name fidx = 0 fidx < field num values fidx++ val = field value fidx replace all writer print ==> +val+ writer writer e n d e x t r a t i o n 
2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> logging logger regex pattern types instance types instance list types sequence types token sequence logger segmentation evaluator transducer evaluator logger logger = logger get logger segmentation evaluator get name equals called on these to determine token start end a segment segment end tag should token after end segment i e that token not segment pattern start regex = pattern compile ^ b pattern end regex = pattern compile ^ o segment start tag = equals o start regex matcher o to matches segment end tag = equals o segmentation evaluator instance list instance lists descriptions instance lists descriptions segmentation evaluator instance list instance list1 description1 instance list instance list1 description1 segmentation evaluator instance list instance list1 description1 instance list instance list2 description2 instance list instance list1 instance list2 description1 description2 segmentation evaluator instance list instance list1 description1 instance list instance list2 description2 instance list instance list3 description3 instance list instance list1 instance list2 instance list3 description1 description2 description3 segmentation evaluator set segment start tag o segment start tag = o segmentation evaluator set segment end tag o segment end tag = o evaluate instance list transducer trainer tt instance list data description transducer model = tt get transducer num correct tokens total tokens num segments num predicted segments num correct segments num correct segments in alphabet num correct segments o o v num incorrect segments in alphabet num incorrect segments o o v token sequence source token sequence = total tokens = num correct tokens = 0 num segments = num predicted segments = num correct segments = 0 num correct segments in alphabet = num correct segments o o v = 0 num incorrect segments in alphabet = num incorrect segments o o v = 0 i = 0 i < data size i++ instance instance = data get i sequence input = sequence instance get data tokens = instance get source != tokens = instance get source to sequence output = sequence instance get target input size == output size sequence pred output = model transduce input pred output size == output size start pred start j = 0 j < output size j++ total tokens++ start = pred start = segment start tag equals output get j num segments++ start = segment start tag equals pred output get j pred start = num predicted segments++ start pred start m buffer sb = buffer sb append tokens at j m = j+1 m < output size m++ start = pred start = here these actually mean end not start segment end tag equals output get m start = segment end tag equals pred output get m pred start = start || pred start start pred start it a correct segment num correct segments++ hash all lexicons contains sb to num correct segments in alphabet++ num correct segments o o v++ it an incorrect segment let s find out it was in lexicon mm = m mm < output size mm++ segment end tag equals pred output get mm sb append tokens at mm hash all lexicons contains sb to num incorrect segments in alphabet++ num incorrect segments o o v++ sb append tokens at m end sequence m==true output size start==pred start num correct segments++ hash all lexicons contains sb to num correct segments in alphabet++ num correct segments o o v++ hash all lexicons contains sb to num incorrect segments in alphabet++ num incorrect segments o o v++ pred start here an incorrect predicted start find out word in lexicon buffer sb = buffer sb append tokens at j mm = j+1 mm < output size mm++ segment end tag equals pred output get mm sb append tokens at mm hash all lexicons contains sb to num incorrect segments in alphabet++ num incorrect segments o o v++ output get j equals pred output get j num correct tokens++ logger info description + accuracy= + num correct tokens total tokens precision = num predicted segments == 0 ? 1 num correct segments num predicted segments recall = num segments == 0 ? 1 num correct segments num segments f1 = recall+precision == 0 0 ? 0 0 2 0 recall precision recall + precision logger info precision= +precision+ recall= +recall+ f1= +f1 logger info segments true= +num segments+ pred= +num predicted segments+ correct= +num correct segments+ misses= + num segments num correct segments + alarms= + num predicted segments num correct segments out correct segments o o v= +num correct segments o o v+ i v= +num correct segments in alphabet out incorrect segments o o v= +num incorrect segments o o v+ i v= +num incorrect segments in alphabet 
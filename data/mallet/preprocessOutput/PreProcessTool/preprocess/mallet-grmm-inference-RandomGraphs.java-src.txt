2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e inference types types dirichlet types multinomial utility generating many useful kinds random graphical models created mar 26 2005 author < a h r e f= mailto casutton edu>casutton edu< a> $ random graphs v 1 1 2007 10 22 21 37 49 exp $ random graphs generate attractive potential values random r edge weight b = math abs r next gaussian edge weight e b = math exp b e minus b = math exp b e b e minus b e minus b e b generate mixed potential values random r edge weight b = r next gaussian edge weight e b = math exp b e minus b = math exp b e b e minus b e minus b e b factor generate attractive potential random r edge weight variable v1 variable v2 b = math abs r next gaussian edge weight boltzmann pair factor v1 v2 2 b factor generate mixed potential random r edge weight variable v1 variable v2 b = r next gaussian edge weight boltzmann pair factor v1 v2 2 b constructs a square grid a given size random attractive potentials graphs are generated follows <p> we use a spin i e 1 1 representation each edge st a single edge weight <tt>w st< tt> generated uniformly in 0 d then exponential b m representation are chosen <pre> theta st = 4 w st theta s = 2 \sum t in n s w st < pre> size length on one edge grid edge weight a positive number giving maximum potential strength r generating random numbers a randomly generated undirected model undirected grid random attractive grid size edge weight random r undirected grid mdl = undirected grid size size 2 grid from top left down i = 0 i < size 1 i++ j = 0 j < size 1 j++ variable v = mdl get i j variable v right = mdl get i + 1 j variable v down = mdl get i j + 1 mdl add factor generate attractive potential r edge weight v v right mdl add factor generate attractive potential r edge weight v v down and bottom edge i = 0 i < size 1 i++ variable v = mdl get i size 1 variable v right = mdl get i + 1 size 1 mdl add factor generate attractive potential r edge weight v v right and right edge i = 0 i < size 1 i++ variable v = mdl get size 1 i variable v down = mdl get size 1 i + 1 mdl add factor generate attractive potential r edge weight v v down and node potentials i = 0 i < size i++ j = 0 j < size j++ a = r next gaussian 0 0625 mdl add factor boltzmann unary factor mdl get i j 2 a mdl constructs a square grid a given size random repulsive potentials means that a node takes on a value its neighbors are more likely to take opposite values graphs are generated follows <p> we use a spin i e 1 1 representation each edge st a single edge weight <tt>w st< tt> generated uniformly in 0 d then exponential b m representation are chosen <pre> theta st = 4 w st theta s = 2 \sum t in n s w st < pre> size length on one edge grid edge weight a positive number giving maximum ansolute potential strength r generating random numbers a randomly generated undirected model undirected grid random repulsive grid size edge weight random r random attractive grid size edge weight r constructs a square grid a given size random frustrated potentials means that some potentials will be attractive want to make their neighbors more like them and some will be repulsive want to make their neighbors different graphs are generated follows <p> we use a spin i e 1 1 representation each edge st a single edge weight <tt>w st< tt> generated uniformly in 0 d then exponential b m representation are chosen <pre> theta st = 4 w st theta s = 2 \sum t in n s w st < pre> size length on one edge grid edge weight a positive number giving maximum potential strength r generating random numbers a randomly generated undirected model undirected grid random frustrated grid size edge weight random r undirected grid mdl = undirected grid size size 2 grid from top left down i = 0 i < size 1 i++ j = 0 j < size 1 j++ variable v = mdl get i j variable v right = mdl get i+1 j variable v down = mdl get i j+1 mdl add factor generate mixed potential r edge weight v v right mdl add factor generate mixed potential r edge weight v v down and bottom edge i = 0 i < size 1 i++ variable v = mdl get i size 1 variable v right = mdl get i + 1 size 1 mdl add factor generate mixed potential r edge weight v v right and right edge i = 0 i < size 1 i++ variable v = mdl get size 1 i variable v down = mdl get size 1 i + 1 mdl add factor generate mixed potential r edge weight v v down and node potentials add random node potentials r mdl mdl undirected model random frustrated tree size max children edge weight random r undirected model mdl = undirected model list leaves = list variable root = variable 2 leaves add root mdl num variables < size variable parent = variable remove random element leaves r num children = r next max children + 1 ci = 0 ci < num children ci++ variable child = variable 2 vals = generate mixed potential values r edge weight mdl add factor parent child vals leaves add child add random node potentials r mdl mdl remove random element list l random r idx = r next l size obj = l get idx l remove idx obj add random node potentials random r factor graph mdl size = mdl num variables i = 0 i < size i++ variable var = mdl get i table factor ptl = random node potential r var mdl add factor ptl table factor random node potential random r variable var a = r next gaussian table factor ptl = boltzmann unary factor var 2 a ptl factor graph create uniform chain length variable vars = variable length i = 0 i < length i++ vars i = variable 2 factor graph mdl = undirected model vars i = 0 i < length 1 i++ probs = 4 arrays fill probs 1 0 mdl add factor vars i vars i + 1 probs mdl factor graph create uniform grid length create grid uniform factor generator length factor graph create random chain randoms r length variable vars = variable length i = 0 i < length i++ vars i = variable 2 dirichlet dirichlet = dirichlet 1 1 1 1 factor graph mdl = factor graph vars i = 0 i < length 1 i++ multinomial m = dirichlet random multinomial r probs = m get values mdl add factor vars i vars i + 1 probs mdl factor generator factor next factor var set vars uniform factor generator factor generator factor next factor var set vars probs = vars weight arrays fill probs 1 0 table factor vars probs undirected model create grid factor generator gener size undirected grid grid = undirected grid size size 2 x = 0 x < size x++ y = 0 y < size 1 y++ variable v1 = grid get x y variable v2 = grid get x y+1 var set vars = hash var set variable v1 v2 factor factor = gener next factor vars grid add factor factor add left right edges x = 0 x < size 1 x++ y = 0 y < size y++ variable v1 = grid get x y variable v2 = grid get x+1 y var set vars = hash var set variable v1 v2 factor factor = gener next factor vars grid add factor factor grid factor graph create grid obs factor generator grid gener factor generator obs gener size list all vars = list 2 size size variable grid vars = variable size size variable obs vars = variable size size i = 0 i < size i++ j = 0 j < size j++ grid vars i j = variable 2 grid vars i j set label g r +i+ +j+ obs vars i j = variable 2 obs vars i j set label o b s +i+ +j+ all vars add grid vars i j all vars add obs vars i j factor graph mdl = factor graph variable all vars to variable 0 add grid edges i = 0 i < size i++ j = 0 j < size j++ variable var0 = grid vars i j i < size 1 variable var r = grid vars i + 1 j hash var set clique = hash var set variable var0 var r factor factor = grid gener next factor clique mdl add factor factor j < size 1 variable var d = grid vars i j + 1 hash var set clique = hash var set variable var0 var d factor factor = grid gener next factor clique mdl add factor factor add obs edges i = 0 i < size i++ j = 0 j < size j++ variable grid var = grid vars i j variable obs var = obs vars i j hash var set clique = hash var set variable grid var obs var factor factor = obs gener next factor clique mdl add factor factor mdl 
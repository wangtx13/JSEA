2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e classify tui list logging regex io nio charset charset classify pipe pipe iterator types command line tool loading a sequence instances from a single one instance per line input <p> despite name input data does not have to be comma separated and instance data can remain sequences rather than unordered vectors author andrew mc callum <a href= mailto >mccallum edu< a> csv2 vectors logger logger = logger get logger csv2 vectors get name line regex = ^ \\ s \\s \\ s \\s $ token regex = \\p l \\p l \\p p +\\p l command option input = command option csv2 vectors input f i l e containing data to be classified one instance per line command option output = command option csv2 vectors output f i l e text vectors write instance list to using indicates stdout command option line regex = command option csv2 vectors line regex r e g e x line regex regular expression containing regex groups label name and data command option label option = command option csv2 vectors label i n t e g e r 2 index group containing label + use 0 to indicate that label field not used command option name option = command option csv2 vectors name i n t e g e r 1 index group containing instance name + use 0 to indicate that name field not used command option data option = command option csv2 vectors data i n t e g e r 3 index group containing data command option use pipe from vectors = command option csv2 vectors use pipe from f i l e text vectors use pipe and alphabets from a previously created vectors + allows creation example a test set vectors that are + compatible a previously created set training vectors command option keep sequence = command option csv2 vectors keep sequence t r u e| f a l s e data will be a feature sequence rather than a feature vector command option keep sequence bigrams = command option csv2 vectors keep sequence bigrams t r u e| f a l s e data will be a feature sequence bigrams rather than a feature vector command option target features = command option csv2 vectors label features t r u e| f a l s e parse label field space delimited features use feature= number to specify values non binary features command option remove stop words = command option csv2 vectors remove stopwords t r u e| f a l s e remove a list english \ stop words\ from text command option spaced strings replacement files = command option spaced strings csv2 vectors replacement files f i l e f i l e files containing replacements one per line a b tab replaces a b a b replaces a b a b command option spaced strings deletion files = command option spaced strings csv2 vectors deletion files f i l e f i l e files containing strings to delete after replacements but before tokenization ie multiword stop command option stoplist = command option csv2 vectors stoplist f i l e instead list read stop words from a one per line implies remove stopwords command option extra stopwords = command option csv2 vectors extra stopwords f i l e read whitespace separated words from and add them to either + english stoplist or list specified stoplist command option stop pattern = command option csv2 vectors stop pattern f i l e read regular expressions from a one per line tokens matching these regexps will be removed command option preserve = command option csv2 vectors preserve t r u e| f a l s e not force all strings to lowercase command option encoding = command option csv2 vectors encoding s t r i n g charset charset display name character encoding input command option token regex = command option csv2 vectors token regex r e g e x token regex regular expression used tokenization + example \ \\p l \\p n +| \\p p +\ unicode letters numbers and underscore o r all punctuation command option print output = command option csv2 vectors print output t r u e| f a l s e print a representation processed data + to standard output option intended debugging not found i o process command line options command option set summary csv2 vectors a tool creating instance lists feature vectors from comma separated values command option process csv2 vectors print some helpful messages cases length == 0 command option get list csv2 vectors print usage exit 1 input == illegal argument you must include ` input f i l e in order to specify a + containing instances one per line pipe instance pipe instance list previous instance list = use pipe from vectors was invoked ignore all options use a previously created pipe previous instance list = instance list load use pipe from vectors value instance pipe = previous instance list get pipe build a pipe list< pipe> pipe list = list< pipe> convert target into a numeric index into a label alphabet label option value > 0 target features value pipe list add target to features label field not used adding pipe will cause alphabets t match exceptions pipe list add target2 label tokenize input first compile tokenization pattern pattern token pattern = keep sequence bigrams value we not want to record bigrams across punctuation so we need to keep non word tokens token pattern = sequence lexer l e x n o n w h i t e s p a e l a s s e s otherwise to compile regular expression pattern token pattern = pattern compile token regex value pattern syntax pse illegal argument token regular expression + token regex value + was invalid + pse get message replacements ! preserve value pipe list add sequence lowercase replacement files value != || deletion files value != n gram preprocessor preprocessor = n gram preprocessor replacement files value != filename replacement files value preprocessor load replacements filename deletion files value != filename deletion files value preprocessor load deletions filename pipe list add preprocessor add tokenizer pipe list add sequence2 token sequence token pattern normalize input necessary keep sequence bigrams value remove non word tokens but record fact that they were there pipe list add token sequence remove non alpha stopword removal stoplist was invoked user specified a list token sequence remove stopwords stopword filter = token sequence remove stopwords stoplist value encoding value t include list keep sequence bigrams value extra stopwords was invoked stopword filter add stop words extra stopwords value pipe list add stopword filter remove stop words value user did not specify a list so use built in english list possibly adding extra words token sequence remove stopwords stopword filter = token sequence remove stopwords keep sequence bigrams value extra stopwords was invoked stopword filter add stop words extra stopwords value pipe list add stopword filter stop pattern was invoked token sequence remove stop patterns stop pattern filter = token sequence remove stop patterns stop pattern value pipe list add stop pattern filter convert tokens to numeric indices into alphabet keep sequence bigrams value output feature sequences bigram features pipe list add token sequence2 feature sequence bigrams keep sequence value output unigram feature sequences pipe list add token sequence2 feature sequence output feature vectors no sequence pipe list add token sequence2 feature sequence pipe list add feature sequence2 augmentable feature vector print output value pipe list add print input and target instance pipe = serial pipes pipe list create instance list and open input instance list instances = instance list instance pipe reader reader input value to equals reader = input stream reader in reader = input stream reader input stream input value encoding value read instances from instances add thru pipe csv iterator reader pattern compile line regex value data option value label option value name option value save instances to output output stream oos output value to equals oos = output stream out oos = output stream output stream output value oos write instances oos close we are reusing a pipe from an instance list created earlier we may have extended label or feature alphabets to maintain compatibility we now save that original instance list back to disk alphabet use pipe from vectors was invoked out rewriting extended pipe from + use pipe from vectors value out instance = + previous instance list get pipe get instance oos = output stream output stream use pipe from vectors value oos write previous instance list oos close 
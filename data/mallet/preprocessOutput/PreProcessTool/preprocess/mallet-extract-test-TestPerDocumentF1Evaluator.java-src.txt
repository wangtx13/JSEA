2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e extract test junit framework test junit framework test junit framework test suite io output stream io print stream io print writer io output stream writer extract pipe pipe iterator iterator types instance types instance list types label alphabet types sequence sequence lexer created nov 18 2004 author < a h r e f= mailto casutton edu>casutton edu< a> $ test per document f1 evaluator v 1 1 2007 10 22 21 38 02 exp $ test per document f1 evaluator test test per document f1 evaluator name name test suite test suite test per document f1 evaluator test pred = <eater>the big red fox< eater> did it it was done <meal>the dog< meal> <eater>the cat< eater> ate <meal>canary< meal> <meal>the hamburger< meal> was eaten kid <eater>the dog< eater> was eaten zest four score and seven years <meal>ago< meal> test = <eater>the big red fox< eater> did it it was done <eater>the dog< eater> <eater>the cat< eater> ate <meal>the canary< meal> <meal>the hamburger< meal> was eaten <eater>the kid< eater> <meal>the dog< meal> was eaten zest four score and seven years ago extraction create extraction from pred strings strings pipe pipe = serial pipes pipe s g m l2 token sequence sequence lexer sequence lexer l e x n o n w h i t e s p a e l a s s e s o target2 label sequence print input and target instance list pred = instance list pipe pred add thru pipe iterator pred strings instance list targets = instance list pipe targets add thru pipe iterator strings label alphabet dict = label alphabet pipe get target alphabet extraction extraction = extraction dict i = 0 i < pred size i++ instance a pred = pred get i instance a target = targets get i tokenization input = tokenization a pred get data sequence pred seq = sequence a pred get target sequence target seq = sequence a target get target document extraction docextr = document extraction t e s t +i dict input pred seq target seq o extraction add document extraction docextr extraction test a expected = testing per document f1 name p r f1 + eater 0 6667 0 5 0 5714 + o 0 1 0 + meal 0 25 0 3333 0 2857 + o v e r a l l micro averaged p=0 4286 r=0 4286 f1=0 4286 + o v e r a l l macro averaged f1=0 4286 test per doc eval extraction extraction = create extraction from test pred test per document f1 evaluator eval = per document f1 evaluator output stream out = output stream eval set output stream out eval evaluate testing extraction print writer output stream writer out output = out to equals test a expected output mpd pred = <title> wizard oz< title> <author> john smith< author> and <author> adam felber< author> <title> jisp boo fuzz by< title> estimable <title> rich q doe< title> and <author> frank wilson< author> <title> howdy doody< title> you think mr nonsense <author>don t you huh< author> mpd = <title> wizard oz< title> <author> john smith< author> and <author> adam felber< author> <title> jisp boo fuzz< title> estimable <author> rich q doe< author> and <author> frank wilson< author> <title> howdy doody< title> <title>you< title> think <title> mr < title> <author> nonsense t you huh< author> mpd expected = testing s e g m e n t counts name correct pred target + title 2 4 5 + o 0 0 0 + author 3 4 5 + testing per field f1 + name p r f1 + title 0 5 0 4 0 4444 + o 0 1 0 + author 0 75 0 6 0 6667 + o v e r a l l micro averaged p=0 625 r=0 5 f1=0 5556 + o v e r a l l macro averaged f1=0 5556 test per field eval extraction extraction = create extraction from mpd pred mpd per field f1 evaluator eval = per field f1 evaluator output stream out = output stream eval evaluate testing extraction print stream out equals mpd expected out to test to stdout extraction extraction = create extraction from mpd pred mpd per field f1 evaluator eval = per field f1 evaluator eval evaluate extraction out please verify that something was output above punct pred = <title> wizard oz < title> <author> john smith< author> and <author> adam felber< author> <title> jisp boo fuzz by< title> estimable <title> rich q doe< title> and <author> frank wilson< author> <title> howdy doody< title>! you think mr nonsense <author>don t you huh< author> punct = <title> wizard oz< title> <author> john smith< author> and <author> adam felber< author> <title> jisp boo fuzz< title> estimable <author> rich q doe< author> and <author> frank wilson< author> <title> howdy doody!< title> <title>you< title> think <title> mr < title> <author> nonsense t you huh< author> xxx currently fails because grabbing field span howdy doody! grabs < title> well i think because getting text subspan goes to start next rather than end last it seems like that should be changed but i d need to think about ikmplications rexa before doing test punctuation ignoring evaluator extraction extraction = create extraction from punct pred punct per field f1 evaluator eval = per field f1 evaluator eval set comparator punctuation ignoring comparator eval set output stream out output stream out = output stream eval evaluate testing extraction print stream out equals mpd expected out to test field cleaning extraction extraction = create extraction from punct pred punct extraction clean fields regex field cleaner < ?>| |! per field f1 evaluator eval = per field f1 evaluator output stream out = output stream eval evaluate testing extraction print stream out equals mpd expected out to throwable test suite suite length > 0 suite = test suite i = 0 i < length i++ suite add test test per document f1 evaluator i suite = test suite suite junit textui test runner run suite 
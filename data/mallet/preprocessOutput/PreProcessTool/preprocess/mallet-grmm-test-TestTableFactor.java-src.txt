2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e test junit framework test junit framework test junit framework test suite io i o set list list types types matrix ops types sparse matrixn types tests test serializable utils maths randoms created aug 17 2004 author < a h r e f= mailto casutton edu>casutton edu< a> $ test table factor v 1 1 2007 10 22 21 37 40 exp $ test table factor test test table factor name name test multiply multiply variable var = variable 4 vals = 2 0 4 0 6 0 8 0 vals2 = 0 5 0 5 0 5 0 5 vals3 = 1 2 3 4 table factor ans = table factor var vals3 table factor ptl1 = table factor var vals table factor ptl2 = table factor var vals2 factor ptl3 = ptl1 multiply ptl2 ptl1 multiply ptl2 ans almost equals ptl1 ans almost equals ptl3 test tbl tbl plus equals variable var = variable 4 vals = 2 0 4 0 6 0 8 0 vals2 = 0 25 0 5 0 75 1 0 vals3 = 2 25 4 5 6 75 9 0 table factor ans = table factor var vals3 table factor ptl1 = table factor var vals table factor ptl2 = table factor var vals2 ptl1 plus equals ptl2 ans almost equals ptl1 test entropy variable v1 = variable 2 table factor ptl = table factor v1 0 3 0 7 entropy = ptl entropy equals 0 61086 entropy 1e 3 log table factor log factor = log table factor make from values v1 0 3 0 7 entropy2 = log factor entropy equals 0 61086 entropy2 1e 3 fails ignore test serialization i o not found variable v1 = variable 2 variable v2 = variable 3 variable vars = v1 v2 vals = 2 0 4 0 6 0 3 5 7 table factor ptl = table factor vars vals table factor ptl2 = table factor test serializable clone via serialization ptl set varset1 = ptl var set set varset2 = ptl2 var set !varset1 contains varset2 variables deep cloned there s not way to get directly at matrices ! compare potential values ptl ptl2 table factor marg1 = table factor ptl marginalize v1 table factor marg2 = table factor ptl2 marginalize ptl2 find variable v1 get label compare potential values marg1 marg2 compare potential values table factor ptl table factor ptl2 assignment iterator it1 = ptl assignment iterator assignment iterator it2 = ptl2 assignment iterator it1 has next ptl value it1 == ptl value it2 it1 advance it2 advance test sample variable v = variable 3 vals = 1 3 2 table factor ptl = table factor v vals sampled = 100 randoms r = randoms 32423 i = 0 i < sampled length i++ sampled i = ptl sample location r sum = matrix ops sum vals counts = vals length i = 0 i < vals length i++ counts i = utils count sampled i matrix ops print counts i = 0 i < vals length i++ prp = counts i sampled length equals vals i sum prp 0 1 test marginalize variable vars = variable variable 2 variable 2 table factor ptl = table factor vars 1 2 3 4 table factor ptl2 = table factor ptl marginalize vars 1 equals f a i l u r e potential has too many vars +ptl2 1 ptl2 var set size f a i l u r e potential does not contain +vars 1 + +ptl2 ptl2 var set contains vars 1 expected = 4 6 f a i l u r e potential has incorrect values expected + utils to expected + was +ptl2 maths almost equals ptl2 to value expected 1e 5 test marginalize out variable vars = variable variable 2 variable 2 table factor ptl = table factor vars 1 2 3 4 table factor ptl2 = table factor ptl marginalize out vars 0 equals f a i l u r e potential has too many vars +ptl2 1 ptl2 var set size f a i l u r e potential does not contain +vars 1 + +ptl2 ptl2 var set contains vars 1 expected = 4 6 f a i l u r e potential has incorrect values expected + utils to expected + was +ptl2 maths almost equals ptl2 to value expected 1e 5 test one var slice vals = 0 0 1 3862943611198906 0 6931471805599453 1 791759469228055 variable v1 = variable 2 variable v2 = variable 2 variable vars = variable v1 v2 factor ptl = table factor vars vals assignment assn = assignment v1 0 table factor sliced = table factor ptl slice assn table factor expected = table factor v2 1 0 4 0 compare potential values sliced expected test two var slice vals = 0 0 1 2 3 4 5 6 7 variable v1 = variable 2 variable v2 = variable 2 variable v3 = variable 2 variable vars = variable v1 v2 v3 factor ptl = table factor vars vals assignment assn = assignment v3 0 table factor sliced = table factor ptl slice assn table factor expected = table factor variable v1 v2 0 2 4 6 compare potential values sliced expected test multi var slice vals = 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 variable v1 = variable 2 variable v2 = variable 2 variable v3 = variable 2 variable v4 = variable 2 variable vars = variable v1 v2 v3 v4 factor ptl = table factor vars vals out ptl assignment assn = assignment v4 0 table factor sliced = table factor ptl slice assn out table factor table factor sliced table factor expected = table factor variable v1 v2 v3 0 2 4 6 8 10 12 14 compare potential values sliced expected test log multi var slice vals = 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 variable v1 = variable 2 variable v2 = variable 2 variable v3 = variable 2 variable v4 = variable 2 variable vars = variable v1 v2 v3 v4 factor ptl = log table factor make from values vars vals out ptl dump to assignment assn = assignment v4 0 log table factor sliced = log table factor ptl slice assn log table factor expected = log table factor make from values variable v1 v2 v3 0 2 4 6 8 10 12 14 test failed expected +expected dump to + actual +sliced dump to expected almost equals sliced test sparse multiply variable vars = variable variable 2 variable 2 szs = 2 2 idxs1 = 0 1 3 vals1 = 2 0 4 0 8 0 idxs2 = 0 3 vals2 = 0 5 0 5 vals3 = 1 0 0 4 0 table factor ptl1 = table factor vars ptl1 set values sparse matrixn szs idxs1 vals1 table factor ptl2 = table factor vars ptl2 set values sparse matrixn szs idxs2 vals2 table factor ans = table factor vars ans set values sparse matrixn szs idxs1 vals3 factor ptl3 = ptl1 multiply ptl2 tast failed! expected +ans+ actual +ptl3 ans almost equals ptl3 test sparse divide variable vars = variable variable 2 variable 2 szs = 2 2 idxs1 = 0 1 3 vals1 = 2 0 4 0 8 0 idxs2 = 0 3 vals2 = 0 5 0 5 vals3 = 4 0 0 16 0 table factor ptl1 = table factor vars ptl1 set values sparse matrixn szs idxs1 vals1 table factor ptl2 = table factor vars ptl2 set values sparse matrixn szs idxs2 vals2 table factor ans = table factor vars ans set values sparse matrixn szs idxs1 vals3 ptl1 divide ptl2 tast failed! expected +ans+ actual +ptl1 ans almost equals ptl1 test sparse marginalize variable vars = variable variable 2 variable 2 szs = 2 2 idxs1 = 0 1 3 vals1 = 2 0 4 0 8 0 table factor ptl1 = table factor vars ptl1 set values sparse matrixn szs idxs1 vals1 table factor ans = table factor vars 0 6 8 factor ptl2 = ptl1 marginalize vars 0 tast failed! expected +ans+ actual +ptl2+ orig +ptl1 ans almost equals ptl2 test sparse extract max variable vars = variable variable 2 variable 2 szs = 2 2 idxs1 = 0 1 3 vals1 = 2 0 4 0 8 0 table factor ptl1 = table factor vars ptl1 set values sparse matrixn szs idxs1 vals1 table factor ans = table factor vars 0 4 8 factor ptl2 = ptl1 extract max vars 0 tast failed! expected +ans+ actual +ptl2+ orig +ptl1 ans almost equals ptl2 test log sample variable v = variable 2 vals = 30 0 log table factor ptl = log table factor make from log values v vals idx = ptl sample location randoms 43 equals 1 idx test exp variable var = variable 4 vals = 2 0 4 0 6 0 8 0 vals3 = 4 0 16 0 36 0 64 0 table factor ans = table factor var vals3 table factor ptl1 = table factor var vals ptl1 exponentiate 2 0 expected +ans dump to + but was +ptl1 dump to ptl1 almost equals ans test plus equals variable var = variable 4 vals = 2 0 4 0 6 0 8 0 table factor factor = table factor var vals factor plus equals 0 1 expected = 2 1 4 1 6 1 8 1 table factor ans = table factor var expected expected +ans dump to + but was +factor dump to factor almost equals ans test multiply all rep = 0 rep < 100 rep++ universe reset universe variable v1 = variable 2 variable v2 = variable 2 variable vars = variable v1 v2 vals = 2 0 4 0 6 0 8 0 vals2 = 0 5 0 5 0 5 0 5 vals3 = 1 2 3 4 table factor ans = table factor vars vals3 table factor ptl1 = table factor vars vals table factor ptl2 = table factor vars vals2 factor ptl3 = table factor multiply all factor ptl1 ptl2 var set vs = ptl3 var set i = 0 i < vars length i++ equals vars i vs get i ans almost equals ptl3 test expand to contain variable v1 = variable 2 variable v2 = variable 2 variable v3 = variable 2 variable vars = variable v1 v2 vals = 2 0 4 0 6 0 8 0 vals2 = 0 5 0 5 table factor f1 = table factor vars vals table factor f2 = table factor v3 vals2 f1 multiply f2 variable all v = variable v1 v2 v3 exp = 1 1 2 2 3 3 4 4 table factor ans = table factor all v exp out f1 dump to out ans dump to ans almost equals f1 thanks to john pate <j k pate sms ed ac uk> test variable reordering variable var0 = variable 2 variable var1 = variable 3 randoms r = randoms 17671 probs = r next r next r next r next r next r next table factor nothing reordered = table factor variable var0 var1 probs probs to reorder = probs 0 probs 3 probs 1 probs 4 probs 2 probs 5 table factor re ordered to match = table factor variable var1 var0 probs to reorder table factor re ordered to mis match = table factor variable var1 var0 probs out should be + nothing reordered almost equals re ordered to match out should be + nothing reordered almost equals re ordered to mis match nothing reordered almost equals re ordered to match nothing reordered almost equals re ordered to mis match test suite test suite test table factor throwable test suite suite length > 0 suite = test suite i = 0 i < length i++ suite add test test table factor i suite = test suite suite junit textui test runner run suite 
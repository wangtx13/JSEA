2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e pipe io net u r i regex logging logger extract span extract tokenization types instance types token types token sequence sequence lexer lexer logger converts a containing simple s g m l tags into a dta token sequence words paired a target token sequence containing s g m l tags in effect each word it does not handle nested s g m l tags nor gracefully handle malformed s g m l author andrew mc callum <a href= mailto >mccallum edu< a> s g m l2 token sequence pipe serializable logger logger = logger get logger s g m l2 token sequence get name pattern sgml pattern = pattern compile < ? ^> > sequence lexer lexer background tag save source = s g m l2 token sequence sequence lexer lexer background tag save source lexer = lexer background tag = background tag save source = save source s g m l2 token sequence sequence lexer lexer background tag lexer = lexer background tag = background tag s g m l2 token sequence regex background tag lexer = sequence lexer regex background tag = background tag s g m l2 token sequence sequence lexer o instance pipe instance carrier sequence = sequence carrier get data tokenization data tokens = tokenization token sequence target tokens = token sequence tag = background tag next tag = background tag matcher m = sgml pattern matcher text start = 0 text end = 0 next start = 0 done = logger fine sgml pattern pattern logger finer to !done done = ! m find done text end = length culotta changed from length 1 sgml = m group logger finer s g m l = +sgml group count = m group count logger finer to group count sgml at 1 == next tag = background tag next tag = m group 0 next tag = sgml substring 1 sgml length 1 logger finer next tag + next tag next start = m end m end one beyond index last match text end = m start subtring does not include index end logger finer text start end +text start+ +text end text end text start > 0 logger finer tag = +tag logger finer target = +string sub sequence text start text end lexer set sequence sub sequence text start text end lexer has next lexer next tok start = text start + lexer get start offset tok end = text start + lexer get end offset data tokens add span tok start tok end target tokens add token tag text start = next start tag = next tag carrier set data data tokens carrier set target target tokens save source carrier set source data tokens carrier pipe p = serial pipes pipe input2 sequence s g m l2 token sequence s g m l2 token sequence sequence lexer pattern compile o i = 0 i < length i++ instance carrier = p instance from instance i token sequence data = token sequence carrier get data token sequence target = token sequence carrier get target logger finer === logger info i j = 0 j < data size j++ logger info target get j get text + +data get j get text e out e e print stack trace serialization serial u = 1 history 1 add save source u r r e n t s e r i a l v e r s i o n = 1 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write sgml pattern out write lexer out write background tag out write save source read input stream in i o not found = in read sgml pattern = pattern in read lexer = sequence lexer in read background tag = in read == 0 save source = save source = in read 
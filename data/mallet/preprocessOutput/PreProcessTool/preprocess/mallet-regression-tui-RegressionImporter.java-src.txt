regression tui io regex pipe pipe iterator types load data suitable linear and poisson regression regression importer command option input = command option regression importer input f i l e containing data to be classified one instance per line command option output = command option regression importer output f i l e text vectors write instance list to using indicates stdout command option line regex = command option regression importer line regex r e g e x ^\\s \\ s \\s $ regular expression containing regex groups response variables and name fields + response followed explanatory variables no instance name command option label option = command option regression importer response i n t e g e r 1 index group containing response variables + use 0 to indicate that label field not used command option name option = command option regression importer name i n t e g e r 0 index group containing instance name + use 0 to indicate that name field not used command option data option = command option regression importer data i n t e g e r 2 index group containing explanatory variables command option response = command option regression importer response t r u e| f a l s e interpret response variable an rather + than a precision real number use poisson regression command option use feature value pairs = command option regression importer use feature value pairs t r u e| f a l s e process data field a series \ feature=value\ pairs rather + than an ordered sequence variables useful when most variables are 0 command option spaced strings field names = command option spaced strings regression importer field names a b use option to specify names explanatory variables + when you are not using feature name value pairs i o process command line options command option set summary regression importer a tool importing data suitable linear and poisson regression command option process regression importer list< pipe> pipe list = list< pipe> use feature value pairs value data into tokens pipe list add feature value string2 feature vector field names value != data into an on whitespace and then convert that to a feature vector using user specified names pipe list add value string2 feature vector field names value data into an on whitespace and then convert that to a feature vector pipe list add value string2 feature vector convert target to a numeric value which should be an poisson regression response value pipe list add target2 pipe list add target2 create an iterator that will create an instance from each line in a breaking line into n a m e l a b e l feature=value feature=value csv iterator reader = csv iterator reader input value line regex value data option value label option value name option value construct a instance list passing it pipe we want to use to process instances instance list instances = instance list serial pipes pipe list now process each instance iterator instances add thru pipe reader out instances get data alphabet instances save output value 
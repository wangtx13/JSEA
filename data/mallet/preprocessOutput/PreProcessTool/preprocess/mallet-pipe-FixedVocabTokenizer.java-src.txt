pipe types hash set list io a simple unicode tokenizer that accepts sequences letters tokens fixed vocab tokenizer pipe serializable minimum length = 3 token buffer character buffer fixed vocab tokenizer alphabet alphabet alphabet token buffer = 100000 character buffer = 1000 instance pipe instance instance alphabet alphabet = get alphabet underscore point = character point at 0 instance get data sequence sequence characters = sequence instance get data length = 1 num tokens = 0 using points instead chars allows us to support extended unicode and has no significant efficiency costs total points = character point count characters 0 characters length i=0 i < total points i++ num tokens == token buffer length 1 err overflowed token buffer point = character point at characters i point type = character get type point point type == character l o w e r a s e l e t t e r || point type == character u p p e r a s e l e t t e r || point == underscore point length++ character buffer length = point point type == character d a s h p u n t u a t i o n || point type == character d e i m a l d i g i t n u m b e r add dashes and numbers e x e p t at beginning tokens length != 1 length++ character buffer length = point point type == character s p a e s e p a r a t o r || point type == character l i n e s e p a r a t o r || point type == character p a r a g r a p h s e p a r a t o r || point type == character e n d p u n t u a t i o n || point type == character o n n e t o r p u n t u a t i o n || point type == character s t a r t p u n t u a t i o n || point type == character i n i t i a l q u o t e p u n t u a t i o n || point type == character f i n a l q u o t e p u n t u a t i o n || point type == character o t h e r p u n t u a t i o n things that delimit words length != 1 token = character buffer 0 length + 1 alphabet contains token length >= minimum length token buffer num tokens = alphabet lookup index token num tokens++ length = 1 point type == character o m b i n i n g s p a i n g m a r k || point type == character e n l o s i n g m a r k || point type == character n o n s p a i n g m a r k || point type == character t i t l e a s e l e t t e r || point type == character m o d i f i e r l e t t e r || point type == character o t h e r l e t t e r obscure things that are technically words marks are especially useful indic scripts length++ character buffer length = point character o n t r o l character m a t h s y m b o l out type + point type length != 1 token = character buffer 0 length + 1 alphabet contains token length >= minimum length token buffer num tokens = alphabet lookup index token num tokens++ tokens = num tokens arraycopy token buffer 0 tokens 0 num tokens instance set data feature sequence alphabet tokens illegal argument looking a sequence found a + instance get data get instance serial u = 1 
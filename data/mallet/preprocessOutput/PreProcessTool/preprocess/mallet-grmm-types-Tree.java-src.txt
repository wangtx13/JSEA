2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e types list collections iterator list types alphabet gnu trove t hash map arbitrary trees based on in open j graph open j graph tree a bit minimal wrt convenience functions so we add a few here created wed oct 1 14 51 47 2003 author <a href= mailto casutton > charles sutton< a> $ tree v 1 1 2007 10 22 21 37 44 exp $ tree t hash map vertex2int = t hash map list int2vertex = list list parents = list list children = list root = tree tree constructor efficient indexing parents children tree make from subtree parent list subtrees tree tree = tree tree add parent iterator it = subtrees iterator it has next tree subtree = tree it next tree add subtree parent subtree subtree get root tree add subtree parent tree subtree child add node parent child iterator it = subtree get children child iterator it has next gchild = it next add subtree child subtree gchild lookup index v vertex2int get v lookup vertex idx int2vertex get idx maybe add vertex v !vertex2int contains key v foo = int2vertex size int2vertex add v vertex2int put v foo parents add children add list foo vertex2int get v add rt root == maybe add vertex rt root = rt unsupported operation tree already has a root add node parent child id1 root == root = parent id1 = maybe add vertex parent id1 = lookup index parent == 1 unsupported operation tree already has a root id2 = maybe add vertex child old parent = parents get id2 old parent != old parent != parent unsupported operation trying to change parent +child+ from +old parent+ to +parent parents set id2 parent list child list = list children get id1 child list add child get parent child vertex2int contains key child parents get vertex2int get child list get children parent = vertex2int get parent collections unmodifiable list list children get convenience functions root var idx = lookup index var parents get idx == contains v vertex2int get v >= 0 leaf v idx = lookup index v list children get idx size == 0 iterator get vertices iterator int2vertex iterator get root root dump to buffer buf = buffer dump rec root 0 buf buf to dump rec node lvl buffer buf i = 0 i < 3 lvl i++ buf append buf append append node append iterator it = get children node iterator it has next child = it next dump rec child lvl+1 buf tree 
2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e extract io text decimal format list r f max lattice max lattice sum lattice transducer types created oct 31 2004 author < a h r e f= mailto casutton edu>casutton edu< a> $ lattice viewer v 1 1 2007 10 22 21 37 44 exp $ lattice viewer f e a t u r e u t o f f p t = 25 l e n g t h = 10 lattice2html print stream out extor info info print writer writer = print writer output stream writer out lattice2html writer info lattice == no alpha beta values printed lattice2html print writer out extor info info info target size == info predicted size info input size == info predicted size n = info target size start = 0 start < n start += l e n g t h 1 end = math min n start + l e n g t h !all seq matches info predicted info target start end error2html out info start end write header print writer out out <html><head><title> e r r o r o u t p u t< title> <link rel=\ stylesheet\ href=\ errors css\ type=\ text css\ > < head><body> write footer print writer out out < body>< html> display h t m l one error2html print writer out extor info info start end anchor = info idx+ +start+ +end out <p>< a n a m e=\ +anchor+ \ > out <p> instance +info desc+ position +start+ +end info link != out <a href=\ +info link+ # +anchor+ \ > lattice < a> out < p> out <table> output indices out start end output input row out info input start end output table row out target info target info predicted start end output table row out predicted info predicted info target start end info lattice != output lattice rows out info lattice start end output transition costs out info start end output features out info fvs info predicted info target start end out < table> num max viterbi = 5 output lattice rows print writer out max lattice lattice start end decimal format f = decimal format 0 ## transducer ducer = lattice get transducer max = math min num max viterbi ducer num states list< sequence< transducer state>> state sequences = lattice best state sequences max k = 0 k < max k++ out <tr class=\ delta\ > out <td class=\ label\ > delta rank +k+ < td> ip = start ip < end ip++ transducer state state = state sequences get k get ip+1 state get name equals lattice best output sequence get ip out print <td class=\ viterbi\ > out print <td> out print state get name + <br > +f format lattice get delta ip+1 state get index + < td> out < tr> num features to display = 5 get num features to display num features to display set num features to display num features to display lattice viewer num features to display = num features to display output transition costs print writer out extor info info start end transducer ducer = info lattice get transducer out <tr class=\ predtrans\ > out <td class=\ label\ > cost pred trans < td> ip = start ip < end ip++ ip == 0 out <td>< td> transducer state from = r f ducer get state info best states get ip 1 to transducer transition iterator iter = from transition iterator info fvs ip info predicted ip iter has next iter next cost = iter get weight str = iter describe transition math abs cost f e a t u r e u t o f f p t out print <td> + str + < td> out print <td> no matching transition< td> out < tr> out <tr class=\ targettrans\ > out <td class=\ label\ > cost target trans < td> ip = start ip < end ip++ ip == 0 out <td>< td> !seq matches info predicted info target ip || !seq matches info predicted info target ip 1 transducer state from = r f ducer get state info target get ip 1 to from == out <td colspan= + end start + > could not find state +info target get ip 1 + < td> transducer transition iterator iter = from transition iterator info fvs ip info target ip iter has next iter next cost = iter get weight str = iter describe transition math abs cost f e a t u r e u t o f f p t out print <td> + str + < td> out print <td> no matching transition< td> out print <td>< td> out < tr> out <tr class=\ predtargettrans\ > out <td class=\ label\ > cost pred >target trans < td> ip = start ip < end ip++ ip == 0 out <td>< td> !seq matches info predicted info target ip || !seq matches info predicted info target ip 1 transducer state from = r f ducer get state info best states get ip 1 to transducer transition iterator iter = from transition iterator info fvs ip info target ip iter has next iter next cost = iter get weight str = iter describe transition math abs cost f e a t u r e u t o f f p t out print <td> + str + < td> out print <td> no matching transition< td> out print <td>< td> out < tr> output lattice rows print writer out sum lattice lattice start end decimal format f = decimal format 0 ## transducer ducer = lattice get transducer k = 0 k < ducer num states k++ transducer state state = ducer get state k out <tr class=\ alpha\ > out <td class=\ label\ > alpha +state get name + < td> ip = start ip < end ip++ out print <td> +f format lattice get alpha ip+1 state + < td> out < tr> k = 0 k < ducer num states k++ transducer state state = ducer get state k out <tr class=\ beta\ > out <td class=\ label\ > beta +state get name + < td> ip = start ip < end ip++ out print <td> +f format lattice get beta ip+1 state + < td> out < tr> k = 0 k < ducer num states k++ transducer state state = ducer get state k out <tr class=\ gamma\ > out <td class=\ label\ > gamma +state get name + < td> ip = start ip < end ip++ out print <td> +f format lattice get gamma weight ip+1 state + < td> out < tr> output input row print writer out token sequence input start end out <tr class=\ input\ > out <td class=\ label\ >< td> ip = start ip < end ip++ out print <td> +input get ip get text + < td> out < tr> output indices print writer out start end out <tr class=\ indices\ > out <td class=\ label\ >< td> ip = start ip < end ip++ out print <td> +ip+ < td> out < tr> output table row print writer out css sequence seq1 sequence seq2 start end out <tr class=\ +css class+ \ > out <td class=\ label\ > +css class+ < td> i = start i < end i++ seq matches seq1 seq2 i out print <td> out print <td class=\ error\ > out print seq1 get i out print < td> out < tr> output features print writer out feature vector sequence fvs sequence in sequence output start end out <tr class=\ features\ > <td class=\ label\ > features< td> i = start i < end i++ !seq matches in output i out print <td> feature vector fv = fvs get feature vector i k = 0 k < fv num locations k++ out print fv get alphabet lookup fv index at location k fv value at location k != 1 0 out print +fv value at location k out <br > out < td> out <td>< td> out < tr> seq matches sequence seq1 sequence seq2 i seq1 get i to equals seq2 get i to all seq matches sequence seq1 sequence seq2 start end i = start i < end i++ !seq matches seq1 seq2 i extraction2html extraction extraction r f extractor extor print stream out print writer writer = print writer output stream writer out extraction2html extraction extor out extraction2html extraction extraction r f extractor extor print writer out extraction2html extraction extor out extraction2html extraction extraction r f extractor extor print stream out show lattice print writer writer = print writer output stream writer out extraction2html extraction extor writer show lattice extraction2html extraction extraction r f extractor extor print writer out show lattice write header out i = 0 i < extraction get num documents i++ document extraction docextr = extraction get document extraction i desc = docextr get name doc = sequence docextr get document to extor info info = info doc doc desc n +i docextr extor show lattice !show lattice info link = lattice html lattice2html out info write footer out extor info token sequence input sequence predicted label sequence target feature vector sequence fvs max lattice lattice sequence best states link non name h t m l to use cross links desc idx extor info token sequence input sequence predicted label sequence target desc idx input = input predicted = predicted target = target desc = desc idx = idx extor info info doc doc desc idx document extraction docextr r f extractor extor show lattice instance c2 = instance doc extor get tokenization pipe token sequence input = token sequence c2 get data token sequence input = token sequence docextr get input label sequence target = docextr get target sequence predicted = docextr get predicted labels extor info info = extor info input predicted target desc idx show lattice == r f crf = extor get crf xxx perhaps next two lines could be a transducer method??? instance carrier = extor get feature pipe pipe instance input info fvs = feature vector sequence carrier get data info lattice = max lattice crf sequence carrier get data info best states = info lattice best output sequence info lattice files get too large too many instances are written to one e x t r a t i o n s p e r f i l e = 25 view dual results dir extraction e1 r f extractor extor1 extraction e2 r f extractor extor2 i o e1 get num documents != e2 get num documents illegal argument extractions t match different number docs print writer str = print writer writer dir errors html write dual extractions str e1 extor1 e2 extor2 0 e1 get num documents str close max = e1 get num documents start = 0 start < max start += e x t r a t i o n s p e r f i l e end = math min start + e x t r a t i o n s p e r f i l e max print writer lattice str = print writer writer dir lattice +start+ html write dual extractions lattice str e1 extor1 e2 extor2 start end lattice str close compute lattice fname doc idx html doc no = doc idx e x t r a t i o n s p e r f i l e will get truncated start = e x t r a t i o n s p e r f i l e html doc no lattice +start+ html write dual extractions print writer out extraction e1 r f extractor extor1 extraction e2 r f extractor extor2 start end show lattice write header out i = start i < end i++ document extraction doc1 = e1 get document extraction i document extraction doc2 = e2 get document extraction i desc = doc1 get name doc1 str = sequence doc1 get document to doc2 str = sequence doc2 get document to !doc1 str equals doc2 str err skipping document +i+ extractions t match sequence targ1 = doc1 get predicted labels sequence targ2 = doc2 get predicted labels !predictions match targ1 targ2 extor info info1 = info doc doc1 str r f1 +desc c1 i +i doc1 extor1 show lattice extor info info2 = info doc doc1 str r f2 +desc c2 i +i doc2 extor2 show lattice !show lattice add links from errors html > lattice html info1 link = info2 link = compute lattice fname i dual lattice2html out desc info1 info2 write footer out lattice == no alpha beta values printed dual lattice2html print writer out desc extor info info1 extor info info2 info1 predicted size == info1 target size info1 input size == info1 predicted size info2 input size == info2 predicted size info2 predicted size == info2 target size n = info1 target size start = 0 start < n start += l e n g t h 1 end = math min info1 predicted size start + l e n g t h !all seq matches info1 predicted info2 predicted start end error2html out info1 start end error2html out info2 start end predictions match sequence targ1 sequence targ2 targ1 size != targ2 size i = 0 i < targ1 size i++ !targ1 get i to equals targ2 get i to 
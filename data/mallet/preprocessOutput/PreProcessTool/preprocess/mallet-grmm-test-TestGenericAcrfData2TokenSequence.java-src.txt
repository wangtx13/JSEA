test junit framework test junit framework test junit framework test suite io i o io reader regex pattern extract tokenization generic acrf data2 token sequence pipe pipe pipe iterator line group iterator types types tests test serializable created sep 15 2005 author < a h r e f= mailto casutton edu>casutton edu< a> $ test generic acrf data2 token sequence v 1 1 2007 10 22 21 37 41 exp $ test generic acrf data2 token sequence test sample data = l b l a l b l f1 f5 f7 + l b l b l b l f5 f6 + l b l b l b l d + l b l a l b l d f2 f1 sample data2 = l b l b l b l d f1 f5 f7 + l b l a l b l f5 f6 + l b l a l b l + l b l b l b l d f2 f1 sample fixed data = l b l a l b l f1 f5 f7 + l b l b l b l f5 f6 + l b l b l b l d + l b l a l b l d f2 f1 sample fixed data2 = l b l b l b l d f1 f5 f7 + l b l a l b l f5 f6 + l b l a l b l + l b l b l b l d f2 f1 labels at end data = f1 f5 f7 l b l b l b l d + f5 f6 l b l a l b l + l b l a l b l + f2 f1 l b l b l b l d test generic acrf data2 token sequence name name test from serialization i o not found pipe p = generic acrf data2 token sequence instance list training = instance list p training add thru pipe line group iterator reader sample data pattern compile ^$ pipe p2 = pipe test serializable clone via serialization p instance list l1 = instance list p l1 add thru pipe line group iterator reader sample data2 pattern compile ^$ instance list l2 = instance list p2 l2 add thru pipe line group iterator reader sample data2 pattern compile ^$ read resolve alphabet thing doesn t kick in on first deserialization p get target alphabet != p2 get target alphabet equals 1 l1 size equals 1 l2 size instance inst1 = l1 get 0 instance inst2 = l2 get 0 labels sequence ls1 = labels sequence inst1 get target labels sequence ls2 = labels sequence inst2 get target equals 4 ls1 size equals 4 ls2 size i = 0 i < 4 i++ equals ls1 get i to ls2 get i to test fixed num labels i o not found pipe p = generic acrf data2 token sequence 2 instance list training = instance list p training add thru pipe line group iterator reader sample fixed data pattern compile ^$ equals 1 training size instance inst1 = training get 0 labels sequence ls1 = labels sequence inst1 get target equals 4 ls1 size test labels at end i o not found generic acrf data2 token sequence p = generic acrf data2 token sequence 2 p set labels at end instance list training = instance list p training add thru pipe line group iterator reader labels at end data pattern compile ^$ equals 1 training size instance inst1 = training get 0 tokenization toks = tokenization inst1 get data labels sequence ls1 = labels sequence inst1 get target equals 4 ls1 size equals 3 toks get 0 get features size equals l b l b l b l d ls1 get labels 0 to label alphabet global dict = p get label alphabet 0 equals 2 p num levels equals global dict ls1 get labels 0 get 0 get label alphabet test no token text generic acrf data2 token sequence p = generic acrf data2 token sequence 2 p set features include token p set include token text instance list training = instance list p training add thru pipe line group iterator reader sample fixed data pattern compile ^$ equals 1 training size instance inst1 = training get 0 labels sequence ls1 = labels sequence inst1 get target equals 4 ls1 size token sequence ts1 = token sequence inst1 get data equals 3 ts1 get 0 get features size equals 2 ts1 get 1 get features size test suite test suite test generic acrf data2 token sequence throwable test suite suite length > 0 suite = test suite i = 0 i < length i++ suite add test test generic acrf data2 token sequence i suite = test suite test generic acrf data2 token sequence suite junit textui test runner run suite 
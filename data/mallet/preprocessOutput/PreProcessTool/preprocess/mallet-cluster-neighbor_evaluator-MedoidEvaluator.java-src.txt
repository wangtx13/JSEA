cluster neighbor evaluator weka core instances classify classifier cluster clustering cluster pairwise matrix types matrix ops uses a link classifier over pairs link instances to score link neighbor currently only supports link agglomerative neighbor s author michael wick <mwick edu> 1 0 since 1 0 classifying neighbor evaluator medoid evaluator classifying neighbor evaluator serial u = 1 l single link then score clusters a and b score link between two medoids single link=false how to combine a set pairwise scores e g mean max currently not supported in combining strategy combining strategy score all edges involved in a merge only score edges that croess boundaries clusters being merged merge first=true cache calls to get score in some experiments reduced running time nearly half pairwise matrix score cache classifier classifier to assign scores to link neighbor s which a pair instances has been merged scoring label predicted label that corresponds to a positive example e g y e s combining strategy how to combine pairwise scores e g max mean merge first score all edges involved in a merge only score edges that cross boundaries clusters being merged medoid evaluator classifier classifier scoring label classifier scoring label out using medoid evaluator medoid evaluator classifier classifier scoring label single link merge first classifier scoring label single link=single link merge first=merge first out using medoid evaluator single link= +single link+ medoid evaluator classifier classifier scoring label combining strategy combining strategy merge first classifier scoring label combining strategy = combining strategy merge first = merge first out using centroid evaluator 2 evaluate neighbor neighbors scores = neighbors length i = 0 i < neighbors length i++ scores i = evaluate neighbors i scores evaluate neighbor neighbor result = 2 ! neighbor agglomerative neighbor illegal argument expect agglomerative neighbor not + neighbor get get name old indices = agglomerative neighbor neighbor get old clusters merged indices= agglomerative neighbor neighbor get cluster clustering original = neighbor get original result 0 =get centroid old indices 0 original result 1 =get centroid old indices 1 original single link scores a cluster based on link between medoid each cluster agglomerative neighbor pwn = agglomerative neighbor original original old indices 0 result 0 old indices 1 result 1 score = get score pwn score average weighted average where weights are proportional to similarity to medoid meds a=get med weights result 0 old indices 0 original meds b=get med weights result 1 old indices 1 original numerator=0 denominator=0 i=0 i<old indices 0 length i++ cross boundary j=0 j<old indices 1 length j++ agglomerative neighbor pwn = agglomerative neighbor original original old indices 0 i old indices 1 j inter score=get score pwn numerator+=inter score meds a i meds b j denominator+=meds a i meds b j intra cluster1 merge first j=i+1 j<old indices 0 length j++ agglomerative neighbor pwn = agglomerative neighbor original original old indices 0 i old indices 0 j inter score=get score pwn numerator+=inter score meds a i meds a j denominator+=meds a i meds a j intra cluster2 merge first i=0 i<old indices 1 length i++ j=i+1 j<old indices 1 length j++ agglomerative neighbor pwn = agglomerative neighbor original original old indices 1 i old indices 1 j inter score=get score pwn numerator+=inter score meds b i meds b j denominator+=meds b i meds b j numerator denominator get med weights med idx indices clustering original result = indices length i=0 i<result length i++ med idx==i result i =1 agglomerative neighbor an = agglomerative neighbor original original indices med idx indices i result i = get score an result a bettter strategy would use caching to incrimentally determine centroid get centroid indices clustering original indices length<2 0 indices 0 cent dist= n e g a t i v e i n f i n i t y cent idx= 1 scores = indices length i=0 i<indices length i++ acc=0 k=0 k<indices length k++ i==k agglomerative neighbor pwn = agglomerative neighbor original original indices i indices k score=get score pwn acc+=score scores i = get score pwn acc = indices length 1 scores i =acc i=0 i<scores length i++ scores i >cent dist cent dist=scores i cent idx=i cent idx=indices i cent idx evaluate neighbor neighbor ! neighbor agglomerative neighbor illegal argument expect agglomerative neighbor not + neighbor get get name clustering original = neighbor get original merged indices = agglomerative neighbor neighbor get cluster list scores = list i = 0 i < merged indices length i++ j = i + 1 j < merged indices length j++ original get label merged indices i != original get label merged indices j || merge first agglomerative neighbor pwneighbor = agglomerative neighbor original original merged indices i merged indices j scores add get score pwneighbor scores size < 1 illegal state no pairs instances were scored vals = scores size i = 0 i < vals length i++ vals i = scores get i value combining strategy combine vals reset score cache = to class= + get get name + classifier= + classifier get get name get score agglomerative neighbor pwneighbor score cache == score cache = pairwise matrix pwneighbor get original get num instances indices = pwneighbor get cluster score cache get indices 0 indices 1 == 0 0 score cache set indices 0 indices 1 classifier classify pwneighbor get label vector value scoring label score cache get indices 0 indices 1 specifies how to combine a set pairwise scores into a cluster wise score author aron culotta <culotta degas edu> 1 0 since 1 0 combining strategy combine scores average combining strategy combine scores matrix ops mean scores minimum combining strategy combine scores matrix ops min scores maximum combining strategy combine scores matrix ops max scores 
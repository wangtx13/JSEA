2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> classify list list logging io print writer io serializable pipe pipe types alphabet types alphabet carrying types feature vector types instance types instance list types label types label alphabet types labeling types feature selection parent all classifiers <p> all classification techniques in m a l l e t are two classes a trainer and a classifier trainer injests training data and creates a classifier that holds set during training classifier applies those to an instance to produce a classification instance <p> a concrete classifier required only to be able to classify an instance <p> classifying an instance list are here there are also calculating recall and f1 from either instance lists which are classified first or an list classifications similar functionality also in link classify trial <p> a classifier holds a reference to pipe that was used to create instances being classified most classifiers use to make sure alphabets instances being classified are same alphabet used during training <p> alphabets are allowed to between training and classification classifier trainer instance instance list classification trial classifier alphabet carrying serializable logger logger = logger get logger classifier get name pipe instance pipe serialization only classifier classifier pipe instance pipe instance pipe = instance pipe all classifiers must have set labels instance pipe get target alphabet != instance pipe get target alphabet get assignable from label alphabet not all classifiers require a feature dictionary however t o d o change name to get pipe pipe get instance pipe instance pipe alphabet get alphabet alphabet instance pipe get data alphabet label alphabet get label alphabet label alphabet instance pipe get target alphabet alphabet get alphabets alphabet get alphabet get label alphabet alphabets match alphabet carrying alphabet other alphabets = get alphabets other alphabets length == 2 other alphabets 0 == get alphabet other alphabets 1 == get label alphabet t o d o make argument list< instance> list< classification> classify instance list instances list< classification> ret = list< classification> instances size instance inst instances ret add classify inst ret classification classify instance instances classification ret = classification instances length i = 0 i < instances length i++ ret i = classify instances i ret classification classify instance instance pipe through classifier s pipe then classify resulting instance classification classify obj obj instance classify instance obj classify instance pipe instance from instance obj feature selection get feature selection feature selection get per feature selection various evaluation get accuracy instance list ilist trial ilist get accuracy get precision instance list ilist index trial ilist get precision index get precision instance list ilist labeling labeling trial ilist get precision labeling get precision instance list ilist label entry trial ilist get precision label entry get recall instance list ilist index trial ilist get recall index get recall instance list ilist labeling labeling trial ilist get recall labeling get recall instance list ilist label entry trial ilist get recall label entry get f1 instance list ilist index trial ilist get f1 index get f1 instance list ilist labeling labeling trial ilist get f1 labeling get f1 instance list ilist label entry trial ilist get f1 label entry get average rank instance list ilist trial ilist get average rank outputs human readable description classifier e g list weights decision tree to out print out classifier +get get name + detailed printout not yet print print writer out out classifier +get get name + detailed printout not yet 
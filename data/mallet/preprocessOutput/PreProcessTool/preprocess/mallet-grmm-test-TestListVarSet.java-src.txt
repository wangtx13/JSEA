2006 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e test junit framework test junit framework test junit framework test suite arrays list io i o types types tests test serializable created aug 22 2005 author < a h r e f= mailto casutton edu>casutton edu< a> $ test list var set v 1 1 2007 10 22 21 37 41 exp $ test list var set test test list var set name name test equals hash variable vars = variable 4 i = 0 i < vars length i++ vars i = variable 3 universe uni = vars 0 get universe list var set c1 = list var set uni arrays list vars list var set c2 = list var set uni arrays list vars c1 equals c2 c2 equals c1 equals c1 hash c2 hash test hash hash var set variable vars = variable 2 i = 0 i < vars length i++ vars i = variable 3 universe uni = vars 0 get universe list var set c1 = list var set uni arrays list vars hash var set c2 = hash var set vars c1 equals c2 equals c1 hash c2 hash test equals variable vars = variable 4 i = 0 i < vars length i++ vars i = variable 3 universe uni = vars 0 get universe list var set = list var set uni arrays list variable vars 0 vars 3 hash var set c2 = hash var set c2 equals equals c2 test contains variable vars = variable 4 i = 0 i < vars length i++ vars i = variable 3 universe uni = vars 0 get universe list var set = list var set uni arrays list variable vars 0 vars 3 contains vars 0 !c contains vars 1 !c contains vars 2 contains vars 3 equals vars 0 get 0 equals vars 3 get 1 equals 2 size test serialization i o not found variable vars orig = variable 4 i = 0 i < vars orig length i++ vars orig i = variable 3 universe uni = vars orig 0 get universe list var set orig = list var set uni arrays list variable vars orig 0 vars orig 3 list var set = list var set test serializable clone via serialization orig universe uni = get 0 get universe variable vars = variable uni get 0 uni get 1 uni get 2 uni get 3 contains vars 0 !c contains vars 1 !c contains vars 2 contains vars 3 equals vars 0 get 0 equals vars 3 get 1 equals 2 size test add all ordering rep = 0 rep < 1000 rep++ variable vars = variable variable 2 variable 2 universe uni = vars 0 get universe list var set vs = list var set uni arrays list vars check ordering vs vars test add all ordering2 rep = 0 rep < 1000 rep++ variable vars = variable variable 2 variable 2 universe uni = vars 0 get universe list var set vs = list var set uni list vs add all arrays list vars check ordering vs vars test add all ordering3 rep = 0 rep < 1000 rep++ variable vars = variable variable 2 variable 2 universe uni = vars 0 get universe list var set vs old = list var set uni arrays list vars list var set vs = list var set vs old check ordering vs vars test intersection ordering rep = 0 rep < 1000 rep++ variable varr1 = variable variable 2 variable 2 variable 2 variable varr2 = variable varr1 0 varr1 1 universe uni = varr1 0 get universe list var set vs1 = list var set uni arrays list varr1 list var set vs2 = list var set uni arrays list varr2 var set vs inter = hash var set vs1 intersection vs2 check ordering vs inter varr2 var set vs inter2 = hash var set vs2 intersection vs1 check ordering vs inter2 varr2 test intersection ordering to hash rep = 0 rep < 1000 rep++ variable varr1 = variable variable 2 variable 2 variable 2 variable varr2 = variable varr1 0 varr1 1 universe uni = varr1 0 get universe list var set vs1 = list var set uni arrays list varr1 var set vs2 = hash var set arrays list varr2 var set vs inter = hash var set vs1 intersection vs2 check ordering vs inter varr2 var set vs inter2 = hash var set vs2 intersection vs1 check ordering vs inter2 varr2 test intersection ordering to bit rep = 0 rep < 1000 rep++ variable varr1 = variable variable 2 variable 2 variable 2 variable varr2 = variable varr1 0 varr1 1 universe uni = varr1 0 get universe list var set vs1 = list var set uni arrays list varr1 var set vs2 = bit var set uni arrays list varr2 var set vs inter = hash var set vs1 intersection vs2 check ordering vs inter varr2 var set vs inter2 = hash var set vs2 intersection vs1 check ordering vs inter2 varr2 check ordering var set vs variable vars equals vars length vs size i = 0 i < vars length i++ equals vars i vs get i test suite test suite test list var set throwable test suite suite length > 0 suite = test suite i = 0 i < length i++ suite add test test list var set i suite = test suite suite junit textui test runner run suite 
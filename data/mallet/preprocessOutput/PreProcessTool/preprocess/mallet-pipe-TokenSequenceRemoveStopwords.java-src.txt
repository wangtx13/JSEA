2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e pipe hash set list io types feature sequence bigrams types instance types token types token sequence remove tokens from token sequence in data field whose text in stopword list author andrew mc callum <a href= mailto >mccallum edu< a> token sequence remove stopwords pipe serializable xxx use a gnu trove collection instead hash set< string> stoplist = sensitive = mark deletions = hash set< string> stop list hash set< string> sl = hash set< string> i = 0 i < stopwords length i++ sl add stopwords i sl token sequence remove stopwords sensitive mark deletions stoplist = stop list sensitive = sensitive mark deletions = mark deletions token sequence remove stopwords sensitive stoplist = stop list sensitive = sensitive token sequence remove stopwords load a stoplist from a stoplist to load encoding encoding stoplist eg u t f 8 include whether to include standard english stoplist token sequence remove stopwords stoplist encoding include sensitive mark deletions ! include stoplist = hash set< string> stoplist = stop list add stop words to stoplist encoding sensitive = sensitive mark deletions = mark deletions token sequence remove stopwords set sensitive flag sensitive = flag token sequence remove stopwords set mark deletions flag mark deletions = flag token sequence remove stopwords add stop words words i = 0 i < words length i++ stoplist add words i token sequence remove stopwords remove stop words words i = 0 i < words length i++ stoplist remove words i remove whitespace separated tokens in wordlist to stoplist token sequence remove stopwords remove stop words wordlist remove stop words to wordlist add whitespace separated tokens in wordlist to stoplist token sequence remove stopwords add stop words wordlist wordlist != add stop words to wordlist to f encoding list< string> wordarray = list< string> buffered reader input = encoding == input = buffered reader reader f input = buffered reader input stream reader input stream f encoding line line = input read line != words = line split \\s+ i = 0 i < words length i++ wordarray add words i i o e illegal argument trouble reading +f wordarray to instance pipe instance carrier token sequence ts = token sequence carrier get data xxx doesn t seem so efficient perhaps have token sequence use a linked list and remove tokens from it? ? but a linked list token sequence would be quite inefficient a k m token sequence ret = token sequence token prev token = i = 0 i < ts size i++ token t = ts get i ! stoplist contains sensitive ? t get text t get text to lower xxx should we instead make and add a copy token? ret add t prev token = t mark deletions prev token != prev token set property feature sequence bigrams deletion mark t get text carrier set data ret carrier serialization serial u = 1 u r r e n t s e r i a l v e r s i o n = 2 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write sensitive out write mark deletions out write stoplist u r r e n t s e r i a l v e r s i o n 2 read input stream in i o not found = in read sensitive = in read > 0 mark deletions = in read > 1 stoplist = hash set< string> in read stopwords = a able about above according accordingly across actually after afterwards again against all allow allows almost alone along already also although always am among amongst an and another any anybody anyhow anyone anything anyway anyways anywhere apart appear appreciate appropriate are around aside ask asking associated at available away awfully b be became because become becomes becoming been before beforehand behind being believe below beside besides best better between beyond both brief but came can cannot cant cause causes certain certainly changes clearly co com come comes concerning consequently consider considering contain containing contains corresponding could course currently d definitely described despite did different does doing done down downwards during e each eg eight either elsewhere enough entirely especially et etc even ever every everybody everyone everything everywhere ex exactly example except f far few fifth first five followed following follows former formerly forth four from further furthermore g get gets getting given gives go goes going gone got gotten greetings h had happens hardly has have having he hello help hence her here hereafter hereby herein hereupon hers herself hi him himself his hither hopefully how howbeit however i ie ignored immediate in inasmuch inc indeed indicate indicated indicates inner insofar instead into inward it its itself j just k keep keeps kept know knows known l last lately later latter latterly least less lest let like liked likely little look looking looks ltd m mainly many may maybe me mean meanwhile merely might more moreover most mostly much must my myself n name namely nd near nearly necessary need needs neither never nevertheless next nine no nobody non none noone nor normally not nothing novel now nowhere o obviously off often oh ok okay old on once one ones only onto or other others otherwise ought our ours ourselves out outside over overall own p particular particularly per perhaps placed please plus possible presumably probably provides q que quite qv r rather rd re really reasonably regarding regardless regards relatively respectively right s said same saw say saying says second secondly seeing seem seemed seeming seems seen self selves sensible sent serious seriously seven several shall she should since six so some somebody somehow someone something sometime sometimes somewhat somewhere soon sorry specified specify specifying still sub such sup sure t take taken tell tends th than thank thanks thanx that thats their theirs them themselves then thence there thereafter thereby therefore therein theres thereupon these they think third thorough thoroughly those though three through throughout thru thus to together too took toward towards tried tries truly trying twice two u un unfortunately unless unlikely until unto up upon us use used useful uses using usually uucp v value various very via viz vs w want wants was way we welcome well went were what whatever when whence whenever where whereafter whereas whereby wherein whereupon wherever whether which whither who whoever whole whom whose why will willing wish within without wonder would would x y yes yet you your yours yourself yourselves z zero stop words paper abstracts paper presents discuss discusses conclude concludes based approach stopwords french added limin yao stopwords french = fut s ces ral tr arm y autres o tait dont ann apr sous ans cette politique contre leur ville fait res on deux cle v publique france te guerre sident unis mais entre aussi tat ais ses sa ont tre d pays en il tats comme am si fran pas g qu r aux ce f p ne son me avec l se ou sont il les re plus m es pr la sur que pour modifier a qui le t n au dans une par un r est e du s les en des le et l d la de 
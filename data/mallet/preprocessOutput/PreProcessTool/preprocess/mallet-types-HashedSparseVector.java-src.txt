2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e sparse yet its present values can be changed you can t however add values that were zero and missing author andrew mc callum <a href= mailto >mccallum edu< a> types hash map iterator arrays logging io types alphabet types feature sequence types vector logger property list gnu trove t hash map hashed sparse vector sparse vector serializable logger logger = logger get logger sparse vector get name t hash map index2location max index hashed sparse vector indices values capacity size copy check indices sorted remove duplicates indices values capacity size copy check indices sorted remove duplicates indices != create an empty vector hashed sparse vector 0 0 0 0 create non binary vector possibly dense feature indices or possibly sparse not hashed sparse vector feature indices values feature indices values create binary vector hashed sparse vector feature indices feature indices xxx we need to implement in feature vector subclasses constant matrix clone matrix hashed sparse vector indices values constant matrix clone matrix zeroed values != indices = indices length arraycopy indices 0 indices 0 indices length hashed sparse vector sv = hashed sparse vector indices values length values length values length share index2location trick ala indexed sparse vector index2location != sv index2location = index2location sv max index = max index sv that change values index vector index2location == indices length > 0 set index2 location set index2 location out hashed sparse vector set index2 location indices length= +indices length+ maxindex= +indices indices length 1 index2location == indices length > 0 max index = indices indices length 1 index2location = t hash map num locations index2location set value 1 i = 0 i < indices length i++ index2location put indices i i set value index value index2location == set index2 location location = index2location get index index2location contains index values location = value illegal argument trying to set value that isn t present in hashed sparse vector set value at location location value values location = value i dislike name but it s consistent dense vector cas column plus equals index value index2location == set index2 location location = index2location get index index2location contains index values location += value illegal argument trying to set value that isn t present in hashed sparse vector dot product dense vector v ret = 0 values == i = 0 i < indices length i++ ret += v value indices i i = 0 i < indices length i++ ret += values i v value indices i ret dot product sparse vector v indices length == 0 0 index2location == set index2 location ret = 0 v num locs = v num locations values == vector binary i = 0 i < v num locs i++ index = v index at location i index > max index index2location contains index ret += v value at location i i = 0 i < v num locs i++ index = v index at location i index > max index index2location contains key index ret += values index2location get index v value at location i location = index2location get index location >= 0 ret += values location v value at location i ret plus equals sparse sparse vector v factor indices length == 0 index2location == set index2 location v num locs = v num locations i = 0 i < v num locs i++ index = v index at location i index > max index index2location contains key index values index2location get index += v value at location i factor location = index2location get index location >= 0 values location += v value at location i factor plus equals sparse sparse vector v indices length == 0 index2location == set index2 location i = 0 i < v num locations i++ index = v index at location i index > max index location = index2location get index index2location contains index values location += v value at location i set all v i = 0 i < values length i++ values i = v serialization serial u = 1 history 0 == wrote out index2location probably a bad idea u r r e n t s e r i a l v e r s i o n = 1 n u l l i n t e g e r = 1 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write max index read input stream in i o not found = in read max index = in read == 0 gobble up index2location obj = in read obj != ! obj t hash map i o unexpected in de serialization +obj 
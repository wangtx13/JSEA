word net library j w n l documentation 1 1 resources wn net didion jwnl j w n l net didion jwnl j w n l net didion jwnl data index word net didion jwnl data p o s net didion jwnl data pointer type net didion jwnl data pointer utils net didion jwnl data list pointer target node list net didion jwnl data list pointer target tree net didion jwnl data relationship asymmetric relationship net didion jwnl data relationship relationship net didion jwnl data relationship relationship finder net didion jwnl data relationship relationship list net didion jwnl dictionary dictionary io input stream iterator a to demonstrate functionality j w n l examples u s a g e = examples <properties file> length != 1 out u s a g e exit 1 props = 0 initialize j w n l must be done before j w n l can be used j w n l initialize input stream props examples go ex ex print stack trace exit 1 index word a o m p l i s h index word d o g index word a t index word f u n n y index word d r o l l m o r p h p h r a s e = running away examples j w n l a o m p l i s h = dictionary get instance get index word p o s v e r b accomplish d o g = dictionary get instance get index word p o s n o u n dog a t = dictionary get instance lookup index word p o s n o u n cat f u n n y = dictionary get instance lookup index word p o s a d j e t i v e funny d r o l l = dictionary get instance lookup index word p o s a d j e t i v e droll go j w n l demonstrate morphological analysis m o r p h p h r a s e demonstrate list operation a o m p l i s h demonstrate tree operation d o g demonstrate asymmetric relationship operation d o g a t demonstrate symmetric relationship operation f u n n y d r o l l demonstrate morphological analysis phrase j w n l running away kind a hard because it involves two words that are joined a hyphen and one words not stemmed so we have to both remove hyphen and stem running before we get to an entry that in word net out base form \ + phrase + \ + dictionary get instance lookup index word p o s v e r b phrase demonstrate list operation index word word j w n l get all hypernyms parents first sense <var>word< var> pointer target node list hypernyms = pointer utils get instance get direct hypernyms word get sense 1 out direct hypernyms \ + word get lemma + \ hypernyms print demonstrate tree operation index word word j w n l get all hyponyms children first sense <var>word< var> pointer target tree hyponyms = pointer utils get instance get hyponym tree word get sense 1 out hyponyms \ + word get lemma + \ hyponyms print demonstrate asymmetric relationship operation index word start index word end j w n l to find a relationship between first sense <var>start< var> and first sense <var>end< var> relationship list list = relationship finder get instance find relationships start get sense 1 end get sense 1 pointer type h y p e r n y m out hypernym relationship between \ + start get lemma + \ and \ + end get lemma + \ iterator itr = list iterator itr has next relationship itr next get node list print out parent index + asymmetric relationship list get 0 get parent index out depth + relationship list get 0 get depth demonstrate symmetric relationship operation index word start index word end j w n l find all synonyms that <var>start< var> and <var>end< var> have in relationship list list = relationship finder get instance find relationships start get sense 1 end get sense 1 pointer type s i m i l a r t o out synonym relationship between \ + start get lemma + \ and \ + end get lemma + \ iterator itr = list iterator itr has next relationship itr next get node list print out depth + relationship list get 0 get depth 
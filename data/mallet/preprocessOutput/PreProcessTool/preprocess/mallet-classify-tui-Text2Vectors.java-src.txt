2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e classify tui list logging regex io nio charset charset pipe pipe iterator types convert document files into vectors a persistent instance list author andrew mc callum <a href= mailto >mccallum edu< a> text2 vectors logger logger = logger get logger text2 vectors get name token regex = \\p l \\p l \\p p +\\p l command option spaced strings dirs = command option spaced strings text2 vectors input d i r directories containing text files to be classified one directory per command option output = command option text2 vectors output f i l e text vectors write instance list to using indicates stdout command option use pipe from vectors = command option text2 vectors use pipe from f i l e text vectors use pipe and alphabets from a previously created vectors + allows creation example a test set vectors that are + compatible a previously created set training vectors command option preserve = command option text2 vectors preserve t r u e| f a l s e not force all strings to lowercase command option spaced strings replacement files = command option spaced strings text2 vectors replacement files f i l e f i l e files containing replacements one per line a b tab replaces a b a b replaces a b a b command option spaced strings deletion files = command option spaced strings text2 vectors deletion files f i l e f i l e files containing strings to delete after replacements but before tokenization ie multiword stop command option remove stop words = command option text2 vectors remove stopwords t r u e| f a l s e remove a list english \ stop words\ from text command option stoplist = command option text2 vectors stoplist f i l e instead list read stop words from a one per line implies remove stopwords command option extra stopwords = command option text2 vectors extra stopwords f i l e read whitespace separated words from and add them to either + english stoplist or list specified stoplist command option stop pattern = command option text2 vectors stop pattern f i l e read regular expressions from a one per line tokens matching these regexps will be removed command option skip header = command option text2 vectors skip header t r u e| f a l s e in each document remove text occurring before a blank line + useful removing email or use net headers command option skip html = command option text2 vectors skip html t r u e| f a l s e remove text occurring inside < > in h t m l or s g m l command option binary features = command option text2 vectors binary features t r u e| f a l s e features will be binary command option gram sizes = command option text2 vectors gram sizes i n t e g e r i n t e g e r 1 include among features all n grams sizes specified + example to get all unigrams and bigrams use gram sizes 1 2 + option occurs after removal stop words removed command option keep sequence = command option text2 vectors keep sequence t r u e| f a l s e data will be a feature sequence rather than a feature vector command option keep sequence bigrams = command option text2 vectors keep sequence bigrams t r u e| f a l s e data will be a feature sequence bigrams rather than a feature vector command option save text in source = command option text2 vectors save text in source t r u e| f a l s e save original text document in source command option from bean pipe = command option from bean text2 vectors pipe pipe constructor constructor a pipe to be run soon input becomes a sequence command option from bean token pipe = command option from bean text2 vectors token pipe pipe constructor constructor a pipe to be run soon input becomes a token sequence command option from bean feature vector pipe = command option from bean text2 vectors fv pipe pipe constructor constructor a pipe to be run soon input becomes a feature vector command option encoding = command option text2 vectors encoding s t r i n g charset charset display name character encoding input command option token regex = command option text2 vectors token regex r e g e x token regex regular expression used tokenization + example \ \\p l \\p n +| \\p p +\ unicode letters numbers and underscore o r all punctuation command option print output = command option text2 vectors print output t r u e| f a l s e print a representation processed data + to standard output option intended debugging not found i o process command line options command option set summary text2 vectors a tool creating instance lists feature vectors or feature sequences from text documents command option process text2 vectors dirs = command option process text2 vectors print some helpful messages cases length == 0 command option get list text2 vectors print usage exit 1 dirs value length == 0 illegal argument you must include input d i r1 d i r2 in order to specify a + list directories containing documents each remove prefix from all input directories prefix index = strings prefix index dirs value logger info labels = directories = dirs value length i = 0 i < dirs value length i++ directories i = dirs value i prefix index < dirs value length logger info +class dirs value i substring prefix index logger info +class dirs value i pipe instance pipe instance list previous instance list = use pipe from vectors was invoked previous instance list = instance list load use pipe from vectors value instance pipe = previous instance list get pipe build a pipe create a list pipes that will be added to a serial pipes later list< pipe> pipe list = list< pipe> convert target into a numeric index into a label alphabet pipe list add target2 label data field currently a filename save it source pipe list add save data in source set data to s contents data now a pipe list add input2 sequence encoding value optionally save text to source not recommended memory scarce save text in source was invoked pipe list add save data in source allow user to specify an arbitrary pipe that operates on strings pipe was invoked pipe list add pipe pipe value remove all content before first empty line useful email and usenet news posts skip header value pipe list add subsequence subsequence s k i p h e a d e r remove h t m l tags suitable s g m l and xml skip html value pipe list add sequence remove h t m l replacements ! preserve value pipe list add sequence lowercase replacement files value != || deletion files value != n gram preprocessor preprocessor = n gram preprocessor replacement files value != filename replacement files value preprocessor load replacements filename deletion files value != filename deletion files value preprocessor load deletions filename pipe list add preprocessor tokenize input first compile tokenization pattern pattern token pattern = keep sequence bigrams value we not want to record bigrams across punctuation so we need to keep non word tokens token pattern = sequence lexer l e x n o n w h i t e s p a e l a s s e s otherwise to compile regular expression pattern token pattern = pattern compile token regex value pattern syntax pse illegal argument token regular expression + token regex value + was invalid + pse get message add tokenizer pipe list add sequence2 token sequence token pattern allow user to specify an arbitrary pipe that operates on token sequence token pipe was invoked pipe list add pipe token pipe value keep sequence bigrams value remove non word tokens but record fact that they were there pipe list add token sequence remove non alpha stopword removal stoplist was invoked user specified a list token sequence remove stopwords stopword filter = token sequence remove stopwords stoplist value encoding value t include list keep sequence bigrams value extra stopwords was invoked stopword filter add stop words extra stopwords value pipe list add stopword filter remove stop words value user did not specify a list so use built in english list possibly adding extra words token sequence remove stopwords stopword filter = token sequence remove stopwords keep sequence bigrams value extra stopwords was invoked stopword filter add stop words extra stopwords value pipe list add stopword filter stop pattern was invoked token sequence remove stop patterns stop pattern filter = token sequence remove stop patterns stop pattern value pipe list add stop pattern filter gram sizes an value 1 check we have a non value ! gram sizes value length == 1 gram sizes value 0 == 1 pipe list add token sequence n grams gram sizes value so far we have a sequence token that contain values look these up in an alphabet and store ids features instead strings keep sequence bigrams value pipe list add token sequence2 feature sequence bigrams pipe list add token sequence2 feature sequence many applications we not need to preserve sequence features only number times times a feature occurs ! keep sequence value || keep sequence bigrams value pipe list add feature sequence2 augmentable feature vector binary features value allow users to specify an arbitrary pipe that operates on feature vectors feature vector pipe was invoked pipe list add pipe feature vector pipe value print output value pipe list add print input and target instance pipe = serial pipes pipe list instance list instances = instance list instance pipe remove prefix = instances add thru pipe iterator directories iterator s t a r t i n g d i r e t o r i e s remove prefix write vector output stream oos output value to equals oos = output stream out oos = output stream output stream output value oos write instances oos close rewrite vector used source pipe in we changed alphabet ! use pipe from vectors was invoked logger info rewriting previous instance list = + previous instance list get pipe get instance oos = output stream output stream use pipe from vectors value oos write previous instance list oos close 
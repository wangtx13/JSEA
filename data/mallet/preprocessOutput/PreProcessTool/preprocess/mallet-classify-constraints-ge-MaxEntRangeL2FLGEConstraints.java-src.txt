2011 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e classify constraints ge gnu trove t list gnu trove t list gnu trove t hash map list bit set hash map types feature vector types instance types instance list expectation constraint use g e penalizes l 2^2 difference from zero penalty region lower upper multiple constraints are grouped together here to make things more efficient author gregory druck max ent range l2 f l g e constraints max ent g e constraint maps between input feature indices and constraints use values normalize num features num labels t hash map< max ent l2 ind g e constraint> constraints cache set constrained features that fire at last feature vector in preprocess call t list index cache t list value cache max ent range l2 f l g e constraints num features num labels use values normalize num features = num features num labels = num labels use values = use values normalize = normalize constraints = t hash map< max ent l2 ind g e constraint> index cache = t list value cache = t list add constraint fi lower upper weight !constraints contains key fi constraints put fi max ent l2 ind g e constraint constraints get fi add lower upper weight bit set pre process instance list data count ii = 0 fi feature vector fv bit set bit set = bit set data size instance instance data weight = data get instance weight instance fv = feature vector instance get data loc = 0 loc < fv num locations loc++ fi = fv index at location loc constraints contains key fi use values constraints get fi count += weight fv value at location loc constraints get fi count += weight bit set set ii ii++ feature label regularization constraints contains key num features bit set set ii constraints get num features count += weight bit set pre process feature vector input index cache reset quick use values value cache reset quick fi cache constrained input features loc = 0 loc < input num locations loc++ fi = input index at location loc constraints contains key fi index cache add fi use values value cache add input value at location loc feature label regularization constraints contains key num features index cache add num features use values value cache add 1 get composite constraint feature value feature vector input label value = 0 i = 0 i < index cache size i++ use values value += constraints get index cache get quick i get gradient contribution label value cache get quick i value += constraints get index cache get quick i get gradient contribution label value compute expectations feature vector input dist weight pre process input = 0 < num labels li++ p = weight dist i = 0 i < index cache size i++ use values constraints get index cache get quick i expectation += p value cache get quick i constraints get index cache get quick i expectation += p get value value = 0 0 fi constraints keys max ent l2 ind g e constraint constraint = constraints get fi constraint count > 0 0 value due to current constraint label index = 0 label index < num labels ++label index value = constraint get value label index ! na n value ! infinite value value zero expectations fi constraints keys constraints get fi expectation = constraints get fi get num constrained labels max ent l2 ind g e constraint index count list< double> lower list< double> upper list< double> weights hash map< integer> label map expectation max ent l2 ind g e constraint lower = list< double> upper = list< double> weights = list< double> label map = hash map< integer> index = 0 count = 0 add label lower upper weight lower add lower upper add upper weights add weight label map put label index index++ increment expectation value label map contains key i = label map get expectation i += value get value label map contains key i = label map get count != 0 ex normalize ex = expectation i count ex = expectation i ex < lower get i weights get i math pow lower get i ex 2 ex > upper get i weights get i math pow upper get i ex 2 0 get num constrained labels index get gradient contribution label map contains key i = label map get count != 0 normalize ex = expectation i count ex < lower get i 2 weights get i lower get i count expectation i count count ex > upper get i 2 weights get i upper get i count expectation i count count ex = expectation i ex < lower get i 2 weights get i lower get i expectation i ex > upper get i 2 weights get i upper get i expectation i 0 
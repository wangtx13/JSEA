types iterator development and not sure we actually want to have a list it seems quite dangerous and prone deprecated chained instance iterator iterator< instance> iterator< instance> source chained instance iterator target both source and target may be chained instance iterator iterator< instance> source chained instance iterator target source = source instance next has next remove illegal state iterator< instance> does not support remove source iterator sends message to tell iterator that even though source has next may have before it would now note that not all iterators handle strange situation in which an iterator indicates that has next but then later has next becomes in particular iterator has also has next to its consumer but now ready to provide more since its source now has next consumer may not properly handle situation one possible solution create a chained iterator and be more strict about type checking all sources and targets these kinds iterators akm also consider passing source an argument here source now has next iterator< instance> source target != target source now has next 
types pipe pipe iterator logging io reads through two files data and metadata tokenizing metadata use a label vector d b bulk loader logger logger = logger get logger d b bulk loader get name command option spaced strings input files = command option spaced strings d b bulk loader input f i l e f i l e containing data one instance per line command option output database = command option d b bulk loader output s t r i n g db write instance list to database command option preserve = command option d b bulk loader preserve t r u e| f a l s e not force all strings to lowercase command option vocabulary = command option d b bulk loader vocabulary f i l e read newline separated words from command option spaced strings replacement files = command option spaced strings d b bulk loader replacement files f i l e f i l e files containing replacements one per line a b tab replaces a b a b replaces a b a b command option spaced strings deletion files = command option spaced strings d b bulk loader deletion files f i l e f i l e files containing strings to delete after replacements but before tokenization ie multiword stop command option stoplist = command option d b bulk loader stoplist f i l e read newline separated words from and remove them from text command option keep sequence = command option d b bulk loader keep sequence t r u e| f a l s e data will be a feature sequence rather than a feature vector command option prune count = command option d b bulk loader prune count n 0 reduce features to those that occur more than n times read data from input files then write all words that not occur <tt>prune count value< tt> times or more to pruned word pruned tokenizer tokenizer that will be used to write instances generate stoplist simple tokenizer pruned tokenizer n gram preprocessor preprocessor i o list< pipe> pipes = list< pipe> alphabet alphabet = alphabet simple tokenizer st = pruned tokenizer deep clone list2 feature sequence sl2fs = list2 feature sequence alphabet feature count pipe feature counter = feature count pipe alphabet pipes add preprocessor pipes add st pipes add sl2fs pipes add feature counter pipe serial pipe = serial pipes pipes filename input files value logger info pruning from + filename csv iterator reader = csv iterator reader filename ? \ ? \ 3 2 1 iterator< instance> iterator = serial pipe iterator from reader count = 0 we aren t really interested in instance itself just total feature counts iterator has next count++ count % 100000 == 0 out count iterator next feature counter add pruned words to stoplist pruned tokenizer prune count value write instance list list< pipe> pipes pipe serial pipe = serial pipes pipes d b instance store saver = d b instance store output database value filename input files value logger info importing from + filename csv iterator reader = csv iterator reader filename ? \ ? \ 3 2 1 saver save instances serial pipe iterator from reader saver save alphabets serial pipe get data alphabet serial pipe get target alphabet saver cleanup logger info starting process command line options command option set summary d b bulk loader efficient tool importing large amounts text and saving to an embedded database command option process d b bulk loader n gram preprocessor preprocessor = n gram preprocessor replacement files value != filename replacement files value out including replacements from + filename preprocessor load replacements filename deletion files value != filename deletion files value out including deletions from + filename preprocessor load deletions filename vocabulary value != alphabet alphabet = alphabet factory load from vocabulary value alphabet stop growth logger info loaded alphabet size + alphabet size list< pipe> pipes = list< pipe> pipes add preprocessor pipes add fixed vocab tokenizer alphabet write instance list pipes simple tokenizer tokenizer = simple tokenizer stoplist value prune count value > 0 generate stoplist tokenizer preprocessor list< pipe> pipes = list< pipe> alphabet alphabet = alphabet sequence lowercase csl = sequence lowercase list2 feature sequence sl2fs = list2 feature sequence alphabet pipes add preprocessor pipes add tokenizer pipes add sl2fs write instance list pipes 
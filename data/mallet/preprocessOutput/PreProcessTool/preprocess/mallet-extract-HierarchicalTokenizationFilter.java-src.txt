2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e extract regex pattern types label types label alphabet types sequence tokenization filter that will create nested spans based on a hierarchical labeling data labels should be form <tt> l b l1 | l b lk < tt> example <pre> a a| b a| b| a| b| a| b a a w1 w2 w3 w4 w5 w6 w7 < pre> will result in labeled spans like <tt> lt a>w1 lt b>w2 lt c>w3 w4 lt c> w5 lt b> w6 w7 lt a>< tt> also labels form <tt> lt b field>< tt> will force a instance field to begin even it already active and prefixes <tt> i < tt> are ignored so you can use b i o labeling created nov 12 2004 author < a h r e f= mailto casutton edu>casutton edu< a> $ hierarchical tokenization filter v 1 1 2007 10 22 21 37 44 exp $ hierarchical tokenization filter tokenization filter pattern ignore pattern = hierarchical tokenization filter hierarchical tokenization filter pattern ignore pattern ignore pattern = ignore pattern labeled spans construct labeled spans label alphabet dict document label background tag tokenization input sequence seq labeled spans labeled = labeled spans document add spans from tags labeled input seq dict background tag labeled tag start start label label tag start start label label start = start label = label add spans from tags labeled spans labeled tokenization input sequence tags label alphabet dict label background tag i = 0 linked list open tags = linked list last tag split = 0 i < tags size label tag = dict lookup label tags get i to tag split = split tag tag num to close = compare split tags tag split last tag split close all that need to be closed num to close > 0 tag start tag start = tag start open tags remove last add labeled span labeled input tag start i background tag num to close open all that need to be opened tidx = open tags size tidx < tag split length tidx++ open tags add tag start i dict lookup label tag split tidx last tag split = tag split i++ close all remaining tags !open tags empty tag start tag start = tag start open tags remove last add labeled span labeled input tag start i background tag add labeled span labeled spans labeled tokenization input tag start tag start end label background tag span span = input subspan tag start start end label split tag = tag start label labeled add labeled span span split tag split tag == background tag compare split tags tag split last tag split idx = last tag split length 1 idx >= 0 idx idx >= tag split length tag = tag split idx begin name tag matches last tag split idx tag num to close = last tag split length idx 1 sanity check idx >= 0 !matches tag split idx last tag split idx illegal argument tags t match idx num to close matches str1 str2 trim str1 equals trim str2 trim name begin name name || inside name name name substring 2 name split tag label tag name = tag to list split1 = list arrays list name split \\| iterator it = split1 iterator it has next str = it next ignore pattern != ignore pattern matcher str matches it remove split1 to 0 begin name name name starts b inside name name name starts i 
2002 m a l l e t m achine languag e ~mccallum 1 0 furtherinformation ` l i e n s e types io serializable list list no such element types instance list an iterator which splits an link instance list into n folds and iterates over folds use in n fold cross validation each iteration list 0 contains a link instance list n 1 folds typically used training and list 1 contains an link instance list 1 fold typically used validation uses link multi instance list to avoid creating a link instance list each iteration t o d o currently completely random an improvement would be to provide a stratified random multi instance list instance list author aron culotta <a href= mailto culotta >culotta edu< a> cross validation iteratorimplements iterator< instance list > serializable serial u = 234516468015114991 l nfolds instance list folds index constructs a n fold cross validation iterator ilist instance list to split into folds and iterate over nfolds number folds to split instance list into r source randomness to use in shuffling cross validation iterator instance list ilist nfolds random r nfolds = nfolds nfolds > 0 nfolds + nfolds index = 0 fraction = 1 nfolds proportions = nfolds i=0 i < nfolds i++ proportions i = fraction folds = ilist split r proportions constructs a n fold cross validation iterator ilist instance list to split into folds and iterate over nfolds number folds to split instance list into cross validation iterator instance list ilist nfolds ilist nfolds random current time millis calls clear on each fold it recommended that be always be called when iterator no longer needed so that implementations instance list such paged instance list can clean up any temporary data they may have outside j v m clear instance list list folds list clear has next index < nfolds next training testing split a two element link instance list where <code> instance list 0 < code> contains n 1 folds training and <code> instance list 1 < code> contains 1 fold testing instance list next split !has next no such element instance list ret = instance list 2 folds length == 1 ret 0 = folds 0 ret 1 = folds 0 instance list training = instance list folds length 1 j = 0 i = 0 i < folds length i++ i == index training j++ = folds i ret 0 = multi instance list training ret 1 = folds index index++ ret next training testing split a two element link instance list where <code> instance list 0 < code> contains <code>num training folds< code> folds training and <code> instance list 1 < code> contains n <code>num training folds< code> folds testing instance list next split num train folds !has next no such element list< instance list> training set = list< instance list> list< instance list> test set = list< instance list> train on folds index index+num train folds test on rest i = 0 i < folds length i++ foldno = index + i % folds length i < num train folds training set add folds foldno test set add folds foldno instance list ret = instance list 2 ret 0 = multi instance list training set ret 1 = multi instance list test set index++ ret next training testing split iterator#next a two element link instance list where <code> instance list 0 < code> contains n 1 folds training and <code> instance list 1 < code> contains 1 fold testing instance list next next split remove unsupported operation 
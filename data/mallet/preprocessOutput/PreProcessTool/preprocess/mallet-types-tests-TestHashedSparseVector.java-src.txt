2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> types tests junit framework test junit framework test junit framework test suite io io i o types dense vector types hashed sparse vector types sparse vector utils test hashed sparse vector test test hashed sparse vector name name dbl1 = 1 2 3 4 5 dbl2 = 1 1 5 2 1 1 dbl3 = 2 0 2 5 3 0 4 7 3 5 3 6 0 0 0 0 0 0 0 0 0 0 idxs = 3 5 7 13 15 hashed sparse vector s1 = hashed sparse vector idxs dbl1 dbl1 length dbl1 length hashed sparse vector s2 = hashed sparse vector idxs dbl2 dbl2 length dbl2 length sparse vector d1 = sparse vector dbl3 check answer hashed sparse vector actual ans equals wrong number locations ans length actual num locations i = 0 i < actual num locations i++ equals value incorrect at location +i+ ans i actual value at location i 0 0 test plus equals hashed sparse vector s = hashed sparse vector s1 clone matrix s plus equals sparse s2 2 0 check answer s 3 5 7 6 7 hashed sparse vector s2p = hashed sparse vector 13 0 8 s plus equals sparse s2p 1 0 check answer s 3 5 7 6 8 7 hashed sparse vector s3p = hashed sparse vector 14 0 8 s plus equals sparse s3p 1 0 check answer s 3 5 7 6 8 7 verify s unchanged hashed sparse vector s4 = hashed sparse vector 7 14 15 0 2 0 8 1 2 s plus equals sparse s4 1 0 check answer s 3 5 7 2 6 8 8 2 hashed sparse vector s5 = hashed sparse vector 7 0 2 s5 plus equals sparse s1 i = 0 i < s5 num locations i++ equals 7 s5 index at location i equals 3 2 s5 value at location i 0 0 hashed sparse vector s6 = hashed sparse vector 7 0 2 s6 plus equals sparse s1 3 5 i = 0 i < s6 num locations i++ equals 7 s6 index at location i equals 10 7 s6 value at location i 0 0 test plus equals after clone s1 index vector hashed sparse vector s = hashed sparse vector s1 clone matrix zeroed s plus equals sparse s1 s plus equals sparse s2 2 0 check answer s 3 5 7 6 7 test dot product hashed sparse vector t1 = hashed sparse vector 7 0 2 equals 0 6 t1 dot product s1 0 00001 equals 0 6 s1 dot product t1 0 00001 equals 19 0 s1 dot product s2 0 00001 equals 19 0 s2 dot product s1 0 00001 equals 11 9 s1 dot product d1 0 00001 equals 10 1 s2 dot product d1 0 00001 test increment value hashed sparse vector s = hashed sparse vector s1 clone matrix s increment value 5 0 75 ans = 1 2 75 3 4 5 i = 0 i < s num locations i++ s value at location i == ans i test set value hashed sparse vector s = hashed sparse vector s1 clone matrix s set value 5 0 3 ans = 1 0 3 3 4 5 i = 0 i < s num locations i++ s value at location i == ans i idx2 = 3 7 12 15 18 test binary vector hashed sparse vector binary1 = hashed sparse vector idxs idxs length idxs length hashed sparse vector binary2 = hashed sparse vector idx2 idx2 length idx2 length equals 3 binary1 dot product binary2 0 0001 equals 3 binary2 dot product binary1 0 0001 equals 15 0 binary1 dot product s1 0 0001 equals 15 0 s1 dot product binary1 0 0001 equals 9 0 binary2 dot product s1 0 0001 equals 9 0 s1 dot product binary2 0 0001 hashed sparse vector dbl vec = hashed sparse vector s1 clone matrix dbl vec plus equals sparse binary1 check answer dbl vec 2 3 4 5 6 hashed sparse vector dbl vec2 = hashed sparse vector s1 clone matrix dbl vec2 plus equals sparse binary2 check answer dbl vec2 2 2 4 4 6 test clone matrix zeroed hashed sparse vector s = hashed sparse vector s1 clone matrix zeroed i = 0 i < s num locations i++ s value at location i == 0 0 s index at location i == idxs i test serializable write out sparse vector s1 hashed sparse vector s2 = hashed sparse vector test serializable clone via serialization s1 equals s1 num locations s2 num locations loc = 0 loc < s1 num locations loc++ equals s1 value at location loc s2 value at location loc 0 001 tests index2location getting screwed up when old v 1 3 instances are de serialized test plus equals from saved i o not found hashed sparse vector s1 = hashed sparse vector utils read old sv hashed sparse vector s2 = hashed sparse vector 1 1 0 s1 plus equals sparse s2 1 0 equals 1 0 s1 value 0 1e 5 equals 0 0 s1 value 1 1e 5 a hashed sparse vector from cvs 1 3 it was saved save old sv below old sv = test resources base types hashed sv old ser save old sv hashed sparse vector sv = hashed sparse vector 0 2 1 0 2 0 sv index vector utils write old sv sv test suite test suite test hashed sparse vector set up save old sv junit textui test runner run suite 
2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e types gnu trove t hash map list list arrays io inference utils types matrixn types sparse matrixn randoms an assignment to a bunch variables <p > note that outcomes are always integers you want them to be something then variables all have outcome alphabets example link variable#lookup outcome <p > created tue oct 21 15 11 11 2003 author <a href= mailto casutton > charles sutton< a> $ assignment v 1 1 2007 10 22 21 37 44 exp $ assignment factor serializable maps from vars => indicies t hash map var2idx list each represents one configuration list values scale = 1 0 creates an empty assignment assignment hash var set var2idx = t hash map values = list assignment variable var outcome add row variable var outcome assignment variable var outcome add row variable var outcome creates an assignemnt given variables assignment variable vars outcomes var2idx = t hash map vars length values = list add row vars outcomes creates an assignemnt given variables assignment variable vars outcomes var2idx = t hash map vars length values = list add row vars outcomes creates an assignemnt given variables assignment list vars outcomes var2idx = t hash map vars size values = list add row variable vars to variable 0 outcomes creates an assignment over all variables in a model assignment will assign outcomes i to variable <tt>mdl get i < tt> assignment factor graph mdl outcomes var2idx = t hash map mdl num variables values = list variable vars = variable mdl num variables i = 0 i < vars length i++ vars i = mdl get i add row vars outcomes union two assignments that value a variable in assignment will be specified in one given assignments <p> assignments share variables value in assignment those variables in undefined assn1 one assignment assn2 another assignment a newly created assignment assignment union assignment assn1 assignment assn2 assignment ret = assignment var set vars = hash var set vars add all assn1 vars vars add all assn2 vars variable varr = vars to variable assn1 num rows == 0 assignment assn2 duplicate assn2 num rows == 0 assignment assn1 duplicate assn1 num rows != assn2 num rows illegal argument number rows not equal ri = 0 ri < assn2 num rows ri++ row = vars size vi = 0 vi < vars size vi++ variable var = varr vi !assn1 contains var var row vi = assn2 get var !assn2 contains var var row vi = assn1 get var val1 = assn1 get var val2 = assn2 get var !val1 equals val2 illegal argument assignments t match on intersection a s s n1 +var+ = +val1+ a s s n2 +var+ = +val2 row vi = val1 ret add row varr row ret a assignment which only assigns values to those variabes in a given clique assn a large assignment var set which variables to restrict assignment o a newly created assignment deprecated marginalize assignment restriction assignment assn var set var set assignment assn marginalize var set assignment get row ridx assignment assn = assignment assn var2idx = t hash map var2idx clone assn vars = unmodifiable var set vars assn add row values get ridx assn add row variable vars values add row vars box values add row variable vars values add row vars box values add row variable vars values check assignments match vars add row values add row row row length != num variables illegal argument wrong number variables when adding to +this+ was values add row add row assignment other check assignments match other ridx = 0 ridx < other num rows ridx++ other row = other values get ridx row = other row length vi = 0 vi < row length vi++ variable var = get variable vi row vi = other get ridx var add row row check assignments match assignment other num variables == 0 set variables other vars to variable num variables != other num variables illegal argument attempt to add row non matching variables + has vars + var set + other has vars + other var set vi = 0 vi < num variables vi++ variable var = get variable vi !other contains var var illegal argument attempt to add row non matching variables check assignments match variable vars num rows == 0 set variables vars check variables vars check variables variable vars i = 0 i < vars length i++ variable v1 = vars i variable v2 = variable vars get i v1 != v2 illegal argument attempt to add row incompatible variables set variables variable varr vars add all arrays list varr i = 0 i < varr length i++ variable v = varr i var2idx put v i box values ret = values length i = 0 i < ret length i++ ret i = values i ret box values ret = values length i = 0 i < ret length i++ ret i = values i ret num rows values size get variable var num rows != 1 illegal argument attempt to call get no row specified +this get 0 var get variable var num rows != 1 illegal argument attempt to call get no row specified +this get 0 var get variable var num rows != 1 illegal argument attempt to call get no row specified +this get 0 var value var in assigment get ridx variable var idx = col var var idx == 1 index out bounds assignment does not give a value variable + var row = values get ridx = row idx value value var in assigment will be removed when we to 1 5 get ridx variable var idx = col var var idx == 1 index out bounds assignment does not give a value variable + var row = values get ridx dbl = row idx dbl value get ri variable var row = values get ri ci = col var var ci < 0 illegal argument variable +var+ does not in assignment row ci variable get variable i variable vars get i all variables which are assigned to variable get vars variable vars to variable 0 size num variables assignment make from single index var set clique idx n = clique size variable vars = clique to variable idxs = n szs = n compute sizes i = 0 i < n i++ variable var = vars i szs i = var get num outcomes matrixn single to indices idx idxs szs assignment vars idxs converts assignment into a unique all different assignments to same variables are guaranteed to have unique integers range index will be between 0 inclusive and m exclusive where m product all cardinalities all variables in assignment an single index nr = num rows nr == 0 1 nr > 1 illegal argument no row specified single index 0 check single row num rows != 1 illegal argument no row specified single index row these could be cached szs = num variables i = 0 i < num variables i++ variable var = variable vars get i szs i = var get num outcomes idxs = to row matrixn single index szs idxs num variables vars size to ridx idxs = num variables row = values get ridx i = 0 i < row length i++ val = row i idxs i = val value idxs to ridx idxs = num variables row = values get ridx i = 0 i < row length i++ val = row i idxs i = val value idxs factor duplicate assignment ret = assignment ret vars = hash var set vars ret var2idx = t hash map var2idx clone ret values = list values size ri = 0 ri < values size ri++ vals = values get ri ret values add vals clone ret scale = scale ret dump dump print writer output stream writer out dump print writer out out print a s s i g n m e n t out var set vi = 0 vi < var2idx size vi++ variable var = vars get vi out print var out print out ri = 0 ri < num rows ri++ vi = 0 vi < var2idx size vi++ variable var = vars get vi obj = get ri var out print obj out print out dump numeric i = 0 i < var2idx size i++ variable var = variable vars get i outcome = get var out var + + outcome assignment specifies a value <tt>var< tt> contains var variable var idx = col var var idx != 1 set value variable var value check single row set value 0 var value set value ridx variable var value ci = col var var row = values get ridx row ci = value set ridx variable var value ci = col var var row = values get ridx row ci = value col var variable var add var2idx contains key var var2idx get var add add var var 1 add var variable var ci = vars size vars add var var2idx put var ci expand all rows i = 0 i < num rows i++ old val = values get i val = ci+1 arraycopy old val 0 val 0 ci values set i val ci set row ridx assignment other check assignments match other row = other values get ridx values set ridx row clone set row ridx vals values set ridx box vals factor extract max internal var set var set table extract max var set lookup value internal assn idx val = 0 ri = 0 ri < num rows ri++ single index ri == assn idx val++ val scale factor marginalize internal var set vars to keep assignment ret = assignment variable vars = vars to keep to variable ri = 0 ri < num rows ri++ row = vars length vi = 0 vi < vars to keep size vi++ variable var = vars to keep get vi row vi = get ri var ret add row vars row ret scale = scale ret almost equals factor p epsilon table almost equals p epsilon na n to change body use | settings | templates factor normalize scale = 1 0 num rows assignment sample randoms r ri = r next num rows vals = values get ri assignment assn = assignment variable varr = variable vars to variable num variables assn add row varr vals assn dump to writer writer = writer dump print writer writer writer to todo think about semantics factor slice assignment assn unsupported operation table factor table variable varr = variable vars to variable 0 idxs = num rows vals = num rows ri = 0 ri < num rows ri++ idxs ri = single index ri vals ri ++ sparse matrixn matrix = sparse matrixn utils to sizes varr idxs vals table factor varr matrix a list single row assignments one each row in assignment list list list lst = list num rows ri = 0 ri < num rows ri++ lst add get row ri lst assignment sub assn start end assignment other = assignment ri = start ri < end ri++ other add row get row ri other get column variable x1 ret = num rows ri = 0 ri < ret length ri++ ret ri = get ri x1 ret serial u = 1 s e r i a l v e r s i o n = 2 read input stream in i o not found in read = in read num variables = in read var2idx = t hash map num variables vi = 0 vi < num variables vi++ variable var = variable in read var2idx put var vi num rows = in read values = list num rows ri = 0 ri < num rows ri++ row = in read values add row scale = >= 2 ? in read 1 0 write output stream out i o out write out write s e r i a l v e r s i o n out write num variables vi = 0 vi < num variables vi++ out write get variable vi out write num rows ri = 0 ri < num rows ri++ row = values get ri out write row out write scale 
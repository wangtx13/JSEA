arrays text number format randoms types tools working multivariate normal distributions m v normal simple cholesky decomposition no checks on squareness symmetricality or positive definiteness follows from j a m a fairly closely <p> l such that l l = a and l lower triangular cholesky input num rows initialize result note that sets all elements to 0 result = input length sum row squared = 0 0 dot product = 0 0 each off diagonal cell l jk in result we need an index into jth row and kth row these are therefore both really row offsets but one corresponds to beginning row th row and other to beginning column th row row offset = 0 col offset = 0 row = 0 row < num rows row++ sum row squared = 0 0 row offset = row num rows col = 0 col < row col++ dot product = 0 0 col offset = col num rows i = 0 i < col i++ dot product += result row offset + i result col offset + i result row offset + col = input row offset + col dot product result col offset + col sum row squared += result row offset + col result row offset + col now diagonal element result row offset + row = math sqrt input row offset + row sum row squared result band cholesky input num rows initialize result note that sets all elements to 0 result = input length sum row squared = 0 0 dot product = 0 0 each off diagonal cell l jk in result we need an index into jth row and kth row these are therefore both really row offsets but one corresponds to beginning row th row and other to beginning column th row row offset = 0 col offset = 0 first non zero row = 0 row < num rows row++ sum row squared = 0 0 row offset = row num rows first non zero = row col = 0 col < row col++ first non zero == row input row offset + col == 0 first non zero = col dot product = 0 0 col offset = col num rows i = first non zero i < col i++ dot product += result row offset + i result col offset + i result row offset + col = input row offset + col dot product result col offset + col sum row squared += result row offset + col result row offset + col now diagonal element result row offset + row = math sqrt input row offset + row sum row squared result testing band cholesky factorization band matrix root dim bandwidth result = dim dim row = 0 row < dim row++ row offset = row dim col = math max 0 row bandwidth + 1 col <= row col++ result row offset + col = 1 0 result sample a multivariate normal from a precision matrix ie inverse covariance matrix next m v normal mean precision randoms random next m v normal cholesky mean cholesky precision mean length random next m v normal cholesky mean precision lower triangular randoms random n = mean length initialize vector z to standard normals n b using same z and x result = n i = 0 i < n i++ result i = random next gaussian now solve trans l x = z using back substitution inner product i = n 1 i >= 0 i inner product = 0 0 j = i+1 j < n j++ cholesky decomp got us precision lower triangular triangular matrix but we really want transpose inner product += result j precision lower triangular n j + i result i = result i inner product precision lower triangular n i + i i = 0 i < n i++ result i += mean i result sample a vector x from n m l l <sup> 1< sup> such that sum i x i = 0 next zero sum m v normal cholesky mean precision lower triangular randoms random n = mean length result = next m v normal cholesky mean precision lower triangular random sum = 0 0 i = 0 i < n i++ sum += result i get sum each row inverse precision matrix solving two triangular systems l l x = ly = 1 l x = y ones = n arrays fill ones 1 0 first solution = solve forward substitution ones precision lower triangular row sums = solve back substitution first solution precision lower triangular sum row sums = 0 0 i = 0 i < n i++ sum row sums += row sums i inverse sum row sums = 1 0 sum row sums i = 0 i < n i++ result i = inverse sum row sums row sums i sum result next m v normal n mean precision randoms random result = n i=0 i < n i++ result i = next m v normal mean precision random result feature vector next feature vector alphabet alphabet mean precision randoms random feature vector alphabet next m v normal mean precision random prior mean a vector mean values prior precision diagonal a vector representing a diagonal prior precision matrix precision a precision matrix next m v normal posterior prior mean prior precision diagonal precision observed mean observations randoms random dimension = prior mean length q 0 mu 0 + n q y bar linear combination = dimension i=0 i<dimension i++ linear combination i = prior mean i prior precision diagonal i inner product = 0 0 j = 0 j < dimension j++ inner product += precision dimension i + j observed mean j linear combination i += observations inner product q 0 + n q posterior precision = precision length row = 0 row < dimension row++ col = 0 col < dimension col++ posterior precision dimension row + col = observations precision dimension row + col row == col posterior precision dimension row + col += prior precision diagonal row inverse posterior precision = invert s p d posterior precision dimension posterior mean = dimension row = 0 row < dimension row++ inner product = 0 0 col = 0 col < dimension col++ inner product += inverse posterior precision dimension row + col linear combination col posterior mean row = inner product next m v normal posterior mean posterior precision random x such that l x = b note transpose assumes that input matrix l o w e r triangular even though back substitution operates on u p p e r triangular matrices solve back substitution b lower triangular inner product n = b length result = n i = n 1 i >= 0 i inner product = 0 0 j = i+1 j < n j++ assume we re dealing a single lower triangular matrix from a cholesky decomposition so index into it it transpose inner product += result j lower triangular n j + i result i = b i inner product lower triangular n i + i result x such that lx = b where l lower triangular solve forward substitution b lower triangular inner product n = b length result = n i = 0 i < n i++ inner product = 0 0 j = 0 j < i j++ inner product += result j lower triangular n i + j result i = b i inner product lower triangular n i + i result lower triangular inverse a lower triangular matrix invert lower triangular input matrix dimension output matrix = input matrix length x row = 0 row < dimension row++ col = 0 col <= row col++ off diagonal elements are negative inner product up to row index row from input and col from output divided diagonal from input col == row diagonal elements are same but add 1 to numerator x = 1 0 x = 0 0 i = col i < row i++ x = input matrix dimension row + i output matrix dimension i + col output matrix dimension row + col = x input matrix dimension row + row output matrix l l lower triangular matrix l lower triangular crossproduct input matrix dimension output matrix = input matrix length inner product row = 0 row < dimension row++ col = row col < dimension col++ inner product = 0 0 i = col i < dimension i++ inner product += input matrix row + dimension i input matrix col + dimension i output matrix dimension row + col = inner product output matrix row + dimension col = inner product output matrix lower triangular x = a b square lower triangular matrices a and b lower triangular product left matrix right matrix dimension output matrix = left matrix length inner product row = 0 row < dimension row++ col = 0 col <= row col++ inner product = 0 0 i = col i <= row i++ inner product += left matrix dimension row + i right matrix dimension i + col output matrix dimension row + col = inner product output matrix invert s p d input matrix dimension lower triangular crossproduct invert lower triangular band cholesky input matrix dimension dimension dimension a wishart random variate based on r bill venables sqrt scale matrix lower triangular matrix square root scale matrix to draw from posterior a precision ie inverse covariance matrix should be chol s^ 1 where s scatter matrix x x columns m v normal observations x dimension size matrix degrees freedom degree freedom wishart should be greater than dimension a posterior number observations + df prior next wishart sqrt scale matrix dimension degrees freedom randoms random sample = sqrt scale matrix length row = 0 row < dimension row++ col = 0 col < row col++ sample row dimension + col = random next gaussian 0 1 sample row dimension + row = math sqrt random next chi sq degrees freedom out to sample dimension out to sqrt scale matrix dimension out to lower triangular product sample sqrt scale matrix dimension dimension out diagonal to sample dimension out diagonal to sqrt scale matrix dimension out diagonal to lower triangular product sample sqrt scale matrix dimension dimension lower triangular crossproduct lower triangular product sample sqrt scale matrix dimension dimension next wishart posterior scatter matrix observations prior precision diagonal prior d f dimension randoms random scatter plus prior = scatter matrix length arraycopy scatter matrix 0 scatter plus prior 0 scatter matrix length i=0 i < dimension i++ scatter plus prior dimension i + i += 1 0 prior precision diagonal i out inverted scatter plus prior out diagonal to invert s p d scatter plus prior dimension dimension out chol inverted scatter plus prior out diagonal to cholesky invert s p d scatter plus prior dimension dimension dimension sqrt scale matrix = cholesky invert s p d scatter plus prior dimension dimension next wishart sqrt scale matrix dimension observations + prior d f random create a representation a square matrix in one dimensional format to matrix dimension number format formatter = number format get instance formatter set maximum fraction digits 10 buffer output = buffer row = 0 row < dimension row++ col = 0 col < dimension col++ output append formatter format matrix dimension row + col output append output append output to diagonal to matrix dimension number format formatter = number format get instance formatter set maximum fraction digits 4 buffer output = buffer row = 0 row < dimension row++ output append formatter format matrix dimension row + row output append output to get scatter matrix observation matrix observations = observation matrix length dimension = observation matrix 0 length output matrix = dimension dimension means = dimension collect sample means i = 0 i < observations i++ d = 0 d < dimension d++ means d += observation matrix i d d = 0 d < dimension d++ means d = observations now sample covariance times n i = 0 i < observations i++ d1 = 0 d1 < dimension d1++ d2 = 0 d2 < dimension d2++ output matrix dimension d1 + d2 += observation matrix i d1 means d1 observation matrix i d2 means d2 output matrix test cholesky observations = 1000 mean = 20 precision matrix = 20 20 i=0 i<20 i++ precision matrix 20 i + i = 1 0 randoms random = randoms scatter matrix = get scatter matrix next m v normal observations mean precision matrix random prior precision = 20 arrays fill prior precision 1 0 next wishart posterior scatter matrix observations prior precision 21 20 random spd = 19 133825 1 180869 6 403880 1 180869 8 895968 1 280748 6 403880 1 280748 9 155951 spd = 3 0 0 0 1 0 0 0 3 0 0 0 1 0 0 0 3 0 randoms random = randoms mean = 1 0 1 0 1 0 lower = cholesky spd 3 iter = 0 iter < 10 iter++ sample = next m v normal cholesky mean lower random i=0 i<sample length i++ out print sample i + out iter = 0 iter < 10 iter++ sample = next zero sum m v normal cholesky mean lower random i=0 i<sample length i++ out print sample i + out dim = 100 band lower = band matrix root dim 3 out to band lower dim band matrix = lower triangular crossproduct band lower dim out to band matrix dim start time start time = current time millis i=0 i<100000 i++ band cholesky band matrix dim out current time millis start time start time = current time millis i=0 i<100000 i++ cholesky band matrix dim out current time millis start time l = 2 87527 0 0 0 0 2 4168 1 28 0 0 0 585168 2 792234 2 769609 spd = 19 133825 1 180869 6 403880 1 180869 8 895968 1 280748 6 403880 1 280748 9 155951 scatter = 103 59761 16 370939 12 694755 16 37094 106 117048 4 079818 12 69476 4 079818 94 065152 prior diagonal = 1 0 1 0 1 0 test cholesky out to next wishart posterior scatter 100 prior diagonal 10 3 randoms 3 start time = current time millis i=0 i<10000 i++ invert s p d spd 3 out current time millis start time out to invert s p d spd 3 3 out to next wishart l 3 25 randoms 3 precision matrix = 0 98 1 0 0 0 1 0 2 13 1 0 0 0 1 0 1 01 mean = 3 randoms random = randoms i=0 i<10 i++ variate = next m v normal mean precision matrix random j=0 j<variate length j++ out print variate j + out 
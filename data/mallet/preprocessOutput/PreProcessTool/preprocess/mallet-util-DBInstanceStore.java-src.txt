sql io regex types pipe pipe iterator d b instance store supported types e m p t y = 0 s t r i n g = 1 f e a t u r e v e t o r = 2 f e a t u r e s e q u e n e = 3 f e a t u r e v e t o r s e q u e n e = 4 l a b e l = 5 debug = connection connection = d b instance store db name name apache derby jdbc embedded driver connection u r l = jdbc derby + db name + create=true connection = driver manager get connection connection u r l result set table check = connection get meta data get tables i n s t a n e s ! table check next statement create table statement = connection create statement create table statement execute r e a t e t a b l e instances instance i n t n o t n u l l g e n e r a t e d a l w a y s a s e n t i t y s t a r t w i t h 0 i n r e m e n t b y 1 instance name v a r h a r 500 instance name type i n t instance target v a r h a r 1000 instance target type i n t instance data b l o b 1 m instance data type i n t instance source v a r h a r 32000 instance source type create table statement execute r e a t e i n d e x instances instance o n instances instance create table statement execute r e a t e t a b l e data alphabet entry i n t n o t n u l l entry value v a r h a r 1000 create table statement execute r e a t e t a b l e target alphabet entry i n t n o t n u l l entry value v a r h a r 1000 table check close connection set auto commit convert an integers to an bytes copying bits each to four bytes based on at java2s com to src src length = src length dst = src length << 2 i=0 i<src length i++ x = src i j = i << 2 dst j++ = x >>> 0 0xff dst j++ = x >>> 8 0xff dst j++ = x >>> 16 0xff dst j++ = x >>> 24 0xff dst convert an bytes to an integers copying bits directly based on at java2s com to src dst length = src length >>> 2 dst = dst length i=0 i < dst length i++ j = i << 2 x = 0 x += src j++ 0xff << 0 x += src j++ 0xff << 8 x += src j++ 0xff << 16 x += src j++ 0xff << 24 dst i = x dst save alphabets alphabet data alphabet alphabet target alphabet prepared statement insert statement data alphabet != insert statement = connection prepare statement i n s e r t i n t o data alphabet v a l u e s ? ? i = 0 i < data alphabet size i++ insert statement set 1 i insert statement set 2 data alphabet lookup i to insert statement execute update insert statement close target alphabet != insert statement = connection prepare statement i n s e r t i n t o target alphabet v a l u e s ? ? i = 0 i < target alphabet size i++ insert statement set 1 i insert statement set 2 target alphabet lookup i to insert statement execute update insert statement close connection commit save instances iterator< instance> iterator prepared statement insert statement = connection prepare statement i n s e r t i n t o instances v a l u e s d e f a u l t ? ? ? ? ? ? n u l l 0 start time = current time millis instances saved = 0 iterator has next instance instance = iterator next name = instance get name name insert statement set 1 name insert statement set 2 s t r i n g + name get + not supported target = instance get target target == insert statement set 3 insert statement set 4 e m p t y target insert statement set 3 target insert statement set 4 s t r i n g + name get + not supported data = instance get data data feature sequence features = feature sequence data get features insert statement set bytes 5 to features insert statement set 6 f e a t u r e s e q u e n e + name get + not supported insert statement execute update instances saved ++ instances saved % 100000 == 0 diff = current time millis start time start time = current time millis out instances saved + + diff insert statement close connection commit cleanup sql state = connection close driver manager get connection jdbc derby shutdown=true s q l se sql state = se get s q l state sql state equals x j015 err shutdown successful + sql state d b instance store saver = d b instance store 0 list< pipe> pipe list = list< pipe> read data from pipe list add input2 sequence u t f 8 regular expression what constitutes a token pattern includes unicode letters unicode numbers and underscore character alternatives \\ s+ anything not whitespace \\w+ a z a z 0 9 \\p l \\p n +| \\p p + a group only letters and numbers o r a group only punctuation marks pattern token pattern = pattern compile \\p l \\p l \\p p \\p l tokenize raw strings pipe list add sequence2 token sequence token pattern pipe list add token sequence2 feature sequence csv iterator reader = csv iterator reader 1 ? \ ? \ 3 2 1 pipe serial pipe = serial pipes pipe list iterator< instance> iterator = serial pipe iterator from reader saver save instances iterator saver save alphabets serial pipe get data alphabet serial pipe get target alphabet saver cleanup 
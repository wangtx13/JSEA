2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e tests membership token text in list phrases lexicon words are in a one space separated phrase per line author wei lee and andrew mc callum <a href= mailto >mccallum edu< a> modifications author kedar bellare <a href= mailto kedarb >kedarb edu< a> joint extraction pipe tsf io pipe types trie lexicon membership pipe serializable perhaps give it your own tokenizer? name perhaps make an names ignore trie lexicon lexicon trie lexicon membership name reader lexicon reader ignore name = name lexicon = trie lexicon name ignore line number reader reader = line number reader lexicon reader line line = reader read line i o e illegal state line == lexicon add line lexicon size == 0 illegal argument empty lexicon trie lexicon membership name reader lexicon reader ignore include delims delim name = name lexicon = trie lexicon name ignore line number reader reader = line number reader lexicon reader line line = reader read line i o e illegal state line == lexicon add line include delims delim lexicon size == 0 illegal argument empty lexicon trie lexicon membership name lexicon ignore not found name buffered reader reader lexicon ignore trie lexicon membership name lexicon ignore include delims delim not found name buffered reader reader lexicon ignore include delims delim trie lexicon membership lexicon ignore not found lexicon get name lexicon ignore trie lexicon membership lexicon not found lexicon get name lexicon instance pipe instance carrier token sequence ts = token sequence carrier get data lexicon add features ts carrier serialization serial u = 1 u r r e n t s e r i a l v e r s i o n = 0 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write name out write lexicon out write ignore read input stream in i o not found = in read name = in read lexicon = trie lexicon in read ignore = in read trie lexicon serializable e n d o f w o r d t o k e n = end word name ignore hashtable lex size trie lexicon name ignore name = name ignore = ignore lex = hashtable size = 0 add word add word add word include delims delim word = tokenizer st = tokenizer word delim include delims hashtable current level = lex st has more tokens token = st next token ignore token = token to lower !current level contains key token current level put token hashtable word = current level = hashtable current level get token current level put e n d o f w o r d t o k e n word size++ add features token sequence ts i = 0 i < ts size j = end word ts i j == 1 i++ i <= j i++ token t = ts get i t set feature value name 1 0 end word token sequence ts start start < 0 || start >= ts size err lexicon last index out token sequence boundaries 1 hashtable current level = lex end = 1 i = start i < ts size i++ token t = ts get i s = t get text ignore s = s to lower current level = hashtable current level get s current level == end current level contains key e n d o f w o r d t o k e n end = i end size size serialization serial u = 1 u r r e n t s e r i a l v e r s i o n = 0 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write name out write lex out write ignore out write size read input stream in i o not found = in read name = in read lex = hashtable in read ignore = in read size = in read 
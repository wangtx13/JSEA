2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e types arrays io an link sequence that ensures that every in sequence has same feature sequences are mutable and will expand are added author andrew mc callum <a href= mailto >mccallum edu< a> feature sequence sequence serializable alphabet carrying alphabet dictionary features length creates a feature sequence given all in sequence dict a dictionary that maps in sequence to numeric indices features an where features i gives index in dict ith element sequence feature sequence alphabet dict features dict features length i = 0 i < features length i++ add features i feature sequence alphabet dict features len dict len i = 0 i < len i++ add features i feature sequence alphabet dict capacity dictionary = dict features = capacity > 2 ? capacity 2 length = 0 feature sequence alphabet dict dict 2 get features features alphabet get alphabet dictionary alphabet get alphabets alphabet get alphabet alphabets match alphabet carrying get alphabet equals get alphabet get length length size length get index at position pos features pos get at position pos dictionary lookup features pos xxx name seems a bit ambiguous? get pos dictionary lookup features pos to buffer sb = buffer fsi = 0 fsi < length fsi++ o = dictionary lookup features fsi sb append fsi sb append sb append o to sb append sb append features fsi sb append sb to grow necessary length == features length features = features length 2 arraycopy features 0 features 0 length features = features add feature index grow necessary feature index < dictionary size features length++ = feature index add key fi = dictionary lookup index key fi >= 0 add fi gdruck below it not possible to pipe data when growth alphabet stopped we want to be able to example to process data using an old pipe example from a fixed cached classifier that we want to apply to data xxx should we raise an appending doesn t happen? yes akm added 1 2008 illegal state cannot be added to feature sequence because its alphabet frozen add feature weights to weights i = 0 i < length i++ weights features i ++ add feature weights to weights scale i = 0 i < length i++ weights features i += scale to feature index sequence feats = length arraycopy features 0 feats 0 length feats to sorted feature index sequence feats = to feature index sequence arrays sort feats feats remove features from sequence that occur fewer than <code>cutoff< code> times in corpus indicated counts also swap in reduced alphabet alters instance in place it not appropriate original instance will be needed prune alphabet alphabet goal to replace sequence features in place creating a and then swapping it in first figure out how will have to be length = 0 keepers = length i = 0 i < length i++ alphabet contains dictionary lookup features i keepers i = length++ second allocate a features features = length third fill index = 0 i = 0 i < length i++ keepers i features index = alphabet lookup index dictionary lookup features i index++ fourth swap out arrays features = features length = length dictionary = alphabet remove features from sequence that occur fewer than <code>cutoff< code> times in corpus indicated counts also swap in reduced alphabet alters instance in place it not appropriate original instance will be needed prune counts alphabet alphabet cutoff goal to replace sequence features in place creating a and then swapping it in first figure out how will have to be length = 0 i = 0 i < length i++ counts features i >= cutoff length++ second allocate a features features = length third fill index = 0 i = 0 i < length i++ counts features i >= cutoff feature = dictionary lookup features i features index = alphabet lookup index feature index++ fourth swap out arrays features = features length = length dictionary = alphabet serialization serial u = 1 u r r e n t s e r i a l v e r s i o n = 0 n u l l i n t e g e r = 1 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write dictionary out write features length i = 0 i < features length i++ out write features i out write length read input stream in i o not found features length = in read dictionary = alphabet in read features length = in read features = features length i = 0 i < features length i++ features i = in read length = in read 
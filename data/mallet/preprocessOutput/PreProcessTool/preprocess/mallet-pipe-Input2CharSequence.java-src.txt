2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> pipe io net u r i types instance sequence lexer pipe that can read from various kinds text sources either u r i or reader into a sequence $ input2 sequence v 1 1 2007 10 22 21 37 39 exp $ input2 sequence pipe serializable encoding = input2 sequence input2 sequence encoding encoding = encoding instance pipe instance carrier carrier get data u r i carrier set data pipe u r i carrier get data carrier get data carrier set data pipe carrier get data carrier get data reader carrier set data pipe reader carrier get data carrier get data sequence no conversion necessary illegal argument does not handle +carrier get data get io i o e illegal argument i o + e out carrier get data to carrier sequence pipe u r i uri io not found io i o ! uri get scheme equals unsupported operation only scheme pipe uri get path sequence pipe io not found io i o buffered reader = encoding == = buffered reader reader = buffered reader input stream reader input stream encoding sequence = pipe close sequence pipe reader reader io i o b u f s i z e = 2048 buf = b u f s i z e count buffer sb = buffer b u f s i z e count = reader read buf 0 b u f s i z e count == 1 out count= +count sb append buf 0 count count == b u f s i z e sb sequence pipe sequence serialization serial u = 2 u r r e n t s e r i a l v e r s i o n = 0 write output stream out i o out write u r r e n t s e r i a l v e r s i o n encoding == out write out write encoding read input stream in i o not found = in read encoding = in read encoding equals encoding = 
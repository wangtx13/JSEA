2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> types io maths dense matrix matrix serializable values has infinite at least one value = inf or + inf get num dimensions get dimensions sizes value indices set value indices value constant matrix clone matrix single index indices single to indices i indices single value i values i set single value i value values i = value increment single value i delta values i += delta set value at location loc value indices == locations set single value loc value single size values length num locations values length location index index value at location location values location a single index index at location location location set all v i = 0 i < values length i++ values i = v set constant matrix m m dense matrix m single size == values length arraycopy dense matrix m values 0 values 0 values length i = m num locations 1 i >= 0 i values m index at location i = m value at location i set addend constant matrix m addend m dense matrix m single size == values length i = 0 i < values length i++ values i = dense matrix m values i + addend i = m num locations 1 i >= 0 i values m index at location i = m value at location i + addend set factor constant matrix m factor m dense matrix m single size == values length i = 0 i < values length i++ values i = dense matrix m values i factor i = m num locations 1 i >= 0 i values m index at location i = m value at location i factor plus equals v i = 0 i < values length i++ values i += v plus equals constant matrix m m dense matrix m single size == values length i = 0 i < values length i++ added culotta 12 10 0 to enforce i n f i n f = 0 infinite values i infinite m value at location i value = m value at location i make sure they re opposite signed value values i < 0 values i = 0 0 inf inf = 0 values i += value values i += m value at location i i = m num locations 1 i >= 0 i added culotta 12 10 02 to enforce i n f i n f = 0 infinite values m index at location i infinite dense matrix m values i value = m value at location i make sure they re oppisite signed value values m index at location i < 0 values m index at location i = 0 0 values m index at location i += value values m index at location i += m value at location i plus equals constant matrix m factor m dense matrix m single size == values length i = 0 i < values length i++ added culotta 12 10 0 to enforce i n f i n f = 0 infinite values i infinite m value at location i value = factor m value at location i make sure they re opposite signed value values i < 0 values i = 0 0 inf inf = 0 values i += value values i += m value at location i factor i = m num locations 1 i >= 0 i added culotta 12 10 02 to enforce i n f i n f = 0 infinite values m index at location i infinite m value at location i value = factor m value at location i make sure they re oppisite signed value values m index at location i < 0 values m index at location i = 0 0 values m index at location i += value values m index at location i += m value at location i factor equals plus factor constant matrix m m dense matrix m single size == values length i = 0 i < values length i++ added culotta 12 10 0 to enforce i n f i n f = 0 infinite values i infinite dense matrix m values i lhs = factor values i rhs = dense matrix m values i make sure they re opposite signed lhs rhs < 0 values i = 0 0 inf inf = 0 values i = lhs + rhs values i = factor values i + dense matrix m values i i = m num locations 1 i >= 0 i added culotta 12 10 02 to enforce i n f i n f = 0 infinite values m index at location i infinite dense matrix m values i lhs = factor values m index at location i rhs = m value at location i make sure they re oppisite signed lhs rhs < 0 values m index at location i = 0 0 values m index at location i = lhs + rhs values m index at location i = factor values m index at location i + m value at location i times equals factor i = 0 i < values length i++ values i = factor elementwise times equals constant matrix m m dense matrix m single size == values length i = 0 i < values length i++ values i = dense matrix m values i i = m num locations 1 i >= 0 i values m index at location i = m value at location i elementwise times equals constant matrix m factor m dense matrix m single size == values length i = 0 i < values length i++ values i = dense matrix m values i factor i = m num locations 1 i >= 0 i values m index at location i = m value at location i factor divide equals factor i = 0 i < values length i++ values i = factor elementwise divide equals constant matrix m m dense matrix m single size == values length i = 0 i < values length i++ values i = dense matrix m values i i = m num locations 1 i >= 0 i values m index at location i = m value at location i elementwise divide equals constant matrix m factor m dense matrix m single size == values length i = 0 i < values length i++ values i = dense matrix m values i factor i = m num locations 1 i >= 0 i values m index at location i = m value at location i factor xxx perhaps make a special efficient binary vectors dot product constant matrix m ret = 0 m dense matrix m single size == values length i = 0 i < values length i++ ret += values i dense matrix m values i i = m num locations 1 i >= 0 i m index at location i < values length fix problem ret += values m index at location i m value at location i out m index at location i + + values length index out bounds m index at location i ret abs norm ret = 0 i = 0 i < values length i++ ret += math abs values i ret one norm ret = 0 i = 0 i < values length i++ ret += values i ret two norm ret = 0 i = 0 i < values length i++ ret += values i values i math sqrt ret infinity norm max = n e g a t i v e i n f i n i t y i = 0 i < values length i++ math abs values i > max max = math abs values i max one normalize norm = one norm i = 0 i < values length i++ values i = norm norm two normalize norm = two norm i = 0 i < values length i++ values i = norm norm abs normalize norm = abs norm norm > 0 i = 0 i < values length i++ values i = norm norm infinity normalize norm = infinity norm i = 0 i < values length i++ values i = norm norm print i = 0 i < values length i++ out dense matrix +i+ = +values i na n i = 0 i < values length i++ na n values i substitute old value value i = values length 1 i >= 0 i values i == old value values i = value serialization serial u = 1 u r r e n t s e r i a l v e r s i o n = 0 n u l l i n t e g e r = 1 write output stream out i o i size out write u r r e n t s e r i a l v e r s i o n values != size = values length out write size i=0 i<size i++ out write values i out write n u l l i n t e g e r read input stream in i o not found i size has infinite = = in read size = in read size != n u l l i n t e g e r values = size i = 0 i<size i++ values i = in read infinite values i has infinite = values = plus equals accumulator addend accumulator length == addend length i = 0 i < addend length i++ accumulator i += addend i plus equals accumulator addend factor accumulator length == addend length i = 0 i < addend length i++ accumulator i += factor addend i times equals accumulator product accumulator length == product length i = 0 i < product length i++ accumulator i = product i infinity norm vector max = n e g a t i v e i n f i n i t y i = 0 i < vector length i++ math abs vector i > max max = math abs vector i max should probably be generalized almost equals constant matrix m2 get num dimensions != m2 get num dimensions num locations != m2 num locations dims1 = get num dimensions dims2 = get num dimensions get dimensions dims1 m2 get dimensions dims2 i = 0 i < dims1 length i++ dims1 i != dims2 i i = 0 i < num locations i++ ! maths almost equals value at location i m2 value at location i 
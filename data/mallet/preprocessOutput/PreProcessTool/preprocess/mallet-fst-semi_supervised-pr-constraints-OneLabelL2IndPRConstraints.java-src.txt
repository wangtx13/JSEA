2011 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e semi supervised pr constraints gnu trove t list gnu trove t hash map list bit set hash map semi supervised state label map types feature vector types feature vector sequence types instance types instance list a set constraints on individual input feature label pairs to be used p r and penalizes l 2^2 difference from target expectations multiple constraints are grouped together here to make things more efficient author gregory druck one label l2 ind p r constraints p r constraint normalized num dimensions maps between input feature indices and constraints t hash map< one label l2 ind p r constraint> constraints state label map map cache set constrained features that fire at last feature vector in preprocess call t list cache one label l2 ind p r constraints normalized normalized = normalized num dimensions = 0 constraints = t hash map< one label l2 ind p r constraint> will be set p r trainer map = cache = t list one label l2 ind p r constraints t hash map< one label l2 ind p r constraint> constraints state label map map normalized normalized = normalized num dimensions = 0 copy constraints constraints = t hash map< one label l2 ind p r constraint> key constraints keys constraints put key constraints get key copy num dimensions += constraints get key get num constrained labels map = map cache = t list p r constraint copy one label l2 ind p r constraints constraints map normalized add constraint fi target weight !constraints contains key fi constraints put fi one label l2 ind p r constraint constraints get fi add target weight num dimensions num dimensions++ num dimensions num dimensions set state label map state label map map map = map pre process feature vector fv cache reset quick fi cache constrained input features loc = 0 loc < fv num locations loc++ fi = fv index at location loc constraints contains key fi cache add fi find examples that contain constrained input features bit set pre process instance list data count ii = 0 fi feature vector fv bit set bit set = bit set data size instance instance data feature vector sequence fvs = feature vector sequence instance get data ip = 0 ip < fvs size ip++ fv = fvs get ip loc = 0 loc < fv num locations loc++ fi = fv index at location loc constraints contains key fi constraints get fi count += 1 bit set set ii ii++ bit set get score feature vector input input position src index dest index dot = 0 li2 = map get label index dest index i = 0 i < cache size i++ fi = cache get quick i one label l2 ind p r constraint constraint = constraints get fi dot += constraint get score li2 dot increment expectations feature vector input input position src index dest index prob li2 = map get label index dest index i = 0 i < cache size i++ constraints get cache get quick i increment expectation li2 prob get expectations expectations expectations length == num dimensions expectations length + + num dimensions fi constraints keys constraints get fi get expectations expectations add expectations expectations expectations length == num dimensions fi constraints keys constraints get fi add expectations expectations zero expectations fi constraints keys constraints get fi zero expectation get auxiliary value contribution value = 0 fi constraints keys one label l2 ind p r constraint constraint = constraints get fi value += constraint get projection value contrib value get complete value contribution value = 0 fi constraints keys one label l2 ind p r constraint constraint = constraints get fi value += constraint get complete value contrib value get gradient gradient fi constraints keys one label l2 ind p r constraint constraint = constraints get fi constraint get gradient gradient one label l2 ind p r constraint index count list< integer> labels list< integer> indices list< double> targets list< double> weights hash map< integer> label map expectation one label l2 ind p r constraint index = 0 count = 0 labels = list< integer> indices = list< integer> targets = list< double> weights = list< double> label map = hash map< integer> one label l2 ind p r constraint copy one label l2 ind p r constraint copy = one label l2 ind p r constraint copy index = index copy count = count copy labels = labels copy indices = indices copy targets = targets copy weights = weights copy label map = label map will be incremented in copy copy expectation = index copy add label target weight index targets add target weights add weight labels add label indices add index label map put label index index++ zero expectation expectation = labels size get expectations expectations i = 0 i < indices size i++ expectations indices get i = expectation i add expectations expectations i = 0 i < indices size i++ expectation i += expectations indices get i increment expectation value label map contains key i = label map get expectation i += value get score label map contains key i = label map get normalized indices get i count indices get i 0 get projection value contrib value = 0 i = 0 i < indices size i++ = indices get i value += targets get i 2 weights get i value get complete value contrib value = 0 i = 0 i < indices size i++ normalized value += weights get i math pow targets get i expectation i count 2 2 value += weights get i math pow targets get i expectation i 2 2 value get gradient gradient i = 0 i < indices size i++ pi = indices get i normalized gradient pi += targets get i expectation i count pi weights get i gradient pi += targets get i expectation i pi weights get i get num constrained labels index 
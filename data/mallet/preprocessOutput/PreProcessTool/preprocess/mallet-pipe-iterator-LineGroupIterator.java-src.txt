2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> pipe iterator io iterator regex pipe pipe types iterate over groups lines text separated lines that match a regular expression example w s j base n p data consists sentences one word per line each sentence separated a blank line boundary line to be in group it placed at end group line group iterator iterator< instance> line number reader reader pattern line boundary regex skip boundary put boundary line at end not yet next line group next boundary next next boundary group index = 0 put boundary in source = line group iterator reader input pattern line boundary regex skip boundary reader = line number reader input line boundary regex = line boundary regex skip boundary = skip boundary set next line group peek line group next line group set next line group buffer sb = buffer line !skip boundary next boundary != sb append next boundary + line = reader read line i o e runtime e out line group iterator got line +line line == line boundary regex matcher line matches sb length > 0 next boundary = next next boundary next next boundary = line first line !skip boundary sb append line + next next boundary = line sb append line sb append sb length == 0 next line group = next line group = sb to instance next next line group != instance carrier = instance next line group linegroup +group index++ put boundary in source ? next boundary set next line group carrier has next next line group != remove illegal state iterator< instance> does not support remove 
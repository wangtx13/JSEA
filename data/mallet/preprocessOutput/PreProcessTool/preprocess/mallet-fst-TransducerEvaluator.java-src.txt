2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> logging logger types instance list optimize optimizable logger an to evaluate a transducer model transducer evaluator logger logger = logger get logger transducer evaluator get name t o d o consider storing transducer trainer here also? like precondition will be shorter and easier instance list instance lists instance list descriptions transducer evaluator instance lists = instance list 0 instance list descriptions = 0 transducer evaluator instance list instance lists instance list descriptions instance lists = instance lists instance list descriptions = instance list descriptions evaluates a transducer trainer and its transducer on instance lists specified in constructor < p> calls evaluator s < t t>evaluate instance list< t t> on each instance list tt transducer trainer to evaluate evaluate transducer trainer tt !precondition tt preamble tt k = 0 k < instance lists length k++ instance lists k != evaluate instance list tt instance lists k instance list descriptions k preamble transducer trainer tt iteration = tt get iteration optimizable opt tt transducer trainer optimization opt = transducer trainer optimization tt get optimizer get optimizable optimizable value logger info evaluator iteration= +iteration+ cost= + optimizable value opt get value logger info evaluator iteration= +iteration+ cost= n a not optimizable value then body evaluate transducer trainer will not run use to implement behaviors such only evaluating every 5 iterations <code> token accuracy evaluator crft precondition transducer trainer tt tt get iteration % 5 == 0 < code> precondition transducer trainer tt evaluate instance list transducer trainer transducer instance list instances description 
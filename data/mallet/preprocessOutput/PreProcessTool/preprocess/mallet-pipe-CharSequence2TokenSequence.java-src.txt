2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> pipe io net u r i regex pattern extract span extract tokenization types instance types single instance iterator types token types token sequence sequence lexer lexer pipe that tokenizes a character sequence expects a sequence in instance data and converts sequence into a token sequence using given regex or sequence lexer regex lexer should specify what counts a token sequence2 token sequence pipe serializable sequence lexer lexer sequence2 token sequence sequence lexer lexer lexer = lexer sequence2 token sequence regex lexer = sequence lexer regex sequence2 token sequence pattern regex lexer = sequence lexer regex sequence2 token sequence sequence lexer instance pipe instance carrier sequence = sequence carrier get data lexer set sequence token sequence ts = tokenization lexer has next lexer next ts add span lexer get start offset lexer get end offset carrier set data ts carrier i = 0 i < length i++ instance carrier = instance i serial pipes p = serial pipes pipe input2 sequence sequence2 token sequence sequence lexer carrier = p iterator from single instance iterator carrier next token sequence ts = token sequence carrier get data out === out i out ts to e out e e print stack trace serialization serial u = 1 u r r e n t s e r i a l v e r s i o n = 0 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write lexer read input stream in i o not found = in read lexer = sequence lexer in read 
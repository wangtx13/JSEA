2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> types io regex hash map gnu trove t hash map set iterator xxx a not very space efficient i ll compress it later edit feature vector sequence feature vector sequence serializable string1 length string2 length string1 string2 string1 blocks string2 blocks t hash map string1 present string2 present t hash map lexicon block1 indices block2 indices delim = delimiter = edit feature vector sequence feature vector feature vectors s1 s2 feature vectors s1 s2 delimiter edit feature vector sequence feature vector feature vectors s1 s2 delimiter feature vectors s1 s2 delimiter edit feature vector sequence feature vector feature vectors s1 s2 hash map lexic feature vectors s1 s2 delimiter lexic edit feature vector sequence feature vector feature vectors s1 s2 delimiter hash map lexic feature vectors delim = delimiter lexicon = t hash map lexic != set keys = lexic key set iterator iter = keys iterator iter has next lexicon put iter next 1 string1 = s1 string2 = s2 string1 length = s1 length + 2 string2 length = s2 length + 2 string1 blocks = string1 split + delim string2 blocks = string2 split + delim string1 present = t hash map string2 present = t hash map block1 indices = string1 length string1 blocks length > 0 which block = 0 block1 indices 0 = which block++ i = 0 i < string1 blocks length i++ string1 present put string1 blocks i 1 i = 1 i < string1 length 1 i++ block1 indices i = string1 at i 1 == delim ? which block++ 1 block1 indices string1 length 1 = 1 block2 indices = string2 length string2 blocks length > 0 which block = 0 block2 indices 0 = which block++ i = 0 i < string2 blocks length i++ string2 present put string2 blocks i 1 i = 1 i < string2 length 1 i++ block2 indices i = string2 at i 1 == delim ? which block++ 1 block2 indices string2 length 1 = 1 get string1 string1 get string2 string2 get string1 length string1 length get string2 length string2 length end block get string1 e o b index delimiter get string1 e o b index delimiter 0 get string1 e o b index delimiter start get string1 index delimiter start get string1 block at index idx idx < 0 || idx >= block1 indices length || block1 indices idx < 0 || block1 indices idx >= string1 blocks length string1 blocks block1 indices idx get string1 index str start toret = string1 index str start toret == 1 toret = string1 length 1 start toret = toret start toret < 1 1 toret present1 pattern str pattern p = pattern compile pattern str matcher m = p matcher string1 b = m matches b present in string1 str string1 present contains key str get string1 index index = index 1 index < 0 || index >= string1 length 0 string1 at index get string2 e o b index delimiter get string2 e o b index delimiter 0 get string2 e o b index delimiter start get string2 index delimiter start get string2 block at index idx idx < 0 || idx >= block2 indices length || block2 indices idx < 0 || block2 indices idx >= string2 blocks length string2 blocks block2 indices idx present in string2 str string2 present contains key str get string2 index str start toret = string2 index str start toret == 1 toret = string2 length 1 start toret = toret start toret < 1 1 toret present2 pattern str pattern p = pattern compile pattern str matcher m = p matcher string2 b = m matches b get string2 index index = index 1 index < 0 || index >= string2 length 0 string2 at index in lexicon str lexicon == || str == lexicon contains key str to buffer sb = buffer sb append to sb append sb append 1 + string1 length + 2 + string2 length sb to serialization instance serial u = 1 u r r e n t s e r i a l v e r s i o n = 0 n u l l i n t e g e r = 1 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write string1 length out write string2 length out write string1 out write string2 string1 blocks == out write n u l l i n t e g e r size = string1 blocks length out write size i=0 i<size i++ out write string1 blocks i string2 blocks == out write n u l l i n t e g e r size = string2 blocks length out write size i=0 i<size i++ out write string2 blocks i out write string1 present out write string2 present out write lexicon block1 indices == out write n u l l i n t e g e r size = block1 indices length out write size i=0 i<size i++ out write block1 indices i block2 indices == out write n u l l i n t e g e r size = block2 indices length out write size i=0 i<size i++ out write block2 indices i out write delim read input stream in i o not found = in read string1 length = in read string2 length = in read string1 = in read string2 = in read size = in read size == n u l l i n t e g e r string1 blocks = string1 blocks = size i = 0 i<size i++ string1 blocks i = in read size = in read size == n u l l i n t e g e r string2 blocks = string2 blocks = size i = 0 i<size i++ string2 blocks i = in read t hash map string1 present = t hash map in read t hash map string2 present = t hash map in read t hash map lexicon = t hash map in read size = in read size == n u l l i n t e g e r block1 indices = block1 indices = size i = 0 i<size i++ block1 indices i = in read size = in read size == n u l l i n t e g e r block2 indices = block2 indices = size i = 0 i<size i++ block2 indices i = in read delim = in read 
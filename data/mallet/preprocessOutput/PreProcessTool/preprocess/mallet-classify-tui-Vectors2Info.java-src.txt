2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e classify tui logging io classify pipe pipe iterator types diagnostic facilities a vector author andrew mc callum <a href= mailto >mccallum edu< a> vectors2 info logger logger = logger get logger vectors2 info get name command option input = command option vectors2 info input f i l e read instance list from using indicates stdin command option print instances = command option vectors2 info print instances n print labels and contents all instances command option print infogain = command option vectors2 info print infogain n 0 print top n words gain sorted command option print labels = command option vectors2 info print labels t r u e| f a l s e print labels known to instance list one per line command option print features = command option vectors2 info print features t r u e| f a l s e print data alphabet one feature per line command option print feature counts = command option vectors2 info print feature counts t r u e| f a l s e print feature names feature counts ie term frequency and feature index counts ie document frequency command option print matrix = command option vectors2 info print matrix s t r i n g sic print word document matrix in specified format a|s b|i n|w|c|e all vs sparse binary vs number vs word vs combined vs empty parse == = value out pa arg= + sanity check raw printing options a la rainbow c0 = at 0 c1 = at 1 c2 = at 2 length != 3 || c0 != s c0 != a || c1 != b c1 != i || c2 != n c2 != w c2 != c2 != e illegal argument illegal argument = + + in print matrix= +arg value = not found i o process command line options command option set summary vectors2 info a tool printing about instance lists feature vectors command option process vectors2 info print some helpful messages cases length == 0 command option get list vectors2 info print usage exit 1 !input was invoked err you must specify an input instance list input exit 1 read instance list instance list instances = instance list load input value print labels value alphabet label alphabet = instances get target alphabet i = 0 i < label alphabet size i++ out label alphabet lookup i out print print instances value instance instance instances out instance get name + + instance get target + + instance get data print feature counts value feature count tool counter = feature count tool instances counter count counter print counts print features value alphabet alphabet = instances get data alphabet i = 0 i < alphabet size i++ out alphabet lookup i print infogain value > 0 info gain ig = info gain instances i = 0 i < print infogain value i++ out +i+ +ig get at rank i out print print matrix was invoked print instance list instances print matrix value print an instance list according to format print instance list instance list instances format num instances = instances size num classes = instances get target alphabet size num features = instances get data alphabet size alphabet data alphabet = instances get data alphabet counts = num features count i = 0 i < instances size i++ instance instance = instances get i instance get data feature vector feature vector fv = feature vector instance get data out print instance get name + + instance get target format at 0 == a dense print all features even those value 0 fvi=0 fvi<num features fvi++ print feature data alphabet lookup fvi fvi fv value fvi format sparse print features non zero values only l = 0 l < fv num locations l++ fvi = fv index at location l print feature data alphabet lookup fvi fvi fv value at location l format out print + data alphabet lookup j + + fv value at location j instance get data feature sequence feature sequence feature sequence = feature sequence instance get data builder output = builder output append instance get name + + instance get target position = 0 position < feature sequence size position++ feature index = feature sequence get index at position position feature format = format at 2 feature format == w output append + data alphabet lookup feature index feature format == n output append + feature index feature format == output append + data alphabet lookup feature index + + feature index out output illegal argument printing supported feature vector and feature sequence data found + instance get data get out out counts helper print instance list prints a single feature within an instance print feature o fvi feature value format print n w e c1 = format at 2 c1 == w word out print + o c1 == n index word out print + fvi c1 == word and index out print + o + + fvi c1 == e no word identity c2 = format at 1 c2 == i count out print + feature value + 5 c2 == b present not present out print + feature value>0 5 ? 1 0 
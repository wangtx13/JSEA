2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> randoms random o n e o v e r e = math exp 1 randoms seed seed randoms random from poission parameter lambda mean lambda variance lambda next poisson lambda i j v= 1 l= math exp lambda p p=1 0 p>=l p =next uniform v++ v next poisson 1 next poisson next poisson 1 a random equally likely to be or next next 32 1 << 15 != 0 a random probability p being next p u=next uniform u < p a random bit set size bits each having probability p being bit set next bit set size p bit set bs = bit set size i = 0 i < size i++ next p bs set i bs a random in range 0 to 1 inclusive uniformly sampled from that range mean 0 5 variance 1 12 next uniform l = next 26 << 27 + next 27 l 1 l << 53 a random in range a to b inclusive uniformly sampled from that range mean b a 2 variance b a ^2 12 next uniform a b a + b a next uniform draw a single sample from multinomial a next discrete a b = 0 r = next uniform i = 0 i < a length i++ b += a i b > r i a length 1 draw a single sample from unnormalized multinomial a normalizing factor sum next discrete a sum b = 0 r = next uniform sum i = 0 i < a length i++ b += a i b > r i a length 1 next gaussian have next gaussian = a random drawn from a gaussian mean 0 and variance 1 next gaussian !have next gaussian v1=next uniform v2=next uniform x1 x2 x1= math sqrt 2 math log v1 math cos 2 math p i v2 x2= math sqrt 2 math log v1 math sin 2 math p i v2 next gaussian=x2 have next gaussian=true x1 have next gaussian=false next gaussian a random drawn from a gaussian mean m and variance s2 next gaussian m s2 next gaussian math sqrt s2 +m generate gamma 1 1 e x =1 var x =1 a random drawn from a gamma mean 1 0 and variance 1 0 next gamma next gamma 1 1 0 a random drawn from a gamma mean alpha and variance 1 0 next gamma alpha next gamma alpha 1 0 a sample from gamma parameter i a from numerical recipes in page 292 old next gamma ia j am e s v1 v2 x y ia >= 1 ia < 6 x = 1 0 j = 1 j <= ia j++ x = next uniform x = math log x v1 = 2 0 next uniform 1 0 v2 = 2 0 next uniform 1 0 v1 v1 + v2 v2 > 1 0 y = v2 v1 am = ia 1 s = math sqrt 2 0 am + 1 0 x = s y + am x <= 0 0 e = 1 0 + y y math exp am math log x am s y next uniform > e x a random drawn from a gamma mean alpha beta and variance alpha beta^2 next gamma alpha beta next gamma alpha beta 0 a random drawn from a gamma mean alpha beta+lamba and variance alpha beta^2 note that means pdf <code>frac x^ alpha 1 exp x beta beta^alpha gamma alpha < code> in other words beta a scale parameter an alternative parameterization would use 1 beta rate parameter next gamma alpha beta lambda gamma=0 alpha <= 0 || beta <= 0 illegal argument alpha and beta must be strictly positive alpha < 1 b p flag = b = 1 + alpha o n e o v e r e !flag p = b next uniform p > 1 gamma = math log b p alpha next uniform <= math pow gamma alpha 1 flag = gamma = math pow p 1 0 alpha next uniform <= math exp gamma flag = alpha == 1 gamma 1 equivalent to exponential 1 we can sample from an exponential inverting d f gamma = math log next uniform there no known closed form gamma alpha != 1 best s algorithm pg 410 luc devroye s non uniform random variate generation algorithm constant time alpha > 1 b = alpha 1 = 3 alpha 0 75 u v w y z accept = ! accept u = next uniform v = next uniform w = u 1 u y = math sqrt w u 0 5 gamma = b + y gamma >= 0 0 z = 64 w w w v v ie 64 w^3 v^2 accept = z <= 1 0 2 y y gamma ! accept accept = math log z <= 2 b math log gamma b y old uses time linear in alpha y = math log next uniform next uniform > math pow y math exp 1 y alpha 1 y = math log next uniform gamma = alpha y beta gamma+lambda a random drawn from an exponential mean 1 and variance 1 next exp next gamma 1 1 0 a random drawn from an exponential mean beta and variance beta^2 next exp beta next gamma 1 beta 0 a random drawn from an exponential mean beta+lambda and variance beta^2 next exp beta lambda next gamma 1 beta lambda a random drawn from an chi squarted mean 1 and variance 2 equivalent to next chi sq 1 next chi sq next gamma 0 5 2 0 a random drawn from an chi squared mean df and variance 2 df next chi sq df next gamma 0 5 df 2 0 a random drawn from an chi squared mean df+lambda and variance 2 df next chi sq df lambda next gamma 0 5 df 2 lambda a random drawn from a beta mean a a+b and variance ab a+b+1 a+b ^2 next beta alpha beta alpha <= 0 || beta <= 0 illegal argument alpha and beta must be strictly positive alpha == 1 beta == 1 next uniform alpha >= 1 beta >= 1 a = alpha 1 b = beta 1 = a + b l = math log mu = a sigma = 0 5 math sqrt y = next gaussian x = sigma y + mu x < 0 || x > 1 y = next gaussian x = sigma y + mu u = next uniform math log u >= a math log x a + b math log 1 x b + l + 0 5 y y y = next gaussian x = sigma y + mu x < 0 || x > 1 y = next gaussian x = sigma y + mu u = next uniform x v1 = math pow next uniform 1 alpha v2 = math pow next uniform 1 beta v1 + v2 > 1 v1 = math pow next uniform 1 alpha v2 = math pow next uniform 1 beta v1 v1 + v2 wrap instance a random so it can be passed to legacy all random will affect state well deprecated should no longer be necessary since randoms now a subclass random anyway random random random next bits randoms next bits prints next gamma and old next gamma distributions to out testing comparison randoms r = randoms resolution = 60 histogram1 = resolution histogram2 = resolution scale = 10 i = 0 i < 10000 i++ x = 4 index1 = r next gamma x scale resolution % resolution index2 = r old next gamma x scale resolution % resolution histogram1 index1 ++ histogram2 index2 ++ i = 0 i < resolution i++ y = 0 y < histogram1 i scale y++ out print out print y = 0 y < histogram2 i scale y++ out print out print 
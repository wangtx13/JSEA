pipe types io pruning low count features can be a good way to save memory and computation however in order to use vectors2 vectors you need to write out unpruned instance list read it back into memory collect statistics create instances and then write everything back out <p> supports a simpler that makes two passes over data one to collect statistics and create an augmented stop list and a second to actually create instances feature count pipe pipe feature counter counter feature count pipe alphabet counter = feature counter get data alphabet feature count pipe alphabet data alphabet alphabet target alphabet data alphabet target alphabet counter = feature counter data alphabet instance pipe instance instance instance get data feature sequence feature sequence features = feature sequence instance get data position = 0 position < features size position++ counter increment features get index at position position illegal argument looking a feature sequence found a + instance get data get instance a alphabet that contains only features at or above specified limit alphabet get pruned alphabet minimum count alphabet current alphabet = get data alphabet alphabet pruned alphabet = alphabet feature = 0 feature < current alphabet size feature++ counter get feature >= minimum count pruned alphabet lookup current alphabet lookup index feature pruned alphabet stop growth pruned alphabet writes a list features that not occur at or above specified cutoff to pruned one per line can then be passed to a stopword filter additional stopwords write pruned words pruned minimum count i o print writer out = print writer pruned alphabet current alphabet = get data alphabet feature = 0 feature < current alphabet size feature++ counter get feature < minimum count out current alphabet lookup feature out close add all pruned words to internal stoplist a simple tokenizer add pruned words to stoplist simple tokenizer tokenizer minimum count alphabet current alphabet = get data alphabet feature = 0 feature < current alphabet size feature++ counter get feature < minimum count tokenizer stop current alphabet lookup feature list most words addition to a stop write words total words i o print writer out = print writer alphabet current alphabet = get data alphabet sorter sorted words = sorter current alphabet size type = 0 type < current alphabet size type++ sorted words type = sorter type counter get type arrays sort sorted words max = total words current alphabet size < max max = current alphabet size rank = 0 rank < max rank++ type = sorted words rank get out current alphabet lookup type out close serial u = 1 
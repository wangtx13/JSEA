2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e types generated name matrix that allows arbitrary number dimensions simply uses a flat also provides utilities doing arbitrary dimensional indexing link #single index link #single to indices created tue sep 16 14 52 37 2003 author <a href= mailto casutton > charles sutton< a> $ matrixn v 1 1 2007 10 22 21 37 39 exp $ matrixn dense matrix cloneable num dimensions sizes create a 1 d matrix given values matrixn vals num dimensions = 1 sizes = 1 sizes 0 = vals length values = vals clone create a matrix given dimensions szs an containing maximum each dimension matrixn szs num dimensions = szs length sizes = szs clone sizes = szs total = 1 j = 0 j < num dimensions j++ total = sizes j values = total create a matrix given dimensions and given values szs an containing maximum each dimension vals a flat entries matrix in row major order matrixn szs vals num dimensions = szs length sizes = szs clone values = vals clone get num dimensions num dimensions get dimensions szs i = 0 i < num dimensions i++ szs i = sizes i num dimensions value indices values single index indices set value indices value values single index indices = value constant matrix clone matrix matrixn constructor will clone arrays matrixn sizes values clone clone matrix single index indices single index sizes indices so it will be useful a general dereferencing utility multidimensional arrays single index szs indices idx = 0 dim = 0 dim < indices length dim++ idx = idx szs dim + indices dim idx n o t e cut n pasted to other single to indices method!! single to indices single indices must be a better way to size = 1 i = 0 i < num dimensions i++ size = sizes i dim = 0 dim < num dimensions dim++ size = sizes dim indices dim = single size single = single % size just a utility function arbitrary dimensional matrix dereferencing n o t e cut n paste from other single to indices method!! single to indices single indices szs numd = indices length numd == szs length must be a better way to size = 1 i = 0 i < numd i++ size = szs i dim = 0 dim < numd dim++ size = szs dim indices dim = single size single = single % size equals o o matrixn could be extended to work all matrixes matrixn m2 = matrixn o num dimensions == m2 num dimensions sizes equals m2 sizes values equals m2 values a one dimensional representation matrix caller must not modify value an values where index 0 major index etc to values test referencing and dereferencing m1 = 1 0 2 0 3 0 4 0 idx1 = 1 matrixn a = matrixn m1 out checking 1 d a single to indices 3 idx1 out idx1 0 out a single index idx1 out checking 2 d sizes = 2 3 m1 = 6 i = 0 i < 6 i++ m1 i = 2 0 i a = matrixn sizes m1 idx1 = 2 a single to indices 5 idx1 out 5 => + idx1 0 + + idx1 1 + => + a single index idx1 out a value idx1 out checking 3 d sizes = 2 3 4 idx1 = 3 m1 = 24 i = 0 i < 24 i++ m1 i = 2 0 i a = matrixn sizes m1 a single to indices 21 idx1 out 21 => + idx1 0 + + idx1 1 + + idx1 2 + => + a single index idx1 out a value idx1 serialization garbage serial u = 7963668115823191655 l 
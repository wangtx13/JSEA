2003 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e classify tui logging iterator random bit set list collections io classify pipe pipe iterator types a command line tool manipulating instance lists example reducing feature space gain author andrew mc callum <a href= mailto >mccallum edu< a> vectors2 vectors logger logger = logger get logger vectors2 vectors get name command option input = command option vectors2 vectors input f i l e read instance list from using indicates stdin command option output = command option vectors2 vectors output f i l e write pruned instance list to use training etc you are splitting list using indicates stdin command option training = command option vectors2 vectors training f i l e training vectors write training set instance list to or use output you are only pruning features using indicates stdout command option test = command option vectors2 vectors testing f i l e test vectors write test set instance list to using indicates stdout command option validation = command option vectors2 vectors validation f i l e validation vectors write validation set instance list to using indicates stdout command option training proportion = command option vectors2 vectors training portion d e i m a l 1 0 fraction 0 0 1 0 instances that should be used training command option validation proportion = command option vectors2 vectors validation portion d e i m a l 0 0 fraction 0 0 1 0 instances that should be used validation command option random seed = command option vectors2 vectors random seed i n t e g e r 0 random seed randomly selecting a proportion instance list training command option prune infogain = command option vectors2 vectors prune infogain n 0 reduce features to top n gain command option prune count = command option vectors2 vectors prune count n 0 reduce features to those that occur more than n times command option prune doc freq = command option vectors2 vectors prune document freq n 0 reduce features to those that occur in more than n contexts command option min f = command option vectors2 vectors min idf n u m b e r 0 remove frequent features inverse document frequency less than value command option max f = command option vectors2 vectors max idf n u m b e r p o s i t i v e i n f i n i t y remove rare features inverse document frequency greater than value command option vector to sequence = command option vectors2 vectors vector to sequence t r u e| f a l s e convert feature vector s to feature sequence s command option hide targets = command option vectors2 vectors hide targets t r u e| f a l s e hide targets command option reveal targets = command option vectors2 vectors reveal targets t r u e| f a l s e reveal targets not found i o process command line options command option set summary vectors2 vectors a tool manipulating instance lists feature vectors command option process vectors2 vectors print some helpful messages cases length == 0 command option get list vectors2 vectors print usage exit 1 random r = random seed was invoked ? random random seed value random t = training proportion value v = validation proportion value logger info training portion = +t logger info validation portion = +v logger info testing portion = + 1 v t logger info prune info gain = +prune infogain value logger info prune count = +prune count value logger info prune df = +prune doc freq value logger info idf range = +min f value + + max f value read instance list instance list instances = instance list load input value t == 1 0 !vector to sequence value ! prune infogain was invoked || prune count was invoked || prune doc freq was invoked || min f was invoked || max f was invoked ! hide targets was invoked || reveal targets was invoked logger warning vectors2 vectors was invoked but did not change anything instances save training value exit 0 prune infogain was invoked || prune doc freq was invoked || prune count was invoked || min f was invoked || max f was invoked are we also splitting instances? current doesn t want to so i m not changing it but i t know a reason d m t != 1 0 unsupported operation infogain count processing test or validation lists not yet supported prune count was invoked || prune doc freq was invoked || min f was invoked || max f was invoked feature count tool counter = feature count tool instances counter count min docs = 0 max docs = m a x v a l u e min count = 0 max count = m a x v a l u e prune count was invoked min count = prune count value prune doc freq was invoked min docs = prune doc freq value out min docs + min docs max f was invoked min docs = math floor instances size math exp max f value min f was invoked max docs = math ceil instances size math exp min f value alphabet old alphabet = instances get data alphabet alphabet alphabet = counter get pruned alphabet min docs max docs min count max count check which type data element instances contain instance first instance = instances get 0 first instance get data feature sequence feature sequences it s necessary to create a instance list in order to make sure that data alphabet correct noop pipe = noop alphabet instances get target alphabet instance list instance list = instance list pipe iterate over instances in old list adding up occurrences features num features = old alphabet size counts = num features ii = 0 ii < instances size ii++ instance instance = instances get ii feature sequence fs = feature sequence instance get data fs add feature weights to counts instance instance instance next iterate over same list again adding each instance to list after pruning instances size > 0 instance = instances get 0 feature sequence fs = feature sequence instance get data fs prune alphabet instance list add pipe instance from instance fs instance get target instance get name instance get source instances remove 0 logger info features + old alphabet size + > + alphabet size make list official list instances = instance list first instance get data feature vector feature vector alphabet alpha2 = alphabet noop pipe2 = noop alpha2 instances get target alphabet instance list instances2 = instance list pipe2 num features = old alphabet size counts = num features bit set bs = bit set num features feature = 0 feature < num features feature++ alphabet contains old alphabet lookup feature bs set feature logger info pruning + num features bs cardinality + features out + num features + leaving + bs cardinality + features feature selection fs = feature selection old alphabet bs ii = 0 ii < instances size ii++ instance instance = instances get ii feature vector fv = feature vector instance get data feature vector fv2 = feature vector feature vector fv alpha2 fs instances2 add instance fv2 instance get target instance get name instance get source instances get instance weight ii instance un lock instance set data so it can be freed garbage collector instances = instances2 unsupported operation pruning features from + first instance get get name + not currently supported prune infogain value > 0 alphabet alpha2 = alphabet noop pipe2 = noop alpha2 instances get target alphabet instance list instances2 = instance list pipe2 info gain ig = info gain instances feature selection fs = feature selection ig prune infogain value ii = 0 ii < instances size ii++ instance instance = instances get ii feature vector fv = feature vector instance get data feature vector fv2 = feature vector feature vector fv alpha2 fs instance un lock instance set data so it can be freed garbage collector instances2 add pipe2 instance from instance fv2 instance get target instance get name instance get source instances get instance weight ii instances = instances2 vector to sequence value convert feature vector s to feature sequence s simply randomizing order all word occurrences including repetitions due to values larger than 1 alphabet alpha = instances get data alphabet noop pipe2 = noop alpha instances get target alphabet instance list instances2 = instance list pipe2 ii = 0 ii < instances size ii++ instance instance = instances get ii feature vector fv = feature vector instance get data list seq = list loc = 0 loc < fv num locations loc++ count = 0 count < fv value at location loc count++ seq add fv index at location loc collections shuffle seq indices = seq size i = 0 i < indices length i++ indices i = seq get i value feature sequence fs = feature sequence alpha indices instance un lock instance set data so it can be freed garbage collector instances2 add pipe2 instance from instance fs instance get target instance get name instance get source instances get instance weight ii instances = instances2 output was invoked write instance list instances output value training was invoked write instance list instances training value illegal argument you must specify a to write to using output filename vector to sequence value convert feature vector s to feature sequence s simply randomizing order all word occurrences including repetitions due to values larger than 1 alphabet alpha = instances get data alphabet noop pipe2 = noop alpha instances get target alphabet instance list instances2 = instance list pipe2 ii = 0 ii < instances size ii++ instance instance = instances get ii feature vector fv = feature vector instance get data list seq = list loc = 0 loc < fv num locations loc++ count = 0 count < fv value at location loc count++ seq add fv index at location loc collections shuffle seq indices = seq size i = 0 i < indices length i++ indices i = seq get i value feature sequence fs = feature sequence alpha indices instance un lock instance set data so it can be freed garbage collector instances2 add pipe2 instance from instance fs instance get target instance get name instance get source instances get instance weight ii instances = instances2 output was invoked write instance list instances output value training proportion was invoked || validation proportion was invoked split into three lists instance list instance lists = instances split r t 1 t v v and write them out instance lists 0 size > 0 write instance list instance lists 0 training value instance lists 1 size > 0 write instance list instance lists 1 test value instance lists 2 size > 0 write instance list instance lists 2 validation value hide targets was invoked iterator< instance> iter = instances iterator iter has next instance instance = iter next instance un lock instance set property target instance get target instance set target instance lock output was invoked write instance list instances output value reveal targets was invoked iterator< instance> iter = instances iterator iter has next instance instance = iter next instance un lock instance set target instance get property target instance lock output was invoked write instance list instances output value write instance list instance list instances not found i o logger info writing instance list to +file instances save 
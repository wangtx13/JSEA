2011 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e semi supervised tui io io input stream io output stream io reader io input stream io output stream io reader list hash map random logging logger regex pattern r f max lattice multi segmentation evaluator noop transducer trainer simple tagger simple tagger sentence2 feature vector sequence token accuracy evaluator transducer transducer evaluator transducer trainer semi supervised r f trainer g e semi supervised f s t constraint semi supervised constraints g e constraint semi supervised constraints one label k l g e constraints semi supervised constraints one label l2 range g e constraints semi supervised pr r f trainer p r semi supervised pr constraints one label l2 ind p r constraints semi supervised pr constraints p r constraint pipe pipe pipe iterator line group iterator types alphabet types feature vector types instance list types sequence command option logger maths simple tagger that trains r fs expectation constraints rather than labeled data s trains tests or runs a generic r f based sequence tagger <p> training and test files consist blocks lines one block each instance separated blank lines each block lines should have first form specified input link simple tagger sentence2 feature vector sequence a variety command line options control operation program described in comments link #main author gregory druck <a href= mailto gdruck >gdruck edu< a> 1 0 simple tagger constraints logger logger = logger get logger simple tagger constraints get name no <code> simple tagger< code> allowed simple tagger constraints command option gaussian variance option = command option simple tagger constraints gaussian variance d e i m a l 10 0 gaussian prior variance used training command option q gaussian variance option = command option simple tagger constraints q gaussian variance d e i m a l 10 0 gaussian prior variance used in e step p r training command option train option = command option simple tagger constraints train true|false whether to train command option test option = command option simple tagger constraints test lab or seg=start 1 1 start n n test measuring labeling or segmentation start i i accuracy command option model option = command option simple tagger constraints model f i l e n a m e filename reading train run or saving train model command option training fraction option = command option simple tagger constraints training proportion d e i m a l 0 5 fraction data to use training in a random split command option random seed option = command option simple tagger constraints random seed i n t e g e r 0 random seed randomly selecting a proportion instance list training command option orders option = command option simple tagger constraints orders o m m a s e p d e i m a l s 1 list label markov orders and backoff command option forbidden option = command option simple tagger constraints forbidden r e g e x p \\s label1 label2 transition forbidden it matches command option allowed option = command option simple tagger constraints allowed r e g e x p label1 label2 transition allowed only it matches command option option = command option simple tagger constraints label s t r i n g o label initial context and uninteresting tokens command option penalty option = command option simple tagger constraints penalty kl|l2 l2 penalty function constraint violation command option option = command option simple tagger constraints ge|pr ge to use command option iterations option = command option simple tagger constraints iterations i n t e g e r 500 number training iterations command option viterbi output option = command option simple tagger constraints viterbi output true|false print viterbi periodically during training command option connected option = command option semi sup simple tagger fully connected true|false include all allowed transitions even those not in training data command option weights option = command option semi sup simple tagger weights sparse|some dense|dense some dense use sparse some dense using a heuristic or dense features on transitions command option training option = command option simple tagger constraints training true|false training from model specified model command option n best option = command option simple tagger constraints n best i n t e g e r 1 how many answers to output command option cache size option = command option simple tagger constraints cache size i n t e g e r 100000 how much state to memoize in n best decoding command option include input option = command option simple tagger constraints include input true|false whether to include input features when printing decoding output command option num threads = command option simple tagger constraints threads i n t e g e r 1 number threads to use r f training command option num resets = command option simple tagger constraints resets i n t e g e r 4 number l b f g s resets to use command option list command options = command option list training testing and running a generic tagger command option gaussian variance option q gaussian variance option train option iterations option test option training fraction option model option random seed option orders option forbidden option allowed option option viterbi output option connected option weights option penalty option option training option n best option cache size option include input option num threads num resets create and train a r f model from given training data optionally testing it on given test data training training data testing test data possibly <code>null< code> constraints constraints crf model eval accuracy evaluator possibly <code>null< code> iterations number training iterations var gaussian prior variance resets number resets trained model r f train g e instance list training instance list testing list< g e constraint> constraints r f crf transducer evaluator eval iterations var resets logger info training on + training size + instances testing != logger info testing on + testing size + instances num threads value > 0 r f trainer g e trainer = r f trainer g e crf constraints num threads value eval != trainer add evaluator eval trainer set gaussian prior variance var trainer set num resets resets trainer train training iterations crf create and train a r f model from given training data optionally testing it on given test data training training data testing test data possibly <code>null< code> constraints constraints crf model eval accuracy evaluator possibly <code>null< code> iterations number training iterations var gaussian prior variance trained model r f train p r instance list training instance list testing list< p r constraint> constraints r f crf transducer evaluator eval iterations var logger info training on + training size + instances testing != logger info testing on + testing size + instances num threads value > 0 r f trainer p r trainer = r f trainer p r crf constraints num threads value trainer add evaluator eval trainer set p gaussian prior variance var trainer train training iterations iterations crf r f get r f instance list training orders label forbidden allowed connected pattern forbidden pat = pattern compile forbidden pattern allowed pat = pattern compile allowed r f crf = r f training get pipe pipe start name = crf add order n states training orders label forbidden pat allowed pat connected i = 0 i < crf num states i++ crf get state i set initial weight transducer i m p o s s i b l e w e i g h t crf get state start name set initial weight 0 0 crf set weights dimension densely crf test a transducer on given test data evaluating accuracy given evaluator model a <code> transducer< code> eval accuracy evaluator testing test data test transducer trainer tt transducer evaluator eval instance list testing eval evaluate instance list tt testing testing apply a transducer to an input sequence to produce k highest scoring output sequences model <code> transducer< code> input input sequence k number answers to k highest scoring output sequences sequence apply transducer model sequence input k sequence answers k == 1 answers = sequence 1 answers 0 = model transduce input max lattice lattice = max lattice model input cache size option value answers = lattice best output sequences k to sequence 0 answers command line wrapper to train test or run a generic r f based tagger command line arguments options shell and quoting should be added needed <dl> <dt><code> help< code> <em>boolean< em>< dt> <dd> print command line option usage give <code>true< code> longer documentation <code>false< code> < dd> <dt><code> prefix code< code> <em> code< em>< dt> <dd> you want run before any other interpreted note that text interpreted without modification so unlike some other options you need to include any necessary s < dd> <dt><code> gaussian variance< code> <em>positive number< em>< dt> <dd> gaussian prior variance used training 10 0 < dd> <dt><code> train< code> <em>boolean< em>< dt> <dd> whether to train <code>false< code> < dd> <dt><code> iterations< code> <em>positive integer< em>< dt> <dd> number training iterations 500 < dd> <dt><code> test< code> <code>lab< code> or <code>seg=< code><em>start 1< em><code> < code><em>continue 1< em><code> < code> <code> < code><em>start n< em><code> < code><em>continue n< em>< dt> <dd> test measuring labeling or segmentation <em>start i< em> <em>continue i< em> accuracy no testing < dd> <dt><code> training proportion< code> <em>number between 0 and 1< em>< dt> <dd> fraction data to use training in a random split 0 5 < dd> <dt><code> model file< code> <em>filename< em>< dt> <dd> filename reading train run or saving train model < dd> <dt><code> random seed< code> <em>integer< em>< dt> <dd> random seed randomly selecting a proportion instance list training 0 < dd> <dt><code> orders< code> <em>comma separated integers< em>< dt> <dd> list label markov orders and backoff 1 < dd> <dt><code> forbidden< code> <em>regular expression< em>< dt> <dd> <em>label 1< em><code> < code><em>label 2< em> matches expression corresponding transition forbidden <code>\\s< code> nothing forbidden < dd> <dt><code> allowed< code> <em>regular expression< em>< dt> <dd> <em>label 1< em><code> < code><em>label 2< em> does not match expression corresponding expression forbidden <code> < code> everything allowed < dd> <dt><code> label< code> <em>string< em>< dt> <dd> label initial context and uninteresting tokens <code> o< code> < dd> <dt><code> viterbi output< code> <em>boolean< em>< dt> <dd> print viterbi periodically during training <code>false< code> < dd> <dt><code> fully connected< code> <em>boolean< em>< dt> <dd> include all allowed transitions even those not in training data <code>true< code> < dd> <dt><code> weights< code> <em>sparse|some dense|dense< em>< dt> <dd> create sparse some dense using a heuristic or dense features on transitions <code>some dense< code> < dd> <dt><code> n best< code> <em>positive integer< em>< dt> <dd> number answers to output when applying model 1 < dd> <dt><code> include input< code> <em>boolean< em>< dt> <dd> whether to include input features when printing decoding output <code>false< code> < dd> <dt><code> threads< code> <em>positive integer< em>< dt> <dd> number threads r f training 1 < dd> < dl> remaining arguments <ul> <li><em>training data file< em> training < li> <li><em>training and test data file< em> training and testing random split< li> <li><em>training data file< em> <em>test data file< em> training and testing from separate files< li> <li><em>test data file< em> testing< li> <li><em>input data file< em> applying to data unlabeled < li> < ul> an occurs start time = current time millis reader training = test = reader constraints = instance list training data = test data = rest = command options process options rest == length command options print usage illegal argument missing data s train option value training = reader rest test option value != test = reader rest args+1 constraints = reader rest args+2 constraints = reader rest args+1 test = reader rest pipe p = r f crf = transducer evaluator eval = training option value || !train option value model option value == command options print usage illegal argument missing model option input stream s = input stream input stream model option value crf = r f s read s close p = crf get input pipe p = simple tagger sentence2 feature vector sequence p get target alphabet lookup index option value train option value p set target processing training data = instance list p training data add thru pipe line group iterator training pattern compile ^\\s $ logger info number features in training data +p get data alphabet size test option value != test != test data = instance list p test data add thru pipe line group iterator test pattern compile ^\\s $ random r = random random seed option value instance list training lists = training data split r training fraction option value 1 training fraction option value training data = training lists 0 test data = training lists 1 test option value != p set target processing test data = instance list p test data add thru pipe line group iterator test pattern compile ^\\s $ p set target processing test data = instance list p test data add thru pipe line group iterator test pattern compile ^\\s $ logger info number predicates +p get data alphabet size test option value != test option value starts lab eval = token accuracy evaluator instance list training data test data training testing test option value starts seg= pairs = test option value substring 4 split pairs length < 1 command options print usage illegal argument missing segment start labels + test option value start tags = pairs length tags = pairs length i = 0 i < pairs length i++ pair = pairs i split \\ pair length != 2 command options print usage illegal argument incorrectly specified segment start and end labels + pairs i start tags i = pair 0 tags i = pair 1 eval = multi segmentation evaluator instance list training data test data training testing start tags tags command options print usage illegal argument invalid test option + test option value p target processing alphabet targets = p get target alphabet buffer buf = buffer labels i = 0 i < targets size i++ buf append append targets lookup i to logger info buf to train option value crf == crf = get r f training data orders option value option value forbidden option value allowed option value hash map< > constraints = f s t constraint load g e constraints constraints training data option value equals ignore ge list< g e constraint> constraints list = list< g e constraint> penalty option value equals ignore kl one label k l g e constraints ge constraints = one label k l g e constraints fi constraints key set dist = constraints get fi all same = sum = 0 prob = dist length = 0 < dist length li++ prob = dist 0 ! maths almost equals dist 0 dist 1 all same = infinite prob prob = 0 sum += prob !all same runtime a k l divergence penalty cannot be used target ranges! ! maths almost equals sum 1 runtime targets must sum to 1 when using a k l divergence penalty! ge constraints add constraint fi prob 1 constraints list add ge constraints penalty option value equals ignore l2 one label l2 range g e constraints ge constraints = one label l2 range g e constraints fi constraints key set dist = constraints get fi = 0 < dist length li++ ! infinite dist 0 ge constraints add constraint fi dist 0 dist 1 1 constraints list add ge constraints runtime unknown penalty + penalty option value crf = train g e training data test data constraints list crf eval iterations option value gaussian variance option value num resets value option value equals ignore pr list< p r constraint> constraints list = list< p r constraint> penalty option value equals ignore l2 one label l2 ind p r constraints pr constraints = one label l2 ind p r constraints fi constraints key set dist = constraints get fi = 0 < dist length li++ ! infinite dist 0 ! maths almost equals dist 0 dist 1 runtime support range constraints in p r in development + penalty option value ! infinite dist 0 pr constraints add constraint fi dist 0 q gaussian variance option value constraints list add pr constraints penalty option value equals ignore kl runtime k l divergence not supported p r runtime unknown penalty + penalty option value crf = train p r training data test data constraints list crf eval iterations option value gaussian variance option value runtime unknown algorithm + option value model option value != output stream s = output stream output stream model option value s write crf s close crf == model option value == command options print usage illegal argument missing model option input stream s = input stream input stream model option value crf = r f s read s close eval != test noop transducer trainer crf eval test data include input = include input option value i = 0 i < test data size i++ sequence input = sequence test data get i get data sequence outputs = apply crf input n best option value k = outputs length = a = 0 a < k a++ outputs a size != input size logger info failed to decode input sequence + i + answer + a = !error j = 0 j < input size j++ buffer buf = buffer a = 0 a < k a++ buf append outputs a get j to append include input feature vector fv = feature vector input get j buf append fv to out buf to out time = current time millis start time 1000 err took + time + seconds 
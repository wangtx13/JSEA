2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e author andrew mc callum <a href= mailto >mccallum edu< a> pipe iterator types instance io iterator regex net u r i net u r i syntax pipe pipe types iterator perhaps more properly called a line pattern iterator reads through a and one instance per line based on a regular expression <p> you have data form <pre> name label data < pre> and a link pipe <code>instance pipe< code> you could read instances using <pre> instance list instances = instance list instance pipe instances add thru pipe csv iterator reader data \\w+ \\s+ \\w+ \\s+ 3 2 1 data target name field indices < pre> csv iterator iterator< instance> line number reader reader pattern line regex uri group target group data group current line csv iterator reader input pattern line regex data group target group uri group reader = line number reader input line regex = line regex target group = target group data group = data group uri group = uri group data group <= 0 illegal state you must extract a data field current line = reader read line i o e illegal state csv iterator reader input line regex data group target group uri group input pattern compile line regex data group target group uri group csv iterator filename line regex data group target group uri group io not found reader filename pattern compile line regex data group target group uri group pipe input iterator instance next uri str = data = target = matcher matcher = line regex matcher current line matcher find uri group > 0 uri str = matcher group uri group target group > 0 target = matcher group target group data group > 0 data = matcher group data group illegal state line # +reader get line number + does not match regex + current line uri uri str == uri = csvline +reader get line number uri = uri str data != instance carrier = instance data target uri current line = reader read line i o e illegal state carrier has next current line != remove illegal state iterator< instance> does not support remove 
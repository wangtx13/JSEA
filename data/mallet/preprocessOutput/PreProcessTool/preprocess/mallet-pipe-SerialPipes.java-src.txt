2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e pipe reflect list collection iterator list io pipe pipe pipe iterator empty instance iterator types alphabet types instance convert an instance through a sequence pipes author andrew mc callum <a href= mailto >mccallum edu< a> serial pipes pipe serializable list< pipe> pipes serial pipes pipes = list< pipe> serial pipes pipe pipes pipes = list< pipe> pipes length i = 0 i < pipes length i++ pipes add pipes i resolve alphabets serial pipes collection< pipe> pipe list pipes = list< pipe> pipe list resolve alphabets predicate predicate pipe p serial pipes serial pipes from suffix predicate test starting pipes i = 0 i < pipes size test starting pipes predicate pipes get i serial pipes pipes sub list i pipes size 1 illegal argument no pipes in serial pipe satisfied starting predicate serial pipes serial pipes from range start end serial pipes pipes sub list start end resolve alphabets alphabet da = ta = pipe p pipes p preceeding pipe data alphabet notification da da = p get data alphabet p preceeding pipe target alphabet notification ta ta = p get target alphabet data alphabet = da target alphabet = ta add pipe pipe remove i removed because pipes should be immutable to be safe you need an augmented pipe you can make a serial pipes containing one set target processing look and process target set target processing look and process target pipe p pipes p set target processing look and process target iterator< instance> iterator from iterator< instance> source pipes size == 0 empty instance iterator iterator< instance> ret = pipes get 0 iterator from source i = 1 i < pipes size i++ ret = pipes get i iterator from ret ret size pipes size pipe get pipe index pipe ret pipe = ret pipe = pipes get index e err getting pipe index = + index + + e get message ret pipe allows access to underlying collection pipes use caution list< pipe> pipes pipes to buffer sb = buffer pipe p pipes sb append p to + sb to serialization serial u = 1 u r r e n t s e r i a l v e r s i o n = 0 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write pipes read input stream in i o not found = in read pipes = list in read resolve alphabets 
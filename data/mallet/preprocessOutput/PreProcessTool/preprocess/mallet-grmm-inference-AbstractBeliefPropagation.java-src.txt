inference logging logger logging level list iterator io types logger base umplementations belief propagation general factor graphs manages arrays messages computing beliefs from messages and convergence thresholds <p > how to send individual messages e g sum product max product etc are mananged istances link # message strategy concrete subclasses decide which order to send messages in author charles sutton $ belief propagation v 1 1 2007 10 22 21 37 49 exp $ belief propagation inferencer logger logger = logger get logger belief propagation get name diagnose convergence = normalize beliefs = total messages sent = 0 my messages sent = 0 messages sent at start = 0 threshold = 0 00001 use caching = message strategy messager iter used belief propagation sum product message strategy belief propagation message strategy messager messager = messager message strategy get messager messager belief propagation set messager message strategy messager messager = messager total number messages all b p inferencers have sent in current image get total messages sent total messages sent total number messages inferencer has sent since its creation get messages sent my messages sent number messages sent during last call to compute marginals get messages used last time my messages sent messages sent at start reset messages sent at start messages sent at start = my messages sent that maps to from to lambda message sent from node from to node to message messages message old messages messages from variable > factor factor bel factor graph mdl current retrieve cached messages factor graph m messages = message m get inference cache get cache messages factor graph m m set inference cache get messages clear old messages old messages = copy old messages clear old messages old messages = messages duplicate has converged has converged threshold has converged threshold max diff = n e g a t i v e i n f i n i t y factor best old msg = best msg = message iterator msg it = old messages iterator msg it has next factor old msg = factor msg it next from = msg it from to = msg it to factor msg = messages get from to old msg != msg != message went from nonnull to + from + > + to iterator it = old msg assignment iterator it has next assignment assn = assignment it next val1 = old msg value assn val2 = msg value assn diff = math abs val1 val2 diff > threshold diagnose convergence err not converged difference + diff + from + old msg + > + msg diff > max diff max diff = diff best old msg = old msg best msg = msg diagnose convergence err o n v e r g e d max absolute difference + max diff + from + best old msg + > + best msg init old messages factor graph fg old messages = message fg use caching fg get inference cache get != logger info async loopy b p reusing previous marginals retrieve cached messages fg copy old messages iterator it = fg factors iterator it has next factor factor = factor it next var set varset = factor var set iterator vit = varset iterator vit has next variable var = variable vit next old messages put var factor table factor var old messages put factor var table factor var assigned vertex ptls init graph factor graph mdl mdl current = mdl num v = mdl num variables bel = factor num v cache = mdl get inference cache get use caching cache != messages = message cache messages = message mdl setup self messages vertex potentials iterator it = mdl get vertices iterator it has next variable var = variable it next factor ptl = mdl factor var var ptl != in log space logger finer belief propagation using log space set message i i log table factor table factor ptl set message i i ptl init old messages mdl messager set message messages old messages send message factor graph mdl variable from factor to total messages sent++ my messages sent++ err general utils name + send message +from+ > +to messager send message mdl from to send message factor graph mdl factor from variable to total messages sent++ my messages sent++ err general utils name + send message +from+ > +to messager send message mdl from to done graph factor graph mdl clear old messages free up memory use caching cache messages mdl iterations used iter used message strategy set message message msgs message old msgs send message factor graph mdl factor from variable to send message factor graph mdl variable from factor to factor msg product factor product idx exclude msg from message strategy message strategy message messages message old messages set message message msgs message old msgs messages = msgs old messages = old msgs factor msg product factor product idx exclude msg from product == product = create empty factor var idx message to msgs iterator it = messages to messages iterator idx it has next it next j = it current from idx factor msg = it current message j != exclude msg from product multiply msg product var set size <= 2 product factor create empty factor var idx factor product messages in log space product = log table factor variable messages idx2obj idx product = table factor variable messages idx2obj idx product sum product message strategy message strategy serializable damping = 1 0 sum product message strategy sum product message strategy damping damping = damping send message factor graph mdl factor from variable to from idx = messages get index from to idx = messages get index to factor product = from duplicate msg product product from idx to idx factor msg = product marginalize to msg normalize logger loggable level f i n e s t logger info m s g +from+ > +to logger info f a t o r +from dump to logger info m s g +msg dump to logger info e n d m s g +from+ > +to msg var set size == 1 msg var set contains to make damped update from idx to idx msg send message factor graph mdl variable from factor to err sum prod message from idx = messages get index from to idx = messages get index to factor msg = msg product from idx to idx msg normalize msg var set size == 1 msg var set contains from messages put from idx to idx msg make damped update from idx to idx factor msg damping < 1 0 there s damping factor old msg = old messages get from idx to idx factor old msg = messages get from idx to idx old msg != table factor old tbl = table factor old msg duplicate old tbl normalize old tbl times equals 1 damping table factor tbl = table factor msg tbl times equals damping tbl plus equals old tbl msg = tbl messages put from idx to idx msg serialization serial u = 1 u u r e n t s e r i a l v e r s i o n = 2 write output stream out i o out write out write u u r e n t s e r i a l v e r s i o n out write damping read input stream in i o not found in read = in read 2 <= damping = in read max product message strategy message strategy serializable send message factor graph mdl factor from variable to err max prod message from idx = messages get index from to idx = messages get index to factor product = from duplicate msg product product from idx to idx factor msg = product extract max to msg normalize msg var set size == 1 msg var set contains to messages put from idx to idx msg send message factor graph mdl variable from factor to err max prod message from idx = messages get index from to idx = messages get index to factor msg = msg product from idx to idx msg normalize msg var set size == 1 msg var set contains from messages put from idx to idx msg serialization serial u = 1 u u r e n t s e r i a l v e r s i o n = 1 write output stream out i o out write out write u u r e n t s e r i a l v e r s i o n read input stream in i o not found in read in read factor lookup marginal variable var idx = mdl current get index var idx < 0 || idx > bel length illegal argument cannot find variable +var+ in factor graph +mdl current bel idx == factor marg = messager msg product idx m i n v a l u e normalize beliefs marg normalize marg var set size == 1 invalid marginal var + var + + marg marg var set contains var invalid marginal var + var + + marg bel idx = marg bel idx dump messages dump report time err belief propagation total messages sent = +total messages sent dump print writer writer messages dump writer serialization serial u = 1 seralization incompatible changes are made to these classes then smarts can be added to these backward compatibility write output stream out i o out write read input stream in i o not found in read factor lookup marginal var set size == 1 lookup marginal get 0 list factors = mdl current all factors factors empty unsupported operation cannot compute marginal + + must be either a single variable or a factor in graph lookup marginal factors factor lookup marginal var set vs list factors factor marginal = factors multiply all factors iterator fit = factors iterator fit has next factor factor = factor fit next iterator it = vs iterator it has next variable var = variable it next factor msg = messages get var factor msg != inferencer was stopped early there may be no message marginal multiply msg marginal normalize marginal lookup log joint assignment assn accum = 0 0 compute using b p factorization prod s p x s ^ deg s 1 iterator it = mdl current variables iterator it has next variable var = variable it next factor ptl = lookup marginal var deg = mdl current get degree var deg != 1 note that below works correctly degree 0! accum = deg 1 ptl log value assn prod p x iterator it = mdl current var set iterator it has next var set var set = var set it next factor p12 = lookup marginal var set logphi = p12 log value assn accum += logphi accum 
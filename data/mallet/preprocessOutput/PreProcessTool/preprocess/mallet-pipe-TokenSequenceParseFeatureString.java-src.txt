2002 m a l l e t m achine languag e ~mccallum 1 0 further ` l i e n s e pipe regex pattern regex matcher logging io types instance types token types token sequence logger convert in each field <code> token text< code> to a list strings space delimited add each a feature to token <code>real valued< code> then treat position in list feature name and value a otherwise feature name itself and value 1 0 <p> modified to allow feature names and values to be specified eg feature name1=feature value1 feature name2=feature value2 name value separator here = can be specified <p> your data consists feature value pairs eg <code>height=10 7 width=3 6 length=1 7< code> use <code>new token sequence parse feature = < code> format typically used sparse data in which most features are equal to 0 in any given instance <p> your data consists only values and position determines which feature value eg <code>10 7 3 6 1 7< code> use <code>new token sequence parse feature < code> format typically used data that has a small number features that all have non zero values most time <p> your data in form named binary indicator variables eg <code>yellow quacks has webbed feet< code> use constructor <code>new token sequence parse feature < code> each token will be interpreted name a feature whose value 1 0 author aron culotta <a href= mailto culotta >culotta edu< a> token sequence parse feature pipe serializable real valued are these real valued features? specify feature names are feature names given well? name value separator what separates name from value? a n t b e w h i t e s p a e! real valued interpret each data token a and associate it a feature called feature# k where k order token starting 0 note that option currently ignored <code> specify feature names< code> specify feature names interpret each data token a feature name value pair separated some delimiter which equals sign = unless otherwise specified name value separator use a other than = to separate name value pairs colon a choice note that cannot consist any whitespace tokens stream will already have been split token sequence parse feature real valued specify feature names name value separator real valued = real valued name value separator trim length ==0 illegal argument name value separator can t be whitespace name value separator = name value separator specify feature names = specify feature names token sequence parse feature real valued specify feature names real valued specify feature names = token sequence parse feature real valued real valued = instance pipe instance carrier token sequence ts = token sequence carrier get data i=0 i < ts size i++ token t = ts get i values = t get text split \\s+ j=0 j < values length j++ specify feature names name and value = values j split name value separator name and value length != 2 no feature name use token feature t set feature value token= +values j 1 0 t set feature value name and value 0 parse name and value 1 real valued t set feature value feature# + j parse values j t set feature value values j 1 0 carrier set data ts carrier serialization serial u = 1 u r r e n t s e r i a l v e r s i o n = 1 write output stream out i o out write u r r e n t s e r i a l v e r s i o n out write real valued out write specify feature names out write name value separator read input stream in i o not found = in read real valued = in read >= u r r e n t s e r i a l v e r s i o n specify feature names = in read name value separator = in read 
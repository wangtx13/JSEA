2003 university pennsylvania m a l l e t m achine languag e ~mccallum 1 0 furtherinformation ` l i e n s e author aron culotta pipe io i o io input stream io output stream extract span extract tokenization types link simple tagger sentence2 token sequence to use slink tokenizations use extract simple tagger sentence2 tokenization simple tagger sentence2 token sequence creates a <code> simple tagger sentence2 tokenization< code> instance we include tokens features simple tagger sentence2 tokenization creates a <code> simple tagger sentence2 tokenization< code> instance which includes tokens features iff supplied argument simple tagger sentence2 tokenization inc inc takes an instance data type or and creates an instance type tokenization each token in sequence gets test line preceding it and once feature value 1 each feature in line example a b d e and target processing off then text would be a b first token and d e second also features a and b would be set first token and d and e second last element in current token taken target label so in previous example b would have been label first sequence instance pipe instance carrier input data = carrier get data label alphabet labels label sequence target = tokens buffer source = buffer tokenization ts = tokenization source input data tokens = parse sentence input data input data tokens = input data illegal argument not a got + input data target processing labels = label alphabet get target alphabet target = label sequence labels tokens length l = 0 l < tokens length l++ n features target processing tokens l length < 1 illegal state missing label at line + l + instance + carrier get name n features = tokens l length 1 target add tokens l n features n features = tokens l length start = source length word = make text tokens l source append word + token tok = span source start source length 1 set tokens features f = 0 f < n features f++ tok set feature value tokens l f 1 0 f = 1 f < n features f++ tok set feature value tokens l f 1 0 ts add tok carrier set data ts target processing carrier set target target carrier serialization garbage serial u = 1 u r r e n t s e r i a l v e r s i o n = 1 write output stream out i o out write out write u r r e n t s e r i a l v e r s i o n read input stream in i o not found in read = in read 
# bezi path 1 1 2006 03 22 copyright c 1996 2006 by the original author of jhotdraw and all it contributor jhotdraw org all right reserve software is the confidential and proprietary information of jhotdraw org confidential information you shall not disclose such confidential information and shall use it only in accordance with the term of the license agreement you enter into with jhotdraw org org jhotdraw geom geom bezi path allow the construction of path consist of straight line quadratic curve and cubic curve p a bezi path represent a geometric path construct by vertex each node ha three control point c0 c1 c2 a mask define which control point are in use the path pass through c0 c1 control the curve going toward c0 c2 control the curve going away from c0 author wern randelshof 1 1 2006 03 22 move to line to and quad to add 1 0 january 20 2006 create bezi path list bezi path node shape constant control point c1 c1 m a s k 1 constant control point c2 c2 m a s k 2 convenience constant control point c1 and c2 c1 c2 m a s k c1 m a s k | c2 m a s k we cache a general path instance to speed up shape operation general path general path we cache the index of the outermost node to speed up index of outermost node out 1 value is set to close the bezi path is close define a vertex node of the bezi path p a vertex consist of three control point c0 c1 and c2 the bezi path alway pass through c0 c1 is use to control the curve toward c0 c2 is use to control the curve going away from c0 node cloneable mask is use to describe which control point in addition to c0 are in effect mask 0 control point x coordinate x 3 control point y coordinate y 3 is a hint editing tool is set to the editing tool shall keep all control point on the same line keep colinear node mask 1 node node that set to that set to node that mask that mask keep colinear that keep colinear arraycopy that x 0 x 0 3 arraycopy that y 0 y 0 3 node point2 d c0 mask 0 x 0 c0 x y 0 c0 y x 1 c0 x y 1 c0 y x 2 c0 x y 2 c0 y node mask point2 d c0 point2 d c1 point2 d c2 mask mask x 0 c0 x y 0 c0 y x 1 c1 x y 1 c1 y x 2 c2 x y 2 c2 y node x0 y0 mask 0 x 0 x0 y 0 y0 x 1 x0 y 1 y0 x 2 x0 y 2 y0 node mask x0 y0 x1 y1 x2 y2 mask mask x 0 x0 y 0 y0 x 1 x1 y 1 y1 x 2 x2 y 2 y2 get mask mask set mask value mask value set control point index point2 d p x index p x y index p y point2 d get control point index point2 d x index y index move to point2 d p move by p x x 0 p y y 0 move to x y move by x x 0 y y 0 move by dx dy i 0 i 3 i++ x i + dx y i + dy clone node that node clone that x x clone that y y clone that clone not support e internal internal init cause e to builder buf builder buf append i 0 i 3 i++ i 0 mask i i buf append buf append x buf append i buf append buf append x i buf append y buf append i buf append buf append y i buf append buf to create a instance bezi path convenience add a control point with a single coordinate c0 add point2 d c0 add node 0 c0 c0 c0 add point x y add node 0 x y x y x y convenience add a control point with three coordinate c0 c1 and c2 with a mask add mask point2 d c0 point2 d c1 point2 d c2 add node mask c0 c1 c2 convenience change a single coordinate of a control point set index coord point2 d p node c get index c x coord p x c y coord p y convenience getting a single coordinate of a control point point2 d get index coord node c get index point2 d c x coord c y coord must be call after the bezi path ha be change invalidate path general path out 1 recompute the bezi path it is invalid validate path general path general path to general path convert the bezi path into a general path general path to general path general path gp general path gp set winding rule general path w i n d e v e n o d d size 0 gp move to 0 0 gp line to 0 0 + 1 size 1 node current get 0 gp move to current x 0 current y 0 gp line to current x 0 current y 0 + 1 node previou node current previou current get 0 gp move to current x 0 current y 0 i 1 n size i n i++ previou current current get i previou mask c2 m a s k 0 current mask c1 m a s k 0 gp line to current x 0 current y 0 gp quad to current x 1 current y 1 current x 0 current y 0 current mask c1 m a s k 0 gp quad to previou x 2 previou y 2 current x 0 current y 0 gp curve to previou x 2 previou y 2 current x 1 current y 1 current x 0 current y 0 is close size 1 previou get size 1 current get 0 previou mask c2 m a s k 0 current mask c1 m a s k 0 gp line to current x 0 current y 0 gp quad to current x 1 current y 1 current x 0 current y 0 current mask c1 m a s k 0 gp quad to previou x 2 previou y 2 current x 0 current y 0 gp curve to previou x 2 previou y 2 current x 1 current y 1 current x 0 current y 0 gp close path gp contain point2 d p validate path general path contain p the outline of bezi path contain the specify point p the point to be test tolerance the tolerance the test outline contain point2 d p tolerance validate path path iterator i general path get path iterator affine transform tolerance coord 6 type i current segment coord prev x coord 0 prev y coord 1 i next i is do i current segment coord geom line contain point prev x prev y coord 0 coord 1 p x p y tolerance prev x coord 0 prev y coord 1 i next intersect rectangle2 d r validate path general path intersect r path iterator get path iterator affine transform at validate path general path get path iterator at contain rectangle2 d r validate path general path contain r path iterator get path iterator affine transform at flatness validate path general path get path iterator at flatness intersect x y w h validate path general path intersect x y w h rectangle2 d get bounds2 d validate path general path get bounds2 d rectangle2 d get bounds2 d validate path rectangle2 d r general path get bounds2 d r rectangle2 d rectangle2 d r rectangle2 d r get x r get y r get width r get height rectangle get bound validate path general path get bound contain x y w h validate path general path contain x y w h contain x y validate path general path contain x y set close value is close value is close value invalidate path is close is close create a deep copy of the bezi path clone bezi path that bezi path clone i 0 n size i n i++ that set i node get i clone that transform the bezi path tx the transformation transform affine transform tx point2 d p point2 d node cp i 0 i 3 i++ p x cp x i p y cp y i tx transform p p cp x i p x cp y i p y invalidate path set to bezi path that that size size remove size 1 i 0 n size i n i++ get i set to that get i size that size add node that get size clone the point at the center of the bezi path point2 d get center sx 0 sy 0 node p sx + p x 0 sy + p y 0 n size point2 d sx n sy n a point on the edge of the bezi path which cross the line from the center of the bezi path to the specify point no edge cross the line the near c0 control point is point2 d chop point2 d p validate path geom chop general path p point2 d ctr get center chop point cx 1 cy 1 len m a x v a l u e point along edge validate path path iterator i general path get path iterator affine transform 1 coord 6 type i current segment coord prev x coord 0 prev y coord 1 i next i is do i next i current segment coord point2 d chop geom intersect prev x prev y coord 0 coord 1 p x p y ctr x ctr y chop cl geom length2 chop x chop y p x p y cl len len cl cx chop x cy chop y prev x coord 0 prev y coord 1 is close size 1 node first get 0 node last get size 1 point2 d chop geom intersect first x 0 first y 0 last x 0 last y 0 p x p y ctr x ctr y chop cl geom length2 chop x chop y p x p y cl len len cl cx chop x cy chop y none found pick close vertex len m a x v a l u e j 0 n size j n j++ node cp get j l geom length2 cp x 0 cp y 0 p x p y l len len l cx cp x 0 cy cp y 0 point2 d cx cy the index of the control point that is furthest from the center index of outermost node out 1 point2 d ctr get center out 0 dist 0 i 0 n size i n i++ node cp get i d geom length2 ctr x ctr y cp x 0 cp y 0 d dist dist d out i out a relative point on the path where 0 is the start point of the path and 1 is the end point of the path relative a value between 0 and 1 point2 d get point on path relative flatness size 0 size 1 get 0 get control point 0 relative 0 get 0 get control point 0 relative 1 get size 1 get control point 0 validate path determine the length of the path len 0 path iterator i general path get path iterator affine transform flatness coord 6 type i current segment coord prev x coord 0 prev y coord 1 i next i is do i next i current segment coord len + geom length prev x prev y coord 0 coord 1 prev x coord 0 prev y coord 1 compute the relative point on the path relative len len relative po 0 i general path get path iterator affine transform flatness type i current segment coord prev x coord 0 prev y coord 1 i next i is do i next i current segment coord seg len geom length prev x prev y coord 0 coord 1 po + seg len relative len point2 d coord 0 coord 1 compute the relative point2 d on the line point2 d prev x po len + coord 0 po + seg len len prev y po len + coord 1 po + seg len len factor relative len po seg len point2 d prev x 1 factor + coord 0 factor prev y 1 factor + coord 1 factor po + seg len prev x coord 0 prev y coord 1 internal we should nev get here get the segment of the polyline that is hit by the given point2 d the index of the segment or 1 no segment wa hit find segment point2 d find tolerance x x x work only straight line node v1 v2 bezi path temp path bezi path node t1 t2 temp path add t1 node temp path add t2 node i 0 n size 1 i n i++ v1 get i v2 get i+1 v1 mask 0 v2 mask 0 geom line contain point v1 x 0 v1 y 0 v2 x 0 v2 y 0 find x find y tolerance i t1 set to v1 t2 set to v2 temp path invalidate path temp path outline contain find tolerance i is close size 1 v1 get size 1 v2 get 0 v1 mask 0 v2 mask 0 geom line contain point v1 x 0 v1 y 0 v2 x 0 v2 y 0 find x find y tolerance size 1 t1 set to v1 t2 set to v2 temp path invalidate path temp path outline contain find tolerance size 1 1 join two segment into one the given point2 d hit a node of the bezi path the index of the join segment or 1 no segment wa join join segment point2 d join tolerance i 0 i size i++ node p get i geom length p x 0 p y 0 join x join y tolerance remove i i 1 split the segment at the given point2 d a segment wa hit the index of the segment or 1 no segment wa hit split segment point2 d split tolerance i find segment split tolerance next i i + 1 % size i 1 get i mask c2 m a s k c2 m a s k get next i mask c1 m a s k 0 quadto add i + 1 node c2 m a s k split split split get i mask c2 m a s k 0 get next i mask c1 m a s k c1 m a s k quadto add i + 1 node c2 m a s k split split split get i mask c2 m a s k c2 m a s k get next i mask c1 m a s k c2 m a s k cubicto add i + 1 node c1 m a s k | c2 m a s k split split split lineto add i + 1 node split i+1 move to x1 y1 size 0 illegal path state move to only allow when empty add node x1 y1 line to x1 y1 size 0 illegal path state line to only allow when not empty add node x1 y1 quad to x1 y1 x2 y2 size 0 illegal path state quad to only allow when not empty add node c1 m a s k x2 y2 x1 y1 x2 y2 curve to x1 y1 x2 y2 x3 y3 size 0 illegal path state curve to only allow when not empty node last point get size 1 last point mask | c2 m a s k last point x 2 x1 last point y 2 y1 add node c1 m a s k x3 y3 x2 y2 x3 y3 point2 d to polygon point2 d point point2 d size i 0 n size i n i++ point i point2 d get i x 0 get i y 0 point 
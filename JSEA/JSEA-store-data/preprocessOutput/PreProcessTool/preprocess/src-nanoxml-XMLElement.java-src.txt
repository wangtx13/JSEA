wern randelshof 2006 05 26 replace 1 1 collection 1 2 collection remove deprecate add create element add get attribute value add get attribute value add write change character 2006 05 02 xml element $ revision 1 4 $ $ date 2002 03 24 10 27 59 $ $ r e l e s e 2 2 1 $ thi nano xml 2 2000 2002 scheemaeck right reserve thi provide imply hold damage arise thi grant thi purpose include application restriction 1 thi misrepresent write thi appreciate require 2 mark misrepresent 3 thi remove io xml element representation xml able parse xml p d l d t b parse xml data b d t d d parse xml data using u l o d e xml element xml xml element b r reader reader reader filename xml b r xml parse reader reader o d e u l d d d l d l d t b retrieve attribute b d t d d enumerate attribute element using link #enumerate attribute enumerate attribute attribute value retrieve using link #get attribute get attribute example show how list attribute element u l o d e xml element element b r iterator element get attribute b r ha next b r key next b r value element get attribute key b r out key + + value b r o d e u l d d d l d l d t b retrieve child element b d t d d enumerate child element using link #iterate child iterate child number child iterator retrieve using link #count child count child d d d l d l d t b element contain character data b d t d d iterator contain character data like example u l o d e lt title title lt title o d e u l retrieve data using link #get content get content d d d l d l d t b subclass xml element b d t d d when subclass xml element need override link #create element create element which ha copy receiver d d d l p scheemaeck lt href mailto cyberelf mac com cyberelf mac com 2005 06 18 wern randelshof adapt 2 collection p i $ r e l e s e 2 2 1 $ $ revision 1 4 $ see xml parse xml element serialization serial serial u 6685035139346394777 l major nano xml same major minor are binary compatible same major are compatible major different need modify client see # n n o xml m i n o r v e r s i o n n n o xml m j o r v e r s i o n 2 minor nano xml same major minor are binary compatible same major are compatible major different need modify client see # n n o xml m j o r v e r s i o n n n o xml m i n o r v e r s i o n 2 attribute given element b invariant b field empty field nev key set iterator value are hash map attribute child iterator element b invariant b field empty field nev iterator are instance xml element subclass xml element list child element b invariant b field iff element initialize eith parse set field s empty field contain valid xml identifier # p d t content b invariant b field iff element # p d t element field include empty content conversion table amp entity key set iterator are entity amp delimiter b invariant b field nev field alway contain association lt lt \ apo amp amp key set iterator are value are hash map entity line number where element start b invariant b line nr 0 line nr element attribute are insensitive ignore leading trailing whitespace # p d t section have ignore ignore whitespace character read too much thi character provide push back functionality input reader have pushback reader there character thi field \0 read too much reader provide caller parse b invariant b field parse running reader reader current line number content b invariant b parser line nr 0 parse running parser line nr wern randelshof thi variable set character are entity encoding left underlie character create initializ xml element calling construction equivalent xml element hash map b postcondition b count child 0 iterate child empty enumeration enumerate property empty enumeration get child empty vector get content get line nr 0 get see # xml element hash map xml element hash map see # xml element see # xml element hash map xml element hash map xml element thi hash map create initializ xml element calling construction equivalent xml element entity entity entity conversion table b precondition b entity b postcondition b count child 0 iterate child empty enumeration enumerate property empty enumeration get child empty vector get content get line nr 0 get see # xml element see # xml element see # xml element hash map xml element hash map xml element hash map entity thi entity create initializ xml element calling construction equivalent xml element hash map skip leading whitespace skip leading whitespace leading trailing whitespace p d t content ha remove b postcondition b count child 0 iterate child empty enumeration enumerate property empty enumeration get child empty vector get content get line nr 0 get see # xml element see # xml element hash map xml element hash map see # xml element hash map xml element hash map xml element skip leading whitespace thi hash map skip leading whitespace create initializ xml element calling construction equivalent xml element entity skip leading whitespace entity entity conversion table skip leading whitespace leading trailing whitespace p d t content ha remove b precondition b entity b postcondition b count child 0 iterate child empty enumeration enumerate property empty enumeration get child empty vector get content get line nr 0 get see # xml element see # xml element see # xml element hash map xml element hash map xml element hash map entity skip leading whitespace thi entity skip leading whitespace create initializ xml element entity entity conversion table skip leading whitespace leading trailing whitespace p d t content ha remove ignore element attribute have ignore b precondition b entity b postcondition b count child 0 iterate child empty enumeration enumerate property empty enumeration get child empty vector get content get line nr 0 get see # xml element see # xml element see # xml element hash map xml element hash map see # xml element hash map xml element hash map xml element hash map entity skip leading whitespace ignore thi entity skip leading whitespace ignore create initializ xml element p thi constructor should i i call link #create element create element create child iterator entity entity conversion table skip leading whitespace leading trailing whitespace p d t content ha remove fill basic conversion table basic entity need add entity list ignore element attribute have ignore b precondition b entity fill basic conversion table then entity contain at least entry amp lt apo b postcondition b count child 0 iterate child empty enumeration enumerate property empty enumeration get child empty vector get content get line nr 0 get see #create element protect xml element hash map entity skip leading whitespace fill basic conversion table ignore thi entity skip leading whitespace fill basic conversion table ignore protect xml element hash map entity skip leading whitespace fill basic conversion table ignore character thi ignore whitespace skip leading whitespace thi ignore ignore thi thi content thi attribute hash map thi child list thi entity entity thi line nr 0 thi character character iterator thi entity key set iterator ha next key next value thi entity get key value value value thi entity put key value fill basic conversion table thi entity put amp thi entity put thi entity put apo \ thi entity put lt thi entity put add child element child child element add b precondition b child child get child doe have parent element b postcondition b count child old count child + 1 iterate child old iterate child + child get child old iterate child + child see #count child see #iterate child see #get child see #remove child xml element remove child xml element add child xml element child thi child add child add modifie attribute attribute value value attribute b precondition b valid xml identifier value b postcondition b enumerate attribute old enumerate attribute + get attribute value set attribute value thi ignore upper thi attribute put value add modifie attribute attribute value value attribute b precondition b valid xml identifier b postcondition b enumerate attribute old enumerate attribute + get attribute value set attribute value thi ignore upper thi attribute put value add modifie attribute attribute value value attribute b precondition b valid xml identifier b postcondition b enumerate attribute old enumerate attribute + get attribute value set attribute value thi ignore upper thi attribute put value number child iterator element b postcondition b result 0 see #add child xml element add child xml element see #iterate child see #get child see #remove child xml element remove child xml element count child thi child size enumerate attribute b postcondition b result iterator enumerate attribute thi attribute key set iterator enumerate child iterator b postcondition b result iterator iterate child thi child iterator child iterator list safe modify thi list b postcondition b result see #add child xml element add child xml element see #count child see #iterate child see #remove child xml element remove child xml element list get child list thi child clone e thi nev happen howev some compiler are so braindead they require thi clause p d t content there content o d e o d e see #set content set content get content thi content line nr data on which element found thi 0 there associate data b postcondition b result 0 get line nr thi line nr attribute element attribute doesn t attribute b precondition b valid xml identifier get attribute thi get attribute attribute element attribute doesn t value attribute value key attribute miss b precondition b valid xml identifier get attribute value thi ignore upper value thi attribute get value value value value attribute looking up key hashtable attribute doesn t value correspond key p example value set contain mapping one 1 element contain attribute attr one then get attribute attr mapping key 1 attribute value set hash map mapping key set iterator value key key attribute miss allow literal literal are valid b precondition b valid xml identifier value set key set iterator value set are see #set attribute set attribute see #remove attribute remove attribute see #enumerate attribute see #get attribute get attribute see #get attribute get attribute get attribute map value set key allow literal thi ignore upper key thi attribute get result key key key result value set get key result allow literal result key thi invalid value key result attribute element attribute doesn t attribute b precondition b valid xml identifier see #set attribute set attribute see #remove attribute remove attribute see #enumerate attribute see #get attribute get attribute see #get attribute hash map get attribute hash map get attribute thi get attribute attribute element attribute doesn t value attribute value key attribute miss b precondition b valid xml identifier see #set attribute set attribute see #remove attribute remove attribute see #enumerate attribute see #get attribute get attribute see #get attribute hash map get attribute hash map get attribute value thi get attribute value attribute looking up key hashtable attribute doesn t value correspond key p example value set contain mapping one 1 element contain attribute attr one then get attribute attr mapping key 1 attribute value set hash map mapping key set iterator value key key attribute miss allow literal literal are valid b precondition b valid xml identifier value set key set iterator value set are value value set are see #set attribute set attribute see #remove attribute remove attribute see #enumerate attribute see #get attribute get attribute see #get attribute get attribute get attribute hash map value set key allow literal thi get attribute value set key allow literal attribute element attribute doesn t 0 attribute b precondition b valid xml identifier see #set attribute set attribute see #enumerate attribute see #get attribute get attribute see #get attribute hash map get attribute hash map get attribute thi get attribute 0 attribute element attribute doesn t value attribute value key attribute miss b precondition b valid xml identifier see #set attribute set attribute see #enumerate attribute see #get attribute get attribute see #get attribute hash map get attribute hash map get attribute value thi ignore upper value thi attribute get value value parse value number format e thi invalid value value get attribute value v get attribute value v v v attribute looking up key hashtable attribute doesn t value correspond key p example value set contain mapping one 1 element contain attribute attr one then get attribute attr mapping key 1 attribute value set hash map mapping key set iterator value key key attribute miss allow literal number literal number are valid b precondition b valid xml identifier value set key set iterator value set are value value set are key eith key value set see #set attribute set attribute see #enumerate attribute see #get attribute get attribute see #get attribute get attribute get attribute hash map value set key allow literal number thi ignore upper key thi attribute get result key key key result value set get key cast e thi invalid value set result allow literal number thi invalid value key result value key number format e thi invalid value key result value attribute element attribute doesn t 0 0 attribute b precondition b valid xml identifier see #set attribute set attribute see #enumerate attribute see #get attribute get attribute see #get attribute hash map get attribute hash map get attribute thi get attribute 0 attribute element attribute doesn t value attribute value key attribute miss b precondition b valid xml identifier see #set attribute set attribute see #enumerate attribute see #get attribute get attribute see #get attribute hash map get attribute hash map get attribute value thi ignore upper value thi attribute get value value value value value number format e thi invalid value value attribute looking up key hashtable attribute doesn t value correspond key p example value set contain mapping one 1 0 element contain attribute attr one then get attribute attr mapping key 1 0 attribute value set hash map mapping key set iterator value key key attribute miss allow literal number literal number are valid b precondition b valid xml identifier value set key set iterator value set are value value set are key eith key value set see #set attribute set attribute see #enumerate attribute see #get attribute get attribute see #get attribute get attribute get attribute hash map value set key allow literal number thi ignore upper key thi attribute get result key key key result value set get key cast e thi invalid value set result allow literal number thi invalid value key result value key number format e thi invalid value key result value attribute element attribute doesn t value value attribute equal value value attribute equal value value doesn t match value value attribute value value associate value value associate value value attribute miss b precondition b valid xml identifier value value are different see #set attribute set attribute see #remove attribute remove attribute see #enumerate attribute get attribute value value value thi ignore upper value thi attribute get value value value equal value value equal value thi invalid value value get attribute value get attribute value element see #set set get thi read one xml element io reader pars reader reader which retrieve xml data b precondition b reader reader close b postcondition b state receiver update reflect xml element parse reader reader point first character last character xml element io i o occur reading input xml parse occur parse read data parse reader reader reader i o xml parse thi parse reader reader starting line nr 1 read one xml element io reader pars reader reader which retrieve xml data starting line nr line number first line data b precondition b reader reader close b postcondition b state receiver update reflect xml element parse reader reader point first character last character xml element io i o occur reading input xml parse occur parse read data parse reader reader reader starting line nr i o xml parse thi thi content thi attribute hash map thi child list thi read too much \0 thi reader reader thi parser line nr starting line nr ch thi scan whitespace ch thi expect input ch thi read ch || ch ? thi skip special tag 0 thi unread ch thi scan element thi read one xml element pars reader which retrieve xml data b precondition b length 0 b postcondition b state receiver update reflect xml element parse reader xml parse occur parse parse xml parse thi parse reader reader starting line nr 1 i o e handling suxx read one xml element pars reader which retrieve xml data offset first character scan b precondition b offset lt length offset 0 b postcondition b state receiver update reflect xml element parse reader xml parse occur parse parse offset xml parse thi parse substring offset read one xml element pars reader which retrieve xml data offset first character scan end character where stop scanning thi character scan b precondition b end lt length offset lt end offset 0 b postcondition b state receiver update reflect xml element parse reader xml parse occur parse parse offset end xml parse thi parse substring offset end read one xml element pars reader which retrieve xml data offset first character scan end character where stop scanning thi character scan starting line nr line number first line data b precondition b end lt length offset lt end offset 0 b postcondition b state receiver update reflect xml element parse reader xml parse occur parse parse offset end starting line nr xml parse substring offset end thi parse reader reader starting line nr i o e handling suxx read one xml element pars input reader which retrieve xml data offset first character scan end character where stop scanning thi character scan b precondition b input end lt input length offset lt end offset 0 b postcondition b state receiver update reflect xml element parse reader xml parse occur parse parse input offset end xml parse thi parse input offset end starting line nr 1 read one xml element pars input reader which retrieve xml data offset first character scan end character where stop scanning thi character scan starting line nr line number first line data b precondition b input end lt input length offset lt end offset 0 b postcondition b state receiver update reflect xml element parse reader xml parse occur parse parse input offset end starting line nr xml parse reader reader reader input offset end thi parse reader reader starting line nr i o e thi nev happen remove child element child child element remove b precondition b child child child element receiver b postcondition b count child old count child 1 iterate child old iterate child child get child old iterate child child see #add child xml element add child xml element see #count child see #iterate child see #get child remove child xml element child thi child remove child remove attribute attribute b precondition b valid xml identifier b postcondition b enumerate attribute old enumerate attribute get attribute remove attribute thi ignore upper thi attribute remove create similar xml element xml element create element xml element elem create element elem set elem create similar xml element p should override thi when subclass xml element protect xml element create element xml element thi entity thi ignore whitespace thi ignore thi character change content content content set content content thi content content change element b precondition b valid xml identifier see #get set thi write xml element see #write io write output stream out output stream output stream output stream out thi write flush out i o e handling suxx write xml element write xml data b precondition b close io i o data could write see #to write i o thi thi write thi content write write thi thi attribute empty iterator thi attribute key set iterator ha next write key next value thi attribute get key write key write write thi write value write thi content thi content length 0 write thi write thi content write write write thi write thi child empty write write write iterator thi iterate child ha next xml element child xml element next child write write write write thi write write xml element indent element write xml data b precondition b close io i o data could write see #to 0 write xml element indent element write xml data b precondition b close indent indentation io i o data could write see #to protect indent thi thi write thi content space indent 2 fill space write space write write thi thi attribute empty iterator enm thi attribute key set iterator enm ha next write key enm next value thi attribute get key write key write write thi write value write thi content thi content length 0 write thi write thi content write write write thi write thi child empty write write write write iterator enm thi get child iterator enm ha next xml element child xml element enm next child indent + 1 write space write write write thi write write i o e internal internal e get message init cause e write write xml data str write b precondition b close str protect write str i o i 0 i str length i + 1 ch str at i ch write write l write t write write write g write t write write write write m write p write write write q write u write o write t write \ write write write p write o write s write ch 32 || character 126 write write # write x write 16 write write ch scan identifier current reader scan identifier append result result buffer which scan identifier put b precondition b result next character read reader valid first character xml identifier b postcondition b next character read reader won t identifier character protect scan identifier buffer result i o ch thi read ch || ch z ch || ch z ch 0 || ch 9 ch ch ch ch ch \u007 e thi unread ch result append ch thi scan identifier current reader next character whitespace protect scan whitespace i o ch thi read ch \r ch thi scan identifier current reader scan whitespace append result next character whitespace b precondition b result protect scan whitespace buffer result i o ch thi read ch result append ch \r ch thi scan delimit current reader scan delimiter append b precondition b next read delimit protect scan buffer i o delimit thi read delimit \ delimit thi expect input \ ch thi read ch delimit ch thi resolve entity append ch scan # p d t element d t section entity are resolve next lt skip scan data append data b precondition b data protect scan p data buffer data i o ch thi read ch ch thi read ch thi check d t data thi unread ch ch thi resolve entity data data append ch scan special tag tag d t section append content buf b precondition b buf first lt ha already read protect check d t buffer buf i o ch thi read ch thi unread ch thi skip special tag 0 thi check literal d t thi skip special tag 1 one ha already read delimit skip 0 delimit skip 3 ch thi read ch delimit skip 2 delimit skip + 1 buf append buf append delimit skip 0 delimit skip 2 i 0 i delimit skip i++ buf append delimit skip 0 buf append delimit skip 3 i 0 i delimit skip i + 1 buf append buf append ch delimit skip 0 skip comment b precondition b first lt ha already read protect skip comment i o dash read 2 dash read 0 ch thi read ch dash read 1 dash read 2 thi read thi expect input skip special tag comment bracket level number open square bracket have already read b precondition b first lt ha already read bracket level 0 protect skip special tag bracket level i o tag level 1 delimit \0 bracket level 0 ch thi read ch bracket level + 1 ch ch thi read ch bracket level + 1 ch bracket level 1 ch thi skip comment tag level 0 ch thi read delimit \0 ch || ch \ delimit ch bracket level 0 ch tag level + 1 ch tag level 1 ch bracket level + 1 ch bracket level 1 ch delimit delimit \0 scan data literal text scanning stop when character doe match after complete text ha check whichev come first literal literal check b precondition b literal protect check literal literal i o length literal length i 0 i length i + 1 thi read literal at i read character reader protect read i o thi read too much \0 ch thi read too much thi read too much \0 ch i thi reader read i 0 thi unexpect end data i 10 thi parser line nr + 1 i scan xml element elt element contain result b precondition b first lt ha already read elt protect scan element xml element elt i o buffer buf buffer thi scan identifier buf buf elt set ch thi scan whitespace ch ch buf set length 0 thi unread ch thi scan identifier buf key buf ch thi scan whitespace ch thi expect input thi unread thi scan whitespace buf set length 0 thi scan buf elt set attribute key buf ch thi scan whitespace ch ch thi read ch thi expect input buf set length 0 ch thi scan whitespace buf ch thi unread ch thi scan p data buf ch thi read ch thi check d t buf thi scan p data buf ch thi scan whitespace buf ch thi unread ch thi scan p data buf ch || thi ignore whitespace buf set length 0 ch thi unread ch buf length 0 ch ch ch thi read ch thi expect input comment element ch thi read ch thi expect input comment element thi skip comment thi unread ch xml element child thi create element thi scan element child elt add child child ch thi scan whitespace ch thi expect input ch thi read thi unread ch thi ignore whitespace elt set content buf trim elt set content buf ch thi read ch thi expect input thi unread thi scan whitespace thi check literal thi expect input thi scan whitespace thi expect input resolve entity entity read reader value entity append buf buf where put entity value b precondition b first amp ha already read buf protect resolve entity buffer buf i o ch \0 buffer key buf buffer ch thi read ch key buf append ch key key buf key at 0 # key at 1 x ch parse key substring 2 16 ch parse key substring 1 10 number format e thi unknown entity key buf append ch value thi entity get key value thi unknown entity key buf append value push character back read back buffer ch character push back b precondition b read back buffer empty ch \0 protect unread ch thi read too much ch create parse when invalid valueset given entity b precondition b protect xml parse invalid value set msg invalid value set entity \ + + \ xml parse thi get thi parser line nr msg create parse when invalid value given entity value value entity b precondition b value protect xml parse invalid value value msg attribute \ + + \ doe contain valid + value \ + value + \ xml parse thi get thi parser line nr msg create parse when end data input ha reach protect xml parse unexpect end data msg unexpect end data reach xml parse thi get thi parser line nr msg create parse when syntax occur context context which occur b precondition b context context length 0 protect xml parse syntax context msg syntax parse + context xml parse thi get thi parser line nr msg create parse when next character read character wa expect set set character human readable form wa expect b precondition b set set length 0 protect xml parse expect input set msg expect + set xml parse thi get thi parser line nr msg create parse when entity could resolve entity b precondition b length 0 protect xml parse unknown entity msg unknown invalid entity + + xml parse thi get thi parser line nr msg 
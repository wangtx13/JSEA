# quad tree2 d 1 0 2006 01 14 copyright c 1996 2006 by the original author of jhotdraw and all it contributor jhotdraw org all right reserve software is the confidential and proprietary information of jhotdraw org confidential information you shall not disclose such confidential information and shall use it only in accordance with the term of the license agreement you enter into with jhotdraw org ??? org jhotdraw geom geom quad tree2 d author wern randelshof 1 0 2006 01 14 derive from quad tree quad tree2 d t hash map t rectangle2 d outside hash map t rectangle2 d quad node root max capacity 32 min size 32 max outside 32 create a instance quad tree2 d root quad node rectangle2 d 0 0 800 600 quad tree2 d rectangle2 d bound root quad node bound add t o rectangle2 d bound root bound contain bound root add o rectangle2 d bound clone outside put o rectangle2 d bound clone outside size max outside reorganize reorganize root join outside put all root root clear iterator map entry t rectangle2 d i outside entry set iterator map entry t rectangle2 d entry i next rectangle2 d tree bound rectangle2 d entry get value clone i ha next entry i next rectangle2 d bound entry get value tree bound add bound root bound tree bound i outside entry set iterator i ha next entry i next root add entry get key entry get value outside clear remove t o outside remove o root remove o collection t find contain point2 d p hash set t result hash set t root find contain p result map entry t rectangle2 d entry outside entry set entry get value contain p result add entry get key result collection t find intersect rectangle2 d r find intersect rectangle2 d r get x r get y r get width r get height collection t find intersect rectangle2 d r hash set t result hash set t root find intersect r result map entry t rectangle2 d entry outside entry set entry get value intersect r result add entry get key result collection t find inside rectangle2 d r hash set t result hash set t root find inside r result map entry t rectangle2 d entry outside entry set r contain entry get value result add entry get key result quad node rectangle2 d bound we store an into map 1 the bound of the contain our bound or 2 we are a leaf key value rectangle2 d hash map t rectangle2 d quad node north east quad node north west quad node south east quad node south west quad node rectangle2 d bound bound bound hash map t rectangle2 d is leaf north east remove t o remove o is leaf north east remove o north west remove o south east remove o south west remove o add t o rectangle2 d o bound we have to split? is leaf size max capacity bound width min size bound height min size split is leaf || o bound contain bound we put an into our hashtable we are a leaf or the bound of the contain our bound put o o bound north east bound intersect o bound north east add o o bound north west bound intersect o bound north west add o o bound south east bound intersect o bound south east add o o bound south west bound intersect o bound south west add o o bound split is leaf hw bound width 2 hh bound height 2 north west quad node rectangle2 d bound x bound y hw hh north east quad node rectangle2 d bound x + hw bound y bound width hw hh south west quad node rectangle2 d bound x bound y + hh hw bound height hh south east quad node rectangle2 d bound x + hw bound y + hh bound width hw bound height hh hash map t rectangle2 d temp hash map t rectangle2 d map entry t rectangle2 d entry temp entry set add entry get key entry get value join is leaf north west join north east join south west join south east join put all north west put all north east put all south west put all south east north west north east south west south east find contain point2 d p hash set t result bound contain p map entry t rectangle2 d entry entry set entry get value contain p result add entry get key is leaf north west find contain p result north east find contain p result south west find contain p result south east find contain p result find intersect rectangle2 d r hash set t result bound intersect r old size result size map entry t rectangle2 d entry entry set entry get value intersect r result add entry get key is leaf north west find intersect r result north east find intersect r result south west find intersect r result south east find intersect r result find inside rectangle2 d r hash set t result bound intersect r map entry t rectangle2 d entry entry set r contain entry get value result add entry get key is leaf north west find inside r result north east find inside r result south west find inside r result south east find inside r result 
content reader nano xml $ revision 1 4 $ $ date 2002 01 04 21 03 28 $ $ name r e l e a s e 2 2 1 $ is part of nano xml 2 copyright c 2000 2002 marc de scheemaeck all right reserve software is provide a is without any express or imply warranty in no event will the author be hold liable any damage arise from the use of software permission is grant to anyone to use software any purpose include commercial application and to alter it and redistribute it freely subject to the following restriction 1 the origin of software must not be misrepresent you must not claim that you write the original software you use software in a product an acknowledgment in the product documentation would be appreciate but is not require 2 alter source version must be plainly mark a such and must not be misrepresent a being the original software 3 notice may not be remove or alter from any source distribution net n3 nanoxml io reader io i o reader read data from another reader until a element ha be encounter author marc de scheemaeck $ name r e l e a s e 2 2 1 $ $ revision 1 4 $ content reader reader the encapsulate reader i xml reader reader buffer buffer pointer into the buffer buffer index the entity resolv i xml entity resolv resolv create the reader reader the encapsulate reader resolv the entity resolv buffer data that ha already be read from reader content reader i xml reader reader i xml entity resolv resolv buffer reader reader resolv resolv buffer buffer buffer index 0 clean up the when it s destroy finalize throwable reader resolv buffer finalize read a block of data output buffer where to put the read data offset first position in buffer to put the data size maximum number of char to read the number of char read or 1 at e o f io i o an occur reading the data read output buffer offset size i o char read 0 buffer length buffer length offset + size output buffer length size output buffer length offset char read size str ch buffer index buffer length str xml read reader ch str at 0 ch buffer at buffer index buffer index++ output buffer char read ch char read++ t interprete char in the buffer ch reader unread ch ch str length 1 str at 1 # ch xml process literal str xml process entity str reader resolv output buffer char read ch char read++ char read 0 char read 1 char read xml parse e i o e get message skip remain data and close the stream io i o an occur reading the data close i o buffer length buffer length str ch buffer index buffer length str xml read reader ch str at 0 ch buffer at buffer index buffer index++ t interprete char in the buffer ch reader unread ch ch str length 1 str at 1 # xml process entity str reader resolv xml parse e i o e get message 
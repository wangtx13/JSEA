xml nano xml $ revision 1 4 $ $ date 2002 03 24 11 37 51 $ $ r e l e s e 2 2 1 $ thi nano xml 2 2000 2002 scheemaeck right reserve thi provide imply hold damage arise thi grant thi purpose include application restriction 1 thi misrepresent write thi appreciate require 2 mark misrepresent 3 thi remove net n3 io i o io output stream io io iterator vector xml write xml data stream see net n3 i xml element see io scheemaeck $ r e l e s e 2 2 1 $ $ revision 1 4 $ xml where write output create xml where write output xml thi thi create xml stream where write output xml output stream stream thi stream clean up when s destroy protect finalize throwable thi finalize write xml element xml non xml element write write i xml element xml i o thi write xml 0 write xml element xml non xml element write pretty space need insert make output more readable write i xml element xml pretty i o thi write xml pretty 0 write xml element xml non xml element write pretty space need insert make output more readable indent how many space indent element write i xml element xml pretty indent i o thi write xml pretty indent write xml element xml non xml element write pretty space need insert make output more readable indent how many space indent element write i xml element xml pretty indent collapse empty element i o pretty i 0 i indent i++ thi xml get xml get content pretty thi write xml get content trim thi write xml get content thi thi xml get full vector nsprefix vector xml get namespace xml get equal xml get full thi xmln \ + xml get namespace + prefix xml get full prefix prefix substring 0 prefix index nsprefix add element prefix thi xmln + prefix thi \ + xml get namespace + \ iterator enm xml iterate attribute enm ha next key enm next index key index index 0 namespace xml get attribute namespace key namespace prefix key substring 0 index nsprefix contain prefix thi xmln + prefix thi \ + namespace + nsprefix add element prefix enm xml iterate attribute enm ha next key enm next value xml get attribute key thi + key + \ thi write value thi xml get content xml get content length 0 thi write xml get content + xml get full + pretty xml ha child || collapse empty element pretty enm xml iterate child enm ha next i xml element child i xml element enm next thi write child pretty indent + 4 collapse empty element pretty i 0 i indent i++ thi thi + xml get full + pretty thi pretty thi flush write encoding reserve character str write write str i 0 i str length i++ str at i 0x0 thi thi lt thi thi amp \ thi apo thi || 0x7 e thi #x thi 16 thi thi 